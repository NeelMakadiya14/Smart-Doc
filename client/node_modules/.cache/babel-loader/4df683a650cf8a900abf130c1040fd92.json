{"ast":null,"code":"import _slicedToArray from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module map\n */\nimport * as map from './map.js';\nimport * as string from './string.js';\nimport * as conditions from './conditions.js';\nimport * as storage from './storage.js';\n/* istanbul ignore next */\n// @ts-ignore\n\nexport var isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name);\n/* istanbul ignore next */\n\nexport var isBrowser = typeof window !== 'undefined' && !isNode;\n/* istanbul ignore next */\n\nexport var isMac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;\n/**\n * @type {Map<string,string>}\n */\n\nvar params;\nvar args = [];\n/* istanbul ignore next */\n\nvar computeParams = function computeParams() {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create();\n      var pargs = process.argv;\n      var currParamName = null;\n      /* istanbul ignore next */\n\n      for (var i = 0; i < pargs.length; i++) {\n        var parg = pargs[i];\n\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '');\n          }\n\n          currParamName = parg;\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg);\n            currParamName = null;\n          } else {\n            args.push(parg);\n          }\n        }\n      }\n\n      if (currParamName !== null) {\n        params.set(currParamName, '');\n      } // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n\n    } else if (typeof location === 'object') {\n      params = map.create() // eslint-disable-next-line no-undef\n      ;\n      (location.search || '?').slice(1).split('&').forEach(function (kv) {\n        if (kv.length !== 0) {\n          var _kv$split = kv.split('='),\n              _kv$split2 = _slicedToArray(_kv$split, 2),\n              key = _kv$split2[0],\n              value = _kv$split2[1];\n\n          params.set(\"--\".concat(string.fromCamelCase(key, '-')), value);\n          params.set(\"-\".concat(string.fromCamelCase(key, '-')), value);\n        }\n      });\n    } else {\n      params = map.create();\n    }\n  }\n\n  return params;\n};\n/**\n * @param {string} name\n * @return {boolean}\n */\n\n/* istanbul ignore next */\n\n\nexport var hasParam = function hasParam(name) {\n  return computeParams().has(name);\n};\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n\n/* istanbul ignore next */\n\nexport var getParam = function getParam(name, defaultVal) {\n  return computeParams().get(name) || defaultVal;\n}; // export const getArgs = name => computeParams() && args\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n\n/* istanbul ignore next */\n\nexport var getVariable = function getVariable(name) {\n  return isNode ? conditions.undefinedToNull(process.env[name.toUpperCase()]) : conditions.undefinedToNull(storage.varStorage.getItem(name));\n};\n/**\n * @param {string} name\n * @return {string|null}\n */\n\nexport var getConf = function getConf(name) {\n  return computeParams().get('--' + name) || getVariable(name);\n};\n/**\n * @param {string} name\n * @return {boolean}\n */\n\n/* istanbul ignore next */\n\nexport var hasConf = function hasConf(name) {\n  return hasParam('--' + name) || getVariable(name) !== null;\n};\n/* istanbul ignore next */\n\nexport var production = hasConf('production');","map":{"version":3,"sources":["/media/neel/DATA/WebD/Smart Doc/client/node_modules/lib0/environment.js"],"names":["map","string","conditions","storage","isNode","process","release","test","name","isBrowser","window","isMac","navigator","platform","params","args","computeParams","undefined","create","pargs","argv","currParamName","i","length","parg","set","push","location","search","slice","split","forEach","kv","key","value","fromCamelCase","hasParam","has","getParam","defaultVal","get","getVariable","undefinedToNull","env","toUpperCase","varStorage","getItem","getConf","hasConf","production"],"mappings":"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","sourcesContent":["/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module map\n */\n\nimport * as map from './map.js'\nimport * as string from './string.js'\nimport * as conditions from './conditions.js'\nimport * as storage from './storage.js'\n\n/* istanbul ignore next */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name)\n/* istanbul ignore next */\nexport const isBrowser = typeof window !== 'undefined' && !isNode\n/* istanbul ignore next */\nexport const isMac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false\n\n/**\n * @type {Map<string,string>}\n */\nlet params\nconst args = []\n\n/* istanbul ignore next */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create()\n      const pargs = process.argv\n      let currParamName = null\n      /* istanbul ignore next */\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i]\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '')\n          }\n          currParamName = parg\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg)\n            currParamName = null\n          } else {\n            args.push(parg)\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '')\n      }\n    // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create()\n      // eslint-disable-next-line no-undef\n      ;(location.search || '?').slice(1).split('&').forEach(kv => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=')\n          params.set(`--${string.fromCamelCase(key, '-')}`, value)\n          params.set(`-${string.fromCamelCase(key, '-')}`, value)\n        }\n      })\n    } else {\n      params = map.create()\n    }\n  }\n  return params\n}\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasParam = name => computeParams().has(name)\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* istanbul ignore next */\nexport const getParam = (name, defaultVal) => computeParams().get(name) || defaultVal\n// export const getArgs = name => computeParams() && args\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* istanbul ignore next */\nexport const getVariable = name => isNode ? conditions.undefinedToNull(process.env[name.toUpperCase()]) : conditions.undefinedToNull(storage.varStorage.getItem(name))\n\n/**\n * @param {string} name\n * @return {string|null}\n */\nexport const getConf = name => computeParams().get('--' + name) || getVariable(name)\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasConf = name => hasParam('--' + name) || getVariable(name) !== null\n\n/* istanbul ignore next */\nexport const production = hasConf('production')\n"]},"metadata":{},"sourceType":"module"}