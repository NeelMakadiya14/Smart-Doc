{"ast":null,"code":"import _classCallCheck from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n// @todo before next major: use Uint8Array instead as buffer object\nimport * as map from './map.js';\nimport * as buffer from './buffer.js';\nimport * as storage from './storage.js';\n/**\n * @typedef {Object} Channel\n * @property {Set<Function>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\n\nvar channels = new Map();\n\nvar LocalStoragePolyfill = /*#__PURE__*/function () {\n  /**\n   * @param {string} room\n   */\n  function LocalStoragePolyfill(room) {\n    var _this = this;\n\n    _classCallCheck(this, LocalStoragePolyfill);\n\n    this.room = room;\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n\n    this.onmessage = null;\n    addEventListener('storage', function (e) {\n      return e.key === room && _this.onmessage !== null && _this.onmessage({\n        data: buffer.fromBase64(e.newValue || '')\n      });\n    });\n  }\n  /**\n   * @param {ArrayBuffer} buf\n   */\n\n\n  _createClass(LocalStoragePolyfill, [{\n    key: \"postMessage\",\n    value: function postMessage(buf) {\n      storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)));\n    }\n  }]);\n\n  return LocalStoragePolyfill;\n}(); // Use BroadcastChannel or Polyfill\n\n\nvar BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel;\n/**\n * @param {string} room\n * @return {Channel}\n */\n\nvar getChannel = function getChannel(room) {\n  return map.setIfUndefined(channels, room, function () {\n    var subs = new Set();\n    var bc = new BC(room);\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n\n    bc.onmessage = function (e) {\n      return subs.forEach(function (sub) {\n        return sub(e.data);\n      });\n    };\n\n    return {\n      bc: bc,\n      subs: subs\n    };\n  });\n};\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\n\n\nexport var subscribe = function subscribe(room, f) {\n  return getChannel(room).subs.add(f);\n};\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\n\nexport var unsubscribe = function unsubscribe(room, f) {\n  return getChannel(room).subs.delete(f);\n};\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n */\n\nexport var publish = function publish(room, data) {\n  var c = getChannel(room);\n  c.bc.postMessage(data);\n  c.subs.forEach(function (sub) {\n    return sub(data);\n  });\n};","map":{"version":3,"sources":["/media/neel/DATA/WebD/Smart Doc/client/node_modules/lib0/broadcastchannel.js"],"names":["map","buffer","storage","channels","Map","LocalStoragePolyfill","room","onmessage","addEventListener","e","key","data","fromBase64","newValue","buf","varStorage","setItem","toBase64","createUint8ArrayFromArrayBuffer","BC","BroadcastChannel","getChannel","setIfUndefined","subs","Set","bc","forEach","sub","subscribe","f","add","unsubscribe","delete","publish","c","postMessage"],"mappings":"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","sourcesContent":["/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<Function>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    addEventListener('storage', e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n */\nexport const publish = (room, data) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data))\n}\n"]},"metadata":{},"sourceType":"module"}