{"ast":null,"code":"import _classCallCheck from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @module bindings/quill\n */\nimport { createMutex } from 'lib0/mutex.js';\nimport * as Y from 'yjs'; // eslint-disable-line\n\nimport { Awareness } from 'y-protocols/awareness.js'; // eslint-disable-line\n\n/**\n * Removes the pending '\\n's if it has no attributes.\n */\n\nexport var normQuillDelta = function normQuillDelta(delta) {\n  if (delta.length > 0) {\n    var d = delta[delta.length - 1];\n    var insert = d.insert;\n\n    if (d.attributes === undefined && insert !== undefined && insert.slice(-1) === '\\n') {\n      delta = delta.slice();\n      var ins = insert.slice(0, -1);\n\n      while (ins.slice(-1) === '\\n') {\n        ins = ins.slice(0, -1);\n      }\n\n      delta[delta.length - 1] = {\n        insert: ins\n      };\n\n      if (ins.length === 0) {\n        delta.pop();\n      }\n\n      return delta;\n    }\n  }\n\n  return delta;\n};\n/**\n * @param {any} quillCursors\n */\n\nvar updateCursor = function updateCursor(quillCursors, aw, clientId, doc, type) {\n  try {\n    if (aw && aw.cursor && clientId !== doc.clientID) {\n      var user = aw.user || {};\n      var color = user.color || '#ffa500';\n      var name = user.name || \"User: \".concat(clientId);\n      quillCursors.createCursor(clientId.toString(), name, color);\n      var anchor = Y.createAbsolutePositionFromRelativePosition(Y.createRelativePositionFromJSON(aw.cursor.anchor), doc);\n      var head = Y.createAbsolutePositionFromRelativePosition(Y.createRelativePositionFromJSON(aw.cursor.head), doc);\n\n      if (anchor && head && anchor.type === type) {\n        quillCursors.moveCursor(clientId.toString(), {\n          index: anchor.index,\n          length: head.index - anchor.index\n        });\n      }\n    } else {\n      quillCursors.removeCursor(clientId.toString());\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport var QuillBinding = /*#__PURE__*/function () {\n  /**\n   * @param {Y.Text} type\n   * @param {any} quill\n   * @param {Awareness} [awareness]\n   */\n  function QuillBinding(type, quill, awareness) {\n    var _this = this;\n\n    _classCallCheck(this, QuillBinding);\n\n    var mux = createMutex();\n    var doc =\n    /** @type {Y.Doc} */\n    type.doc;\n    this.mux = mux;\n    this.type = type;\n    this.doc = doc;\n    this.quill = quill;\n    var quillCursors = quill.getModule('cursors') || null;\n    this.quillCursors = quillCursors; // This object contains all attributes used in the quill instance\n\n    this._negatedUsedFormats = {};\n    this.awareness = awareness;\n\n    this._awarenessChange = function (_ref) {\n      var added = _ref.added,\n          removed = _ref.removed,\n          updated = _ref.updated;\n      var states =\n      /** @type {Awareness} */\n      awareness.getStates();\n      added.forEach(function (id) {\n        updateCursor(quillCursors, states.get(id), id, doc, type);\n      });\n      updated.forEach(function (id) {\n        updateCursor(quillCursors, states.get(id), id, doc, type);\n      });\n      removed.forEach(function (id) {\n        quillCursors.removeCursor(id.toString());\n      });\n    };\n\n    this._typeObserver = function (event) {\n      mux(function () {\n        var eventDelta = event.delta; // We always explicitly set attributes, otherwise concurrent edits may\n        // result in quill assuming that a text insertion shall inherit existing\n        // attributes.\n\n        var delta = [];\n\n        for (var i = 0; i < eventDelta.length; i++) {\n          var d = eventDelta[i];\n\n          if (d.insert !== undefined) {\n            delta.push(Object.assign({}, d, {\n              attributes: Object.assign({}, _this._negatedUsedFormats, d.attributes || {})\n            }));\n          } else {\n            delta.push(d);\n          }\n        }\n\n        quill.updateContents(delta, 'yjs');\n      });\n    };\n\n    type.observe(this._typeObserver);\n\n    this._quillObserver = function (eventType, delta) {\n      if (delta && delta.ops) {\n        // update content\n        var ops = delta.ops;\n        ops.forEach(function (op) {\n          if (op.attributes !== undefined) {\n            for (var key in op.attributes) {\n              if (_this._negatedUsedFormats[key] === undefined) {\n                _this._negatedUsedFormats[key] = false;\n              }\n            }\n          }\n        });\n        mux(function () {\n          type.applyDelta(ops);\n        });\n      } // always check selection\n\n\n      if (awareness && quillCursors) {\n        var sel = quill.getSelection();\n        var aw =\n        /** @type {any} */\n        awareness.getLocalState();\n\n        if (sel === null) {\n          if (awareness.getLocalState() !== null) {\n            awareness.setLocalStateField('cursor',\n            /** @type {any} */\n            null);\n          }\n        } else {\n          var anchor = Y.createRelativePositionFromTypeIndex(type, sel.index);\n          var head = Y.createRelativePositionFromTypeIndex(type, sel.index + sel.length);\n\n          if (!aw || !aw.cursor || !Y.compareRelativePositions(anchor, aw.cursor.anchor) || !Y.compareRelativePositions(head, aw.cursor.head)) {\n            awareness.setLocalStateField('cursor', {\n              anchor: anchor,\n              head: head\n            });\n          }\n        } // update all remote cursor locations\n\n\n        awareness.getStates().forEach(function (aw, clientId) {\n          updateCursor(quillCursors, aw, clientId, doc, type);\n        });\n      }\n    };\n\n    quill.on('editor-change', this._quillObserver);\n    mux(function () {\n      // This indirectly initializes _negatedUsedFormats.\n      // Make sure that this call this after the _quillObserver is set.\n      quill.setContents(type.toDelta());\n    }); // init remote cursors\n\n    if (quillCursors !== null && awareness) {\n      awareness.getStates().forEach(function (aw, clientId) {\n        updateCursor(quillCursors, aw, clientId, doc, type);\n      });\n      awareness.on('change', this._awarenessChange);\n    }\n  }\n\n  _createClass(QuillBinding, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.type.unobserve(this._typeObserver);\n      this.quill.off(this._quillObserver);\n\n      if (this.awareness) {\n        this.awareness.off('change', this._awarenessChange);\n      }\n    }\n  }]);\n\n  return QuillBinding;\n}();","map":{"version":3,"sources":["/media/neel/DATA/WebD/Smart Doc/client/node_modules/y-quill/src/y-quill.js"],"names":["createMutex","Y","Awareness","normQuillDelta","delta","length","d","insert","attributes","undefined","slice","ins","pop","updateCursor","quillCursors","aw","clientId","doc","type","cursor","clientID","user","color","name","createCursor","toString","anchor","createAbsolutePositionFromRelativePosition","createRelativePositionFromJSON","head","moveCursor","index","removeCursor","err","console","error","QuillBinding","quill","awareness","mux","getModule","_negatedUsedFormats","_awarenessChange","added","removed","updated","states","getStates","forEach","id","get","_typeObserver","event","eventDelta","i","push","Object","assign","updateContents","observe","_quillObserver","eventType","ops","op","key","applyDelta","sel","getSelection","getLocalState","setLocalStateField","createRelativePositionFromTypeIndex","compareRelativePositions","on","setContents","toDelta","unobserve","off"],"mappings":"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","sourcesContent":["/**\n * @module bindings/quill\n */\n\nimport { createMutex } from 'lib0/mutex.js'\nimport * as Y from 'yjs' // eslint-disable-line\nimport { Awareness } from 'y-protocols/awareness.js' // eslint-disable-line\n\n/**\n * Removes the pending '\\n's if it has no attributes.\n */\nexport const normQuillDelta = delta => {\n  if (delta.length > 0) {\n    const d = delta[delta.length - 1]\n    const insert = d.insert\n    if (d.attributes === undefined && insert !== undefined && insert.slice(-1) === '\\n') {\n      delta = delta.slice()\n      let ins = insert.slice(0, -1)\n      while (ins.slice(-1) === '\\n') {\n        ins = ins.slice(0, -1)\n      }\n      delta[delta.length - 1] = { insert: ins }\n      if (ins.length === 0) {\n        delta.pop()\n      }\n      return delta\n    }\n  }\n  return delta\n}\n\n/**\n * @param {any} quillCursors\n */\nconst updateCursor = (quillCursors, aw, clientId, doc, type) => {\n  try {\n    if (aw && aw.cursor && clientId !== doc.clientID) {\n      const user = aw.user || {}\n      const color = user.color || '#ffa500'\n      const name = user.name || `User: ${clientId}`\n      quillCursors.createCursor(clientId.toString(), name, color)\n      const anchor = Y.createAbsolutePositionFromRelativePosition(Y.createRelativePositionFromJSON(aw.cursor.anchor), doc)\n      const head = Y.createAbsolutePositionFromRelativePosition(Y.createRelativePositionFromJSON(aw.cursor.head), doc)\n      if (anchor && head && anchor.type === type) {\n        quillCursors.moveCursor(clientId.toString(), { index: anchor.index, length: head.index - anchor.index })\n      }\n    } else {\n      quillCursors.removeCursor(clientId.toString())\n    }\n  } catch (err) {\n    console.error(err)\n  }\n}\n\nexport class QuillBinding {\n  /**\n   * @param {Y.Text} type\n   * @param {any} quill\n   * @param {Awareness} [awareness]\n   */\n  constructor (type, quill, awareness) {\n    const mux = createMutex()\n    const doc = /** @type {Y.Doc} */ (type.doc)\n    this.mux = mux\n    this.type = type\n    this.doc = doc\n    this.quill = quill\n    const quillCursors = quill.getModule('cursors') || null\n    this.quillCursors = quillCursors\n    // This object contains all attributes used in the quill instance\n    this._negatedUsedFormats = {}\n    this.awareness = awareness\n    this._awarenessChange = ({ added, removed, updated }) => {\n      const states = /** @type {Awareness} */ (awareness).getStates()\n      added.forEach(id => {\n        updateCursor(quillCursors, states.get(id), id, doc, type)\n      })\n      updated.forEach(id => {\n        updateCursor(quillCursors, states.get(id), id, doc, type)\n      })\n      removed.forEach(id => {\n        quillCursors.removeCursor(id.toString())\n      })\n    }\n    this._typeObserver = event => {\n      mux(() => {\n        const eventDelta = event.delta\n        // We always explicitly set attributes, otherwise concurrent edits may\n        // result in quill assuming that a text insertion shall inherit existing\n        // attributes.\n        const delta = []\n        for (let i = 0; i < eventDelta.length; i++) {\n          const d = eventDelta[i]\n          if (d.insert !== undefined) {\n            delta.push(Object.assign({}, d, { attributes: Object.assign({}, this._negatedUsedFormats, d.attributes || {}) }))\n          } else {\n            delta.push(d)\n          }\n        }\n        quill.updateContents(delta, 'yjs')\n      })\n    }\n    type.observe(this._typeObserver)\n    this._quillObserver = (eventType, delta) => {\n      if (delta && delta.ops) {\n        // update content\n        const ops = delta.ops\n        ops.forEach(op => {\n          if (op.attributes !== undefined) {\n            for (let key in op.attributes) {\n              if (this._negatedUsedFormats[key] === undefined) {\n                this._negatedUsedFormats[key] = false\n              }\n            }\n          }\n        })\n        mux(() => {\n          type.applyDelta(ops)\n        })\n      }\n      // always check selection\n      if (awareness && quillCursors) {\n        const sel = quill.getSelection()\n        const aw = /** @type {any} */ (awareness.getLocalState())\n        if (sel === null) {\n          if (awareness.getLocalState() !== null) {\n            awareness.setLocalStateField('cursor', /** @type {any} */ (null))\n          }\n        } else {\n          const anchor = Y.createRelativePositionFromTypeIndex(type, sel.index)\n          const head = Y.createRelativePositionFromTypeIndex(type, sel.index + sel.length)\n          if (!aw || !aw.cursor || !Y.compareRelativePositions(anchor, aw.cursor.anchor) || !Y.compareRelativePositions(head, aw.cursor.head)) {\n            awareness.setLocalStateField('cursor', {\n              anchor,\n              head\n            })\n          }\n        }\n        // update all remote cursor locations\n        awareness.getStates().forEach((aw, clientId) => {\n          updateCursor(quillCursors, aw, clientId, doc, type)\n        })\n      }\n    }\n    quill.on('editor-change', this._quillObserver)\n    mux(() => {\n      // This indirectly initializes _negatedUsedFormats.\n      // Make sure that this call this after the _quillObserver is set.\n      quill.setContents(type.toDelta())\n    })\n    // init remote cursors\n    if (quillCursors !== null && awareness) {\n      awareness.getStates().forEach((aw, clientId) => {\n        updateCursor(quillCursors, aw, clientId, doc, type)\n      })\n      awareness.on('change', this._awarenessChange)\n    }\n  }\n  destroy () {\n    this.type.unobserve(this._typeObserver)\n    this.quill.off(this._quillObserver)\n    if (this.awareness) {\n      this.awareness.off('change', this._awarenessChange)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}