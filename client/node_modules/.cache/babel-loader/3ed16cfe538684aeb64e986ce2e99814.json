{"ast":null,"code":"import _classCallCheck from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* global localStorage */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nvar VarStoragePolyfill = /*#__PURE__*/function () {\n  function VarStoragePolyfill() {\n    _classCallCheck(this, VarStoragePolyfill);\n\n    this.map = new Map();\n  }\n  /**\n   * @param {string} key\n   * @param {any} value\n   */\n\n\n  _createClass(VarStoragePolyfill, [{\n    key: \"setItem\",\n    value: function setItem(key, value) {\n      this.map.set(key, value);\n    }\n    /**\n     * @param {string} key\n     */\n\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.map.get(key);\n    }\n  }]);\n\n  return VarStoragePolyfill;\n}();\n/* istanbul ignore next */\n\n/**\n * @type {any}\n */\n\n\nvar _localStorage = new VarStoragePolyfill();\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage;\n  }\n} catch (e) {}\n/* istanbul ignore next */\n\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\n\n\nexport var varStorage = _localStorage;","map":{"version":3,"sources":["/media/neel/DATA/WebD/Smart Doc/client/node_modules/lib0/storage.js"],"names":["VarStoragePolyfill","map","Map","key","value","set","get","_localStorage","localStorage","e","varStorage"],"mappings":";;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;IACMA,kB;AACJ,gCAAe;AAAA;;AACb,SAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;AACD;AAED;AACF;AACA;AACA;;;;;WACE,iBAASC,GAAT,EAAcC,KAAd,EAAqB;AACnB,WAAKH,GAAL,CAASI,GAAT,CAAaF,GAAb,EAAkBC,KAAlB;AACD;AAED;AACF;AACA;;;;WACE,iBAASD,GAAT,EAAc;AACZ,aAAO,KAAKF,GAAL,CAASK,GAAT,CAAaH,GAAb,CAAP;AACD;;;;;AAGH;;AACA;AACA;AACA;;;AACA,IAAII,aAAa,GAAG,IAAIP,kBAAJ,EAApB;;AAEA,IAAI;AACF;;AACA;AACA,MAAI,OAAOQ,YAAP,KAAwB,WAA5B,EAAyC;AACvCD,IAAAA,aAAa,GAAGC,YAAhB;AACD;AACF,CAND,CAME,OAAOC,CAAP,EAAU,CAAG;AAEf;;AACA;AACA;AACA;;;AACA,OAAO,IAAMC,UAAU,GAAGH,aAAnB","sourcesContent":["/* global localStorage */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} value\n   */\n  setItem (key, value) {\n    this.map.set(key, value)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage\n  }\n} catch (e) { }\n\n/* istanbul ignore next */\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\nexport const varStorage = _localStorage\n"]},"metadata":{},"sourceType":"module"}