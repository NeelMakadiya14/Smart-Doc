{"ast":null,"code":"import _toConsumableArray from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _assertThisInitialized from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createForOfIteratorHelper from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _createClass from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/media/neel/DATA/WebD/Smart Doc/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(lazyStructReaderGenerator);\n\nimport { Observable } from 'lib0/observable.js';\nimport { appendTo, from, last } from 'lib0/array.js';\nimport { floor, max, min, abs } from 'lib0/math.js';\nimport { setIfUndefined, create, any, copy } from 'lib0/map.js';\nimport { writeVarUint, createEncoder, toUint8Array as _toUint8Array, writeUint8, writeVarString, writeAny as _writeAny, writeVarUint8Array, IntDiffOptRleEncoder, UintOptRleEncoder, RleEncoder, StringEncoder, writeUint8Array, writeVarInt, writeBinaryEncoder } from 'lib0/encoding.js';\nimport { readVarUint, readUint8, readVarString, readAny as _readAny, readVarUint8Array, IntDiffOptRleDecoder, UintOptRleDecoder, RleDecoder, StringDecoder, createDecoder, hasContent, readVarInt } from 'lib0/decoding.js';\nimport { uuidv4, uint32 } from 'lib0/random.js';\nimport { copyUint8Array } from 'lib0/buffer.js';\nimport { unexpectedCase, methodUnimplemented, create as create$2 } from 'lib0/error.js';\nimport { BITS5, BIT8, BIT7, BIT6, BIT2, BIT4, BIT1, BIT3 } from 'lib0/binary.js';\nimport { callAll } from 'lib0/function.js';\nimport { create as create$1 } from 'lib0/set.js';\nimport { print, ORANGE, BOLD, UNBOLD, RED } from 'lib0/logging.js';\nimport { getUnixTime } from 'lib0/time.js';\nimport { iteratorFilter, iteratorMap } from 'lib0/iterator.js';\nimport { equalFlat } from 'lib0/object.js';\n/**\n * This is an abstract interface that all Connectors should implement to keep them interchangeable.\n *\n * @note This interface is experimental and it is not advised to actually inherit this class.\n *       It just serves as typing information.\n *\n * @extends {Observable<any>}\n */\n\nvar AbstractConnector = /*#__PURE__*/function (_Observable) {\n  _inherits(AbstractConnector, _Observable);\n\n  var _super = _createSuper(AbstractConnector);\n\n  /**\n   * @param {Doc} ydoc\n   * @param {any} awareness\n   */\n  function AbstractConnector(ydoc, awareness) {\n    var _this;\n\n    _classCallCheck(this, AbstractConnector);\n\n    _this = _super.call(this);\n    _this.doc = ydoc;\n    _this.awareness = awareness;\n    return _this;\n  }\n\n  return AbstractConnector;\n}(Observable);\n\nvar DeleteItem =\n/**\n * @param {number} clock\n * @param {number} len\n */\nfunction DeleteItem(clock, len) {\n  _classCallCheck(this, DeleteItem);\n\n  /**\n   * @type {number}\n   */\n  this.clock = clock;\n  /**\n   * @type {number}\n   */\n\n  this.len = len;\n};\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\n\n\nvar DeleteSet = function DeleteSet() {\n  _classCallCheck(this, DeleteSet);\n\n  /**\n   * @type {Map<number,Array<DeleteItem>>}\n   */\n  this.clients = new Map();\n};\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\n\n\nvar iterateDeletedStructs = function iterateDeletedStructs(transaction, ds, f) {\n  return ds.clients.forEach(function (deletes, clientid) {\n    var structs =\n    /** @type {Array<GC|Item>} */\n    transaction.doc.store.clients.get(clientid);\n\n    for (var i = 0; i < deletes.length; i++) {\n      var del = deletes[i];\n      iterateStructs(transaction, structs, del.clock, del.len, f);\n    }\n  });\n};\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\n\n\nvar findIndexDS = function findIndexDS(dis, clock) {\n  var left = 0;\n  var right = dis.length - 1;\n\n  while (left <= right) {\n    var midindex = floor((left + right) / 2);\n    var mid = dis[midindex];\n    var midclock = mid.clock;\n\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex;\n      }\n\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n  }\n\n  return null;\n};\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\n\n\nvar isDeleted = function isDeleted(ds, id) {\n  var dis = ds.clients.get(id.client);\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null;\n};\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\n\n\nvar sortAndMergeDeleteSet = function sortAndMergeDeleteSet(ds) {\n  ds.clients.forEach(function (dels) {\n    dels.sort(function (a, b) {\n      return a.clock - b.clock;\n    }); // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n\n    var i, j;\n\n    for (i = 1, j = 1; i < dels.length; i++) {\n      var left = dels[j - 1];\n      var right = dels[i];\n\n      if (left.clock + left.len >= right.clock) {\n        left.len = max(left.len, right.clock + right.len - left.clock);\n      } else {\n        if (j < i) {\n          dels[j] = right;\n        }\n\n        j++;\n      }\n    }\n\n    dels.length = j;\n  });\n};\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */\n\n\nvar mergeDeleteSets = function mergeDeleteSets(dss) {\n  var merged = new DeleteSet();\n\n  var _loop = function _loop(dssI) {\n    dss[dssI].clients.forEach(function (delsLeft, client) {\n      if (!merged.clients.has(client)) {\n        // Write all missing keys from current ds and all following.\n        // If merged already contains `client` current ds has already been added.\n\n        /**\n         * @type {Array<DeleteItem>}\n         */\n        var dels = delsLeft.slice();\n\n        for (var i = dssI + 1; i < dss.length; i++) {\n          appendTo(dels, dss[i].clients.get(client) || []);\n        }\n\n        merged.clients.set(client, dels);\n      }\n    });\n  };\n\n  for (var dssI = 0; dssI < dss.length; dssI++) {\n    _loop(dssI);\n  }\n\n  sortAndMergeDeleteSet(merged);\n  return merged;\n};\n/**\n * @param {DeleteSet} ds\n * @param {number} client\n * @param {number} clock\n * @param {number} length\n *\n * @private\n * @function\n */\n\n\nvar addToDeleteSet = function addToDeleteSet(ds, client, clock, length) {\n  setIfUndefined(ds.clients, client, function () {\n    return [];\n  }).push(new DeleteItem(clock, length));\n};\n\nvar createDeleteSet = function createDeleteSet() {\n  return new DeleteSet();\n};\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */\n\n\nvar createDeleteSetFromStructStore = function createDeleteSetFromStructStore(ss) {\n  var ds = createDeleteSet();\n  ss.clients.forEach(function (structs, client) {\n    /**\n     * @type {Array<DeleteItem>}\n     */\n    var dsitems = [];\n\n    for (var i = 0; i < structs.length; i++) {\n      var struct = structs[i];\n\n      if (struct.deleted) {\n        var clock = struct.id.clock;\n        var len = struct.length;\n\n        if (i + 1 < structs.length) {\n          for (var next = structs[i + 1]; i + 1 < structs.length && next.id.clock === clock + len && next.deleted; next = structs[++i + 1]) {\n            len += next.length;\n          }\n        }\n\n        dsitems.push(new DeleteItem(clock, len));\n      }\n    }\n\n    if (dsitems.length > 0) {\n      ds.clients.set(client, dsitems);\n    }\n  });\n  return ds;\n};\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\n\n\nvar writeDeleteSet = function writeDeleteSet(encoder, ds) {\n  writeVarUint(encoder.restEncoder, ds.clients.size);\n  ds.clients.forEach(function (dsitems, client) {\n    encoder.resetDsCurVal();\n    writeVarUint(encoder.restEncoder, client);\n    var len = dsitems.length;\n    writeVarUint(encoder.restEncoder, len);\n\n    for (var i = 0; i < len; i++) {\n      var item = dsitems[i];\n      encoder.writeDsClock(item.clock);\n      encoder.writeDsLen(item.len);\n    }\n  });\n};\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */\n\n\nvar readDeleteSet = function readDeleteSet(decoder) {\n  var ds = new DeleteSet();\n  var numClients = readVarUint(decoder.restDecoder);\n\n  for (var i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal();\n    var client = readVarUint(decoder.restDecoder);\n    var numberOfDeletes = readVarUint(decoder.restDecoder);\n\n    if (numberOfDeletes > 0) {\n      var dsField = setIfUndefined(ds.clients, client, function () {\n        return [];\n      });\n\n      for (var _i = 0; _i < numberOfDeletes; _i++) {\n        dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()));\n      }\n    }\n  }\n\n  return ds;\n};\n/**\n * @todo YDecoder also contains references to String and other Decoders. Would make sense to exchange YDecoder.toUint8Array for YDecoder.DsToUint8Array()..\n */\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @return {Uint8Array|null} Returns a v2 update containing all deletes that couldn't be applied yet; or null if all deletes were applied successfully.\n *\n * @private\n * @function\n */\n\n\nvar readAndApplyDeleteSet = function readAndApplyDeleteSet(decoder, transaction, store) {\n  var unappliedDS = new DeleteSet();\n  var numClients = readVarUint(decoder.restDecoder);\n\n  for (var i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal();\n    var client = readVarUint(decoder.restDecoder);\n    var numberOfDeletes = readVarUint(decoder.restDecoder);\n    var structs = store.clients.get(client) || [];\n    var state = getState(store, client);\n\n    for (var _i2 = 0; _i2 < numberOfDeletes; _i2++) {\n      var clock = decoder.readDsClock();\n      var clockEnd = clock + decoder.readDsLen();\n\n      if (clock < state) {\n        if (state < clockEnd) {\n          addToDeleteSet(unappliedDS, client, state, clockEnd - state);\n        }\n\n        var index = findIndexSS(structs, clock);\n        /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */\n        // @ts-ignore\n\n        var struct = structs[index]; // split the first item if necessary\n\n        if (!struct.deleted && struct.id.clock < clock) {\n          structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n          index++; // increase we now want to use the next struct\n        }\n\n        while (index < structs.length) {\n          // @ts-ignore\n          struct = structs[index++];\n\n          if (struct.id.clock < clockEnd) {\n            if (!struct.deleted) {\n              if (clockEnd < struct.id.clock + struct.length) {\n                structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock));\n              }\n\n              struct.delete(transaction);\n            }\n          } else {\n            break;\n          }\n        }\n      } else {\n        addToDeleteSet(unappliedDS, client, clock, clockEnd - clock);\n      }\n    }\n  }\n\n  if (unappliedDS.clients.size > 0) {\n    var ds = new UpdateEncoderV2();\n    writeVarUint(ds.restEncoder, 0); // encode 0 structs\n\n    writeDeleteSet(ds, unappliedDS);\n    return ds.toUint8Array();\n  }\n\n  return null;\n};\n/**\n * @module Y\n */\n\n\nvar generateNewClientId = uint32;\n/**\n * @typedef {Object} DocOpts\n * @property {boolean} [DocOpts.gc=true] Disable garbage collection (default: gc=true)\n * @property {function(Item):boolean} [DocOpts.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n * @property {string} [DocOpts.guid] Define a globally unique identifier for this document\n * @property {any} [DocOpts.meta] Any kind of meta information you want to associate with this document. If this is a subdocument, remote peers will store the meta information as well.\n * @property {boolean} [DocOpts.autoLoad] If a subdocument, automatically load document. If this is a subdocument, remote peers will load the document as well automatically.\n */\n\n/**\n * A Yjs instance handles the state of shared data.\n * @extends Observable<string>\n */\n\nvar Doc = /*#__PURE__*/function (_Observable2) {\n  _inherits(Doc, _Observable2);\n\n  var _super2 = _createSuper(Doc);\n\n  /**\n   * @param {DocOpts} [opts] configuration\n   */\n  function Doc() {\n    var _this2;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$guid = _ref.guid,\n        guid = _ref$guid === void 0 ? uuidv4() : _ref$guid,\n        _ref$gc = _ref.gc,\n        gc = _ref$gc === void 0 ? true : _ref$gc,\n        _ref$gcFilter = _ref.gcFilter,\n        gcFilter = _ref$gcFilter === void 0 ? function () {\n      return true;\n    } : _ref$gcFilter,\n        _ref$meta = _ref.meta,\n        meta = _ref$meta === void 0 ? null : _ref$meta,\n        _ref$autoLoad = _ref.autoLoad,\n        autoLoad = _ref$autoLoad === void 0 ? false : _ref$autoLoad;\n\n    _classCallCheck(this, Doc);\n\n    _this2 = _super2.call(this);\n    _this2.gc = gc;\n    _this2.gcFilter = gcFilter;\n    _this2.clientID = generateNewClientId();\n    _this2.guid = guid;\n    /**\n     * @type {Map<string, AbstractType<YEvent>>}\n     */\n\n    _this2.share = new Map();\n    _this2.store = new StructStore();\n    /**\n     * @type {Transaction | null}\n     */\n\n    _this2._transaction = null;\n    /**\n     * @type {Array<Transaction>}\n     */\n\n    _this2._transactionCleanups = [];\n    /**\n     * @type {Set<Doc>}\n     */\n\n    _this2.subdocs = new Set();\n    /**\n     * If this document is a subdocument - a document integrated into another document - then _item is defined.\n     * @type {Item?}\n     */\n\n    _this2._item = null;\n    _this2.shouldLoad = autoLoad;\n    _this2.autoLoad = autoLoad;\n    _this2.meta = meta;\n    return _this2;\n  }\n  /**\n   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).\n   *\n   * `load()` might be used in the future to request any provider to load the most current data.\n   *\n   * It is safe to call `load()` multiple times.\n   */\n\n\n  _createClass(Doc, [{\n    key: \"load\",\n    value: function load() {\n      var _this3 = this;\n\n      var item = this._item;\n\n      if (item !== null && !this.shouldLoad) {\n        _transact(\n        /** @type {any} */\n        item.parent.doc, function (transaction) {\n          transaction.subdocsLoaded.add(_this3);\n        }, null, true);\n      }\n\n      this.shouldLoad = true;\n    }\n  }, {\n    key: \"getSubdocs\",\n    value: function getSubdocs() {\n      return this.subdocs;\n    }\n  }, {\n    key: \"getSubdocGuids\",\n    value: function getSubdocGuids() {\n      return new Set(Array.from(this.subdocs).map(function (doc) {\n        return doc.guid;\n      }));\n    }\n    /**\n     * Changes that happen inside of a transaction are bundled. This means that\n     * the observer fires _after_ the transaction is finished and that all changes\n     * that happened inside of the transaction are sent as one message to the\n     * other peers.\n     *\n     * @param {function(Transaction):void} f The function that should be executed as a transaction\n     * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n     *\n     * @public\n     */\n\n  }, {\n    key: \"transact\",\n    value: function transact(f) {\n      var origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _transact(this, f, origin);\n    }\n    /**\n     * Define a shared data type.\n     *\n     * Multiple calls of `y.get(name, TypeConstructor)` yield the same result\n     * and do not overwrite each other. I.e.\n     * `y.define(name, Y.Array) === y.define(name, Y.Array)`\n     *\n     * After this method is called, the type is also available on `y.share.get(name)`.\n     *\n     * *Best Practices:*\n     * Define all types right after the Yjs instance is created and store them in a separate object.\n     * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n     *\n     * @example\n     *   const y = new Y(..)\n     *   const appState = {\n     *     document: y.getText('document')\n     *     comments: y.getArray('comments')\n     *   }\n     *\n     * @param {string} name\n     * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n     * @return {AbstractType<any>} The created type. Constructed with TypeConstructor\n     *\n     * @public\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var _this4 = this;\n\n      var TypeConstructor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AbstractType;\n      var type = setIfUndefined(this.share, name, function () {\n        // @ts-ignore\n        var t = new TypeConstructor();\n\n        t._integrate(_this4, null);\n\n        return t;\n      });\n      var Constr = type.constructor;\n\n      if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n        if (Constr === AbstractType) {\n          // @ts-ignore\n          var t = new TypeConstructor();\n          t._map = type._map;\n\n          type._map.forEach(\n          /** @param {Item?} n */\n          function (n) {\n            for (; n !== null; n = n.left) {\n              // @ts-ignore\n              n.parent = t;\n            }\n          });\n\n          t._start = type._start;\n\n          for (var n = t._start; n !== null; n = n.right) {\n            n.parent = t;\n          }\n\n          t._length = type._length;\n          this.share.set(name, t);\n\n          t._integrate(this, null);\n\n          return t;\n        } else {\n          throw new Error(\"Type with the name \".concat(name, \" has already been defined with a different constructor\"));\n        }\n      }\n\n      return type;\n    }\n    /**\n     * @template T\n     * @param {string} [name]\n     * @return {YArray<T>}\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getArray\",\n    value: function getArray() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      // @ts-ignore\n      return this.get(name, YArray);\n    }\n    /**\n     * @param {string} [name]\n     * @return {YText}\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getText\",\n    value: function getText() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      // @ts-ignore\n      return this.get(name, YText);\n    }\n    /**\n     * @param {string} [name]\n     * @return {YMap<any>}\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      // @ts-ignore\n      return this.get(name, YMap);\n    }\n    /**\n     * @param {string} [name]\n     * @return {YXmlFragment}\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getXmlFragment\",\n    value: function getXmlFragment() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      // @ts-ignore\n      return this.get(name, YXmlFragment);\n    }\n    /**\n     * Converts the entire document into a js object, recursively traversing each yjs type\n     * Doesn't log types that have not been defined (using ydoc.getType(..)).\n     *\n     * @deprecated Do not use this method and rather call toJSON directly on the shared types.\n     *\n     * @return {Object<string, any>}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      /**\n       * @type {Object<string, any>}\n       */\n      var doc = {};\n      this.share.forEach(function (value, key) {\n        doc[key] = value.toJSON();\n      });\n      return doc;\n    }\n    /**\n     * Emit `destroy` event and unregister all event handlers.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this5 = this;\n\n      from(this.subdocs).forEach(function (subdoc) {\n        return subdoc.destroy();\n      });\n      var item = this._item;\n\n      if (item !== null) {\n        this._item = null;\n        var content =\n        /** @type {ContentDoc} */\n        item.content;\n\n        if (item.deleted) {\n          // @ts-ignore\n          content.doc = null;\n        } else {\n          content.doc = new Doc(_objectSpread({\n            guid: this.guid\n          }, content.opts));\n          content.doc._item = item;\n        }\n\n        _transact(\n        /** @type {any} */\n        item.parent.doc, function (transaction) {\n          if (!item.deleted) {\n            transaction.subdocsAdded.add(content.doc);\n          }\n\n          transaction.subdocsRemoved.add(_this5);\n        }, null, true);\n      }\n\n      this.emit('destroyed', [true]);\n      this.emit('destroy', [this]);\n\n      _get(_getPrototypeOf(Doc.prototype), \"destroy\", this).call(this);\n    }\n    /**\n     * @param {string} eventName\n     * @param {function(...any):any} f\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(eventName, f) {\n      _get(_getPrototypeOf(Doc.prototype), \"on\", this).call(this, eventName, f);\n    }\n    /**\n     * @param {string} eventName\n     * @param {function} f\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(eventName, f) {\n      _get(_getPrototypeOf(Doc.prototype), \"off\", this).call(this, eventName, f);\n    }\n  }]);\n\n  return Doc;\n}(Observable);\n\nvar DSDecoderV1 = /*#__PURE__*/function () {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  function DSDecoderV1(decoder) {\n    _classCallCheck(this, DSDecoderV1);\n\n    this.restDecoder = decoder;\n  }\n\n  _createClass(DSDecoderV1, [{\n    key: \"resetDsCurVal\",\n    value: function resetDsCurVal() {// nop\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"readDsClock\",\n    value: function readDsClock() {\n      return readVarUint(this.restDecoder);\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"readDsLen\",\n    value: function readDsLen() {\n      return readVarUint(this.restDecoder);\n    }\n  }]);\n\n  return DSDecoderV1;\n}();\n\nvar UpdateDecoderV1 = /*#__PURE__*/function (_DSDecoderV) {\n  _inherits(UpdateDecoderV1, _DSDecoderV);\n\n  var _super3 = _createSuper(UpdateDecoderV1);\n\n  function UpdateDecoderV1() {\n    _classCallCheck(this, UpdateDecoderV1);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(UpdateDecoderV1, [{\n    key: \"readLeftID\",\n    value:\n    /**\n     * @return {ID}\n     */\n    function readLeftID() {\n      return createID(readVarUint(this.restDecoder), readVarUint(this.restDecoder));\n    }\n    /**\n     * @return {ID}\n     */\n\n  }, {\n    key: \"readRightID\",\n    value: function readRightID() {\n      return createID(readVarUint(this.restDecoder), readVarUint(this.restDecoder));\n    }\n    /**\n     * Read the next client id.\n     * Use this in favor of readID whenever possible to reduce the number of objects created.\n     */\n\n  }, {\n    key: \"readClient\",\n    value: function readClient() {\n      return readVarUint(this.restDecoder);\n    }\n    /**\n     * @return {number} info An unsigned 8-bit integer\n     */\n\n  }, {\n    key: \"readInfo\",\n    value: function readInfo() {\n      return readUint8(this.restDecoder);\n    }\n    /**\n     * @return {string}\n     */\n\n  }, {\n    key: \"readString\",\n    value: function readString() {\n      return readVarString(this.restDecoder);\n    }\n    /**\n     * @return {boolean} isKey\n     */\n\n  }, {\n    key: \"readParentInfo\",\n    value: function readParentInfo() {\n      return readVarUint(this.restDecoder) === 1;\n    }\n    /**\n     * @return {number} info An unsigned 8-bit integer\n     */\n\n  }, {\n    key: \"readTypeRef\",\n    value: function readTypeRef() {\n      return readVarUint(this.restDecoder);\n    }\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @return {number} len\n     */\n\n  }, {\n    key: \"readLen\",\n    value: function readLen() {\n      return readVarUint(this.restDecoder);\n    }\n    /**\n     * @return {any}\n     */\n\n  }, {\n    key: \"readAny\",\n    value: function readAny() {\n      return _readAny(this.restDecoder);\n    }\n    /**\n     * @return {Uint8Array}\n     */\n\n  }, {\n    key: \"readBuf\",\n    value: function readBuf() {\n      return copyUint8Array(readVarUint8Array(this.restDecoder));\n    }\n    /**\n     * Legacy implementation uses JSON parse. We use any-decoding in v2.\n     *\n     * @return {any}\n     */\n\n  }, {\n    key: \"readJSON\",\n    value: function readJSON() {\n      return JSON.parse(readVarString(this.restDecoder));\n    }\n    /**\n     * @return {string}\n     */\n\n  }, {\n    key: \"readKey\",\n    value: function readKey() {\n      return readVarString(this.restDecoder);\n    }\n  }]);\n\n  return UpdateDecoderV1;\n}(DSDecoderV1);\n\nvar DSDecoderV2 = /*#__PURE__*/function () {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  function DSDecoderV2(decoder) {\n    _classCallCheck(this, DSDecoderV2);\n\n    /**\n     * @private\n     */\n    this.dsCurrVal = 0;\n    this.restDecoder = decoder;\n  }\n\n  _createClass(DSDecoderV2, [{\n    key: \"resetDsCurVal\",\n    value: function resetDsCurVal() {\n      this.dsCurrVal = 0;\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"readDsClock\",\n    value: function readDsClock() {\n      this.dsCurrVal += readVarUint(this.restDecoder);\n      return this.dsCurrVal;\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"readDsLen\",\n    value: function readDsLen() {\n      var diff = readVarUint(this.restDecoder) + 1;\n      this.dsCurrVal += diff;\n      return diff;\n    }\n  }]);\n\n  return DSDecoderV2;\n}();\n\nvar UpdateDecoderV2 = /*#__PURE__*/function (_DSDecoderV2) {\n  _inherits(UpdateDecoderV2, _DSDecoderV2);\n\n  var _super4 = _createSuper(UpdateDecoderV2);\n\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  function UpdateDecoderV2(decoder) {\n    var _this6;\n\n    _classCallCheck(this, UpdateDecoderV2);\n\n    _this6 = _super4.call(this, decoder);\n    /**\n     * List of cached keys. If the keys[id] does not exist, we read a new key\n     * from stringEncoder and push it to keys.\n     *\n     * @type {Array<string>}\n     */\n\n    _this6.keys = [];\n    readVarUint(decoder); // read feature flag - currently unused\n\n    _this6.keyClockDecoder = new IntDiffOptRleDecoder(readVarUint8Array(decoder));\n    _this6.clientDecoder = new UintOptRleDecoder(readVarUint8Array(decoder));\n    _this6.leftClockDecoder = new IntDiffOptRleDecoder(readVarUint8Array(decoder));\n    _this6.rightClockDecoder = new IntDiffOptRleDecoder(readVarUint8Array(decoder));\n    _this6.infoDecoder = new RleDecoder(readVarUint8Array(decoder), readUint8);\n    _this6.stringDecoder = new StringDecoder(readVarUint8Array(decoder));\n    _this6.parentInfoDecoder = new RleDecoder(readVarUint8Array(decoder), readUint8);\n    _this6.typeRefDecoder = new UintOptRleDecoder(readVarUint8Array(decoder));\n    _this6.lenDecoder = new UintOptRleDecoder(readVarUint8Array(decoder));\n    return _this6;\n  }\n  /**\n   * @return {ID}\n   */\n\n\n  _createClass(UpdateDecoderV2, [{\n    key: \"readLeftID\",\n    value: function readLeftID() {\n      return new ID(this.clientDecoder.read(), this.leftClockDecoder.read());\n    }\n    /**\n     * @return {ID}\n     */\n\n  }, {\n    key: \"readRightID\",\n    value: function readRightID() {\n      return new ID(this.clientDecoder.read(), this.rightClockDecoder.read());\n    }\n    /**\n     * Read the next client id.\n     * Use this in favor of readID whenever possible to reduce the number of objects created.\n     */\n\n  }, {\n    key: \"readClient\",\n    value: function readClient() {\n      return this.clientDecoder.read();\n    }\n    /**\n     * @return {number} info An unsigned 8-bit integer\n     */\n\n  }, {\n    key: \"readInfo\",\n    value: function readInfo() {\n      return (\n        /** @type {number} */\n        this.infoDecoder.read()\n      );\n    }\n    /**\n     * @return {string}\n     */\n\n  }, {\n    key: \"readString\",\n    value: function readString() {\n      return this.stringDecoder.read();\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"readParentInfo\",\n    value: function readParentInfo() {\n      return this.parentInfoDecoder.read() === 1;\n    }\n    /**\n     * @return {number} An unsigned 8-bit integer\n     */\n\n  }, {\n    key: \"readTypeRef\",\n    value: function readTypeRef() {\n      return this.typeRefDecoder.read();\n    }\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @return {number}\n     */\n\n  }, {\n    key: \"readLen\",\n    value: function readLen() {\n      return this.lenDecoder.read();\n    }\n    /**\n     * @return {any}\n     */\n\n  }, {\n    key: \"readAny\",\n    value: function readAny() {\n      return _readAny(this.restDecoder);\n    }\n    /**\n     * @return {Uint8Array}\n     */\n\n  }, {\n    key: \"readBuf\",\n    value: function readBuf() {\n      return readVarUint8Array(this.restDecoder);\n    }\n    /**\n     * This is mainly here for legacy purposes.\n     *\n     * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n     *\n     * @return {any}\n     */\n\n  }, {\n    key: \"readJSON\",\n    value: function readJSON() {\n      return _readAny(this.restDecoder);\n    }\n    /**\n     * @return {string}\n     */\n\n  }, {\n    key: \"readKey\",\n    value: function readKey() {\n      var keyClock = this.keyClockDecoder.read();\n\n      if (keyClock < this.keys.length) {\n        return this.keys[keyClock];\n      } else {\n        var key = this.stringDecoder.read();\n        this.keys.push(key);\n        return key;\n      }\n    }\n  }]);\n\n  return UpdateDecoderV2;\n}(DSDecoderV2);\n\nvar DSEncoderV1 = /*#__PURE__*/function () {\n  function DSEncoderV1() {\n    _classCallCheck(this, DSEncoderV1);\n\n    this.restEncoder = createEncoder();\n  }\n\n  _createClass(DSEncoderV1, [{\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return _toUint8Array(this.restEncoder);\n    }\n  }, {\n    key: \"resetDsCurVal\",\n    value: function resetDsCurVal() {// nop\n    }\n    /**\n     * @param {number} clock\n     */\n\n  }, {\n    key: \"writeDsClock\",\n    value: function writeDsClock(clock) {\n      writeVarUint(this.restEncoder, clock);\n    }\n    /**\n     * @param {number} len\n     */\n\n  }, {\n    key: \"writeDsLen\",\n    value: function writeDsLen(len) {\n      writeVarUint(this.restEncoder, len);\n    }\n  }]);\n\n  return DSEncoderV1;\n}();\n\nvar UpdateEncoderV1 = /*#__PURE__*/function (_DSEncoderV) {\n  _inherits(UpdateEncoderV1, _DSEncoderV);\n\n  var _super5 = _createSuper(UpdateEncoderV1);\n\n  function UpdateEncoderV1() {\n    _classCallCheck(this, UpdateEncoderV1);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(UpdateEncoderV1, [{\n    key: \"writeLeftID\",\n    value:\n    /**\n     * @param {ID} id\n     */\n    function writeLeftID(id) {\n      writeVarUint(this.restEncoder, id.client);\n      writeVarUint(this.restEncoder, id.clock);\n    }\n    /**\n     * @param {ID} id\n     */\n\n  }, {\n    key: \"writeRightID\",\n    value: function writeRightID(id) {\n      writeVarUint(this.restEncoder, id.client);\n      writeVarUint(this.restEncoder, id.clock);\n    }\n    /**\n     * Use writeClient and writeClock instead of writeID if possible.\n     * @param {number} client\n     */\n\n  }, {\n    key: \"writeClient\",\n    value: function writeClient(client) {\n      writeVarUint(this.restEncoder, client);\n    }\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n\n  }, {\n    key: \"writeInfo\",\n    value: function writeInfo(info) {\n      writeUint8(this.restEncoder, info);\n    }\n    /**\n     * @param {string} s\n     */\n\n  }, {\n    key: \"writeString\",\n    value: function writeString(s) {\n      writeVarString(this.restEncoder, s);\n    }\n    /**\n     * @param {boolean} isYKey\n     */\n\n  }, {\n    key: \"writeParentInfo\",\n    value: function writeParentInfo(isYKey) {\n      writeVarUint(this.restEncoder, isYKey ? 1 : 0);\n    }\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n\n  }, {\n    key: \"writeTypeRef\",\n    value: function writeTypeRef(info) {\n      writeVarUint(this.restEncoder, info);\n    }\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @param {number} len\n     */\n\n  }, {\n    key: \"writeLen\",\n    value: function writeLen(len) {\n      writeVarUint(this.restEncoder, len);\n    }\n    /**\n     * @param {any} any\n     */\n\n  }, {\n    key: \"writeAny\",\n    value: function writeAny(any) {\n      _writeAny(this.restEncoder, any);\n    }\n    /**\n     * @param {Uint8Array} buf\n     */\n\n  }, {\n    key: \"writeBuf\",\n    value: function writeBuf(buf) {\n      writeVarUint8Array(this.restEncoder, buf);\n    }\n    /**\n     * @param {any} embed\n     */\n\n  }, {\n    key: \"writeJSON\",\n    value: function writeJSON(embed) {\n      writeVarString(this.restEncoder, JSON.stringify(embed));\n    }\n    /**\n     * @param {string} key\n     */\n\n  }, {\n    key: \"writeKey\",\n    value: function writeKey(key) {\n      writeVarString(this.restEncoder, key);\n    }\n  }]);\n\n  return UpdateEncoderV1;\n}(DSEncoderV1);\n\nvar DSEncoderV2 = /*#__PURE__*/function () {\n  function DSEncoderV2() {\n    _classCallCheck(this, DSEncoderV2);\n\n    this.restEncoder = createEncoder(); // encodes all the rest / non-optimized\n\n    this.dsCurrVal = 0;\n  }\n\n  _createClass(DSEncoderV2, [{\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return _toUint8Array(this.restEncoder);\n    }\n  }, {\n    key: \"resetDsCurVal\",\n    value: function resetDsCurVal() {\n      this.dsCurrVal = 0;\n    }\n    /**\n     * @param {number} clock\n     */\n\n  }, {\n    key: \"writeDsClock\",\n    value: function writeDsClock(clock) {\n      var diff = clock - this.dsCurrVal;\n      this.dsCurrVal = clock;\n      writeVarUint(this.restEncoder, diff);\n    }\n    /**\n     * @param {number} len\n     */\n\n  }, {\n    key: \"writeDsLen\",\n    value: function writeDsLen(len) {\n      if (len === 0) {\n        unexpectedCase();\n      }\n\n      writeVarUint(this.restEncoder, len - 1);\n      this.dsCurrVal += len;\n    }\n  }]);\n\n  return DSEncoderV2;\n}();\n\nvar UpdateEncoderV2 = /*#__PURE__*/function (_DSEncoderV2) {\n  _inherits(UpdateEncoderV2, _DSEncoderV2);\n\n  var _super6 = _createSuper(UpdateEncoderV2);\n\n  function UpdateEncoderV2() {\n    var _this7;\n\n    _classCallCheck(this, UpdateEncoderV2);\n\n    _this7 = _super6.call(this);\n    /**\n     * @type {Map<string,number>}\n     */\n\n    _this7.keyMap = new Map();\n    /**\n     * Refers to the next uniqe key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */\n\n    _this7.keyClock = 0;\n    _this7.keyClockEncoder = new IntDiffOptRleEncoder();\n    _this7.clientEncoder = new UintOptRleEncoder();\n    _this7.leftClockEncoder = new IntDiffOptRleEncoder();\n    _this7.rightClockEncoder = new IntDiffOptRleEncoder();\n    _this7.infoEncoder = new RleEncoder(writeUint8);\n    _this7.stringEncoder = new StringEncoder();\n    _this7.parentInfoEncoder = new RleEncoder(writeUint8);\n    _this7.typeRefEncoder = new UintOptRleEncoder();\n    _this7.lenEncoder = new UintOptRleEncoder();\n    return _this7;\n  }\n\n  _createClass(UpdateEncoderV2, [{\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      var encoder = createEncoder();\n      writeVarUint(encoder, 0); // this is a feature flag that we might use in the future\n\n      writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array());\n      writeVarUint8Array(encoder, this.clientEncoder.toUint8Array());\n      writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array());\n      writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array());\n      writeVarUint8Array(encoder, _toUint8Array(this.infoEncoder));\n      writeVarUint8Array(encoder, this.stringEncoder.toUint8Array());\n      writeVarUint8Array(encoder, _toUint8Array(this.parentInfoEncoder));\n      writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array());\n      writeVarUint8Array(encoder, this.lenEncoder.toUint8Array()); // @note The rest encoder is appended! (note the missing var)\n\n      writeUint8Array(encoder, _toUint8Array(this.restEncoder));\n      return _toUint8Array(encoder);\n    }\n    /**\n     * @param {ID} id\n     */\n\n  }, {\n    key: \"writeLeftID\",\n    value: function writeLeftID(id) {\n      this.clientEncoder.write(id.client);\n      this.leftClockEncoder.write(id.clock);\n    }\n    /**\n     * @param {ID} id\n     */\n\n  }, {\n    key: \"writeRightID\",\n    value: function writeRightID(id) {\n      this.clientEncoder.write(id.client);\n      this.rightClockEncoder.write(id.clock);\n    }\n    /**\n     * @param {number} client\n     */\n\n  }, {\n    key: \"writeClient\",\n    value: function writeClient(client) {\n      this.clientEncoder.write(client);\n    }\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n\n  }, {\n    key: \"writeInfo\",\n    value: function writeInfo(info) {\n      this.infoEncoder.write(info);\n    }\n    /**\n     * @param {string} s\n     */\n\n  }, {\n    key: \"writeString\",\n    value: function writeString(s) {\n      this.stringEncoder.write(s);\n    }\n    /**\n     * @param {boolean} isYKey\n     */\n\n  }, {\n    key: \"writeParentInfo\",\n    value: function writeParentInfo(isYKey) {\n      this.parentInfoEncoder.write(isYKey ? 1 : 0);\n    }\n    /**\n     * @param {number} info An unsigned 8-bit integer\n     */\n\n  }, {\n    key: \"writeTypeRef\",\n    value: function writeTypeRef(info) {\n      this.typeRefEncoder.write(info);\n    }\n    /**\n     * Write len of a struct - well suited for Opt RLE encoder.\n     *\n     * @param {number} len\n     */\n\n  }, {\n    key: \"writeLen\",\n    value: function writeLen(len) {\n      this.lenEncoder.write(len);\n    }\n    /**\n     * @param {any} any\n     */\n\n  }, {\n    key: \"writeAny\",\n    value: function writeAny(any) {\n      _writeAny(this.restEncoder, any);\n    }\n    /**\n     * @param {Uint8Array} buf\n     */\n\n  }, {\n    key: \"writeBuf\",\n    value: function writeBuf(buf) {\n      writeVarUint8Array(this.restEncoder, buf);\n    }\n    /**\n     * This is mainly here for legacy purposes.\n     *\n     * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n     *\n     * @param {any} embed\n     */\n\n  }, {\n    key: \"writeJSON\",\n    value: function writeJSON(embed) {\n      _writeAny(this.restEncoder, embed);\n    }\n    /**\n     * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n     * occur very often. For a 3d application, the key `position` might occur very often.\n     *\n     * We cache these keys in a Map and refer to them via a unique number.\n     *\n     * @param {string} key\n     */\n\n  }, {\n    key: \"writeKey\",\n    value: function writeKey(key) {\n      var clock = this.keyMap.get(key);\n\n      if (clock === undefined) {\n        this.keyClockEncoder.write(this.keyClock++);\n        this.stringEncoder.write(key);\n      } else {\n        this.keyClockEncoder.write(this.keyClock++);\n      }\n    }\n  }]);\n\n  return UpdateEncoderV2;\n}(DSEncoderV2);\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\n\n\nvar writeStructs = function writeStructs(encoder, structs, client, clock) {\n  // write first id\n  clock = max(clock, structs[0].id.clock); // make sure the first id exists\n\n  var startNewStructs = findIndexSS(structs, clock); // write # encoded structs\n\n  writeVarUint(encoder.restEncoder, structs.length - startNewStructs);\n  encoder.writeClient(client);\n  writeVarUint(encoder.restEncoder, clock);\n  var firstStruct = structs[startNewStructs]; // write first struct with an offset\n\n  firstStruct.write(encoder, clock - firstStruct.id.clock);\n\n  for (var i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0);\n  }\n};\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\n\n\nvar writeClientsStructs = function writeClientsStructs(encoder, store, _sm) {\n  // we filter all valid _sm entries into sm\n  var sm = new Map();\n\n  _sm.forEach(function (clock, client) {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock);\n    }\n  });\n\n  getStateVector(store).forEach(function (clock, client) {\n    if (!_sm.has(client)) {\n      sm.set(client, 0);\n    }\n  }); // write # states that were updated\n\n  writeVarUint(encoder.restEncoder, sm.size); // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n\n  Array.from(sm.entries()).sort(function (a, b) {\n    return b[0] - a[0];\n  }).forEach(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        client = _ref3[0],\n        clock = _ref3[1];\n\n    // @ts-ignore\n    writeStructs(encoder, store.clients.get(client), client, clock);\n  });\n};\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder The decoder object to read data from.\n * @param {Doc} doc\n * @return {Map<number, { i: number, refs: Array<Item | GC> }>}\n *\n * @private\n * @function\n */\n\n\nvar readClientsStructRefs = function readClientsStructRefs(decoder, doc) {\n  /**\n   * @type {Map<number, { i: number, refs: Array<Item | GC> }>}\n   */\n  var clientRefs = create();\n  var numOfStateUpdates = readVarUint(decoder.restDecoder);\n\n  for (var i = 0; i < numOfStateUpdates; i++) {\n    var numberOfStructs = readVarUint(decoder.restDecoder);\n    /**\n     * @type {Array<GC|Item>}\n     */\n\n    var refs = new Array(numberOfStructs);\n    var client = decoder.readClient();\n    var clock = readVarUint(decoder.restDecoder); // const start = performance.now()\n\n    clientRefs.set(client, {\n      i: 0,\n      refs: refs\n    });\n\n    for (var _i3 = 0; _i3 < numberOfStructs; _i3++) {\n      var info = decoder.readInfo();\n\n      switch (BITS5 & info) {\n        case 0:\n          {\n            // GC\n            var len = decoder.readLen();\n            refs[_i3] = new GC(createID(client, clock), len);\n            clock += len;\n            break;\n          }\n\n        case 10:\n          {\n            // Skip Struct (nothing to apply)\n            // @todo we could reduce the amount of checks by adding Skip struct to clientRefs so we know that something is missing.\n            var _len = readVarUint(decoder.restDecoder);\n\n            refs[_i3] = new Skip(createID(client, clock), _len);\n            clock += _len;\n            break;\n          }\n\n        default:\n          {\n            // Item with content\n\n            /**\n             * The optimized implementation doesn't use any variables because inlining variables is faster.\n             * Below a non-optimized version is shown that implements the basic algorithm with\n             * a few comments\n             */\n            var cantCopyParentInfo = (info & (BIT7 | BIT8)) === 0; // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n            // and we read the next string as parentYKey.\n            // It indicates how we store/retrieve parent from `y.share`\n            // @type {string|null}\n\n            var struct = new Item(createID(client, clock), null, // leftd\n            (info & BIT8) === BIT8 ? decoder.readLeftID() : null, // origin\n            null, // right\n            (info & BIT7) === BIT7 ? decoder.readRightID() : null, // right origin\n            cantCopyParentInfo ? decoder.readParentInfo() ? doc.get(decoder.readString()) : decoder.readLeftID() : null, // parent\n            cantCopyParentInfo && (info & BIT6) === BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n            );\n            /* A non-optimized implementation of the above algorithm:\n             // The item that was originally to the left of this item.\n            const origin = (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null\n            // The item that was originally to the right of this item.\n            const rightOrigin = (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null\n            const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n            const hasParentYKey = cantCopyParentInfo ? decoder.readParentInfo() : false\n            // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n            // and we read the next string as parentYKey.\n            // It indicates how we store/retrieve parent from `y.share`\n            // @type {string|null}\n            const parentYKey = cantCopyParentInfo && hasParentYKey ? decoder.readString() : null\n             const struct = new Item(\n              createID(client, clock),\n              null, // leftd\n              origin, // origin\n              null, // right\n              rightOrigin, // right origin\n              cantCopyParentInfo && !hasParentYKey ? decoder.readLeftID() : (parentYKey !== null ? doc.get(parentYKey) : null), // parent\n              cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n              readItemContent(decoder, info) // item content\n            )\n            */\n\n            refs[_i3] = struct;\n            clock += struct.length;\n          }\n      }\n    } // console.log('time to read: ', performance.now() - start) // @todo remove\n\n  }\n\n  return clientRefs;\n};\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {Map<number, { i: number, refs: (GC | Item)[] }>} clientsStructRefs\n * @return { null | { update: Uint8Array, missing: Map<number,number> } }\n *\n * @private\n * @function\n */\n\n\nvar integrateStructs = function integrateStructs(transaction, store, clientsStructRefs) {\n  /**\n   * @type {Array<Item | GC>}\n   */\n  var stack = []; // sort them so that we take the higher id first, in case of conflicts the lower id will probably not conflict with the id from the higher user.\n\n  var clientsStructRefsIds = Array.from(clientsStructRefs.keys()).sort(function (a, b) {\n    return a - b;\n  });\n\n  if (clientsStructRefsIds.length === 0) {\n    return null;\n  }\n\n  var getNextStructTarget = function getNextStructTarget() {\n    if (clientsStructRefsIds.length === 0) {\n      return null;\n    }\n\n    var nextStructsTarget =\n    /** @type {{i:number,refs:Array<GC|Item>}} */\n    clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]);\n\n    while (nextStructsTarget.refs.length === nextStructsTarget.i) {\n      clientsStructRefsIds.pop();\n\n      if (clientsStructRefsIds.length > 0) {\n        nextStructsTarget =\n        /** @type {{i:number,refs:Array<GC|Item>}} */\n        clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]);\n      } else {\n        return null;\n      }\n    }\n\n    return nextStructsTarget;\n  };\n\n  var curStructsTarget = getNextStructTarget();\n\n  if (curStructsTarget === null && stack.length === 0) {\n    return null;\n  }\n  /**\n   * @type {StructStore}\n   */\n\n\n  var restStructs = new StructStore();\n  var missingSV = new Map();\n  /**\n   * @param {number} client\n   * @param {number} clock\n   */\n\n  var updateMissingSv = function updateMissingSv(client, clock) {\n    var mclock = missingSV.get(client);\n\n    if (mclock == null || mclock > clock) {\n      missingSV.set(client, clock);\n    }\n  };\n  /**\n   * @type {GC|Item}\n   */\n\n\n  var stackHead =\n  /** @type {any} */\n  curStructsTarget.refs[\n  /** @type {any} */\n  curStructsTarget.i++]; // caching the state because it is used very often\n\n  var state = new Map();\n\n  var addStackToRestSS = function addStackToRestSS() {\n    var _iterator = _createForOfIteratorHelper(stack),\n        _step;\n\n    try {\n      var _loop2 = function _loop2() {\n        var item = _step.value;\n        var client = item.id.client;\n        var unapplicableItems = clientsStructRefs.get(client);\n\n        if (unapplicableItems) {\n          // decrement because we weren't able to apply previous operation\n          unapplicableItems.i--;\n          restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i));\n          clientsStructRefs.delete(client);\n          unapplicableItems.i = 0;\n          unapplicableItems.refs = [];\n        } else {\n          // item was the last item on clientsStructRefs and the field was already cleared. Add item to restStructs and continue\n          restStructs.clients.set(client, [item]);\n        } // remove client from clientsStructRefsIds to prevent users from applying the same update again\n\n\n        clientsStructRefsIds = clientsStructRefsIds.filter(function (c) {\n          return c !== client;\n        });\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop2();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    stack.length = 0;\n  }; // iterate over all struct readers until we are done\n\n\n  while (true) {\n    if (stackHead.constructor !== Skip) {\n      var localClock = setIfUndefined(state, stackHead.id.client, function () {\n        return getState(store, stackHead.id.client);\n      });\n      var offset = localClock - stackHead.id.clock;\n\n      if (offset < 0) {\n        // update from the same client is missing\n        stack.push(stackHead);\n        updateMissingSv(stackHead.id.client, stackHead.id.clock - 1); // hid a dead wall, add all items from stack to restSS\n\n        addStackToRestSS();\n      } else {\n        var missing = stackHead.getMissing(transaction, store);\n\n        if (missing !== null) {\n          stack.push(stackHead); // get the struct reader that has the missing struct\n\n          /**\n           * @type {{ refs: Array<GC|Item>, i: number }}\n           */\n\n          var structRefs = clientsStructRefs.get(\n          /** @type {number} */\n          missing) || {\n            refs: [],\n            i: 0\n          };\n\n          if (structRefs.refs.length === structRefs.i) {\n            // This update message causally depends on another update message that doesn't exist yet\n            updateMissingSv(\n            /** @type {number} */\n            missing, getState(store, missing));\n            addStackToRestSS();\n          } else {\n            stackHead = structRefs.refs[structRefs.i++];\n            continue;\n          }\n        } else if (offset === 0 || offset < stackHead.length) {\n          // all fine, apply the stackhead\n          stackHead.integrate(transaction, offset);\n          state.set(stackHead.id.client, stackHead.id.clock + stackHead.length);\n        }\n      }\n    } // iterate to next stackHead\n\n\n    if (stack.length > 0) {\n      stackHead =\n      /** @type {GC|Item} */\n      stack.pop();\n    } else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) {\n      stackHead =\n      /** @type {GC|Item} */\n      curStructsTarget.refs[curStructsTarget.i++];\n    } else {\n      curStructsTarget = getNextStructTarget();\n\n      if (curStructsTarget === null) {\n        // we are done!\n        break;\n      } else {\n        stackHead =\n        /** @type {GC|Item} */\n        curStructsTarget.refs[curStructsTarget.i++];\n      }\n    }\n  }\n\n  if (restStructs.clients.size > 0) {\n    var encoder = new UpdateEncoderV2();\n    writeClientsStructs(encoder, restStructs, new Map()); // write empty deleteset\n    // writeDeleteSet(encoder, new DeleteSet())\n\n    writeVarUint(encoder.restEncoder, 0); // => no need for an extra function call, just write 0 deletes\n\n    return {\n      missing: missingSV,\n      update: encoder.toUint8Array()\n    };\n  }\n\n  return null;\n};\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\n\n\nvar writeStructsFromTransaction = function writeStructsFromTransaction(encoder, transaction) {\n  return writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);\n};\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {UpdateDecoderV1 | UpdateDecoderV2} [structDecoder]\n *\n * @function\n */\n\n\nvar readUpdateV2 = function readUpdateV2(decoder, ydoc, transactionOrigin) {\n  var structDecoder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new UpdateDecoderV2(decoder);\n  return _transact(ydoc, function (transaction) {\n    var retry = false;\n    var doc = transaction.doc;\n    var store = doc.store; // let start = performance.now()\n\n    var ss = readClientsStructRefs(structDecoder, doc); // console.log('time to read structs: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    // console.log('time to merge: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n\n    var restStructs = integrateStructs(transaction, store, ss);\n    var pending = store.pendingStructs;\n\n    if (pending) {\n      // check if we can apply something\n      var _iterator2 = _createForOfIteratorHelper(pending.missing),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              _client = _step2$value[0],\n              _clock = _step2$value[1];\n\n          if (_clock < getState(store, _client)) {\n            retry = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (restStructs) {\n        // merge restStructs into store.pending\n        var _iterator3 = _createForOfIteratorHelper(restStructs.missing),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _step3$value = _slicedToArray(_step3.value, 2),\n                client = _step3$value[0],\n                clock = _step3$value[1];\n\n            var mclock = pending.missing.get(client);\n\n            if (mclock == null || mclock > clock) {\n              pending.missing.set(client, clock);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        pending.update = mergeUpdatesV2([pending.update, restStructs.update]);\n      }\n    } else {\n      store.pendingStructs = restStructs;\n    } // console.log('time to integrate: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n\n\n    var dsRest = readAndApplyDeleteSet(structDecoder, transaction, store);\n\n    if (store.pendingDs) {\n      // @todo we could make a lower-bound state-vector check as we do above\n      var pendingDSUpdate = new UpdateDecoderV2(createDecoder(store.pendingDs));\n      readVarUint(pendingDSUpdate.restDecoder); // read 0 structs, because we only encode deletes in pendingdsupdate\n\n      var dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store);\n\n      if (dsRest && dsRest2) {\n        // case 1: ds1 != null && ds2 != null\n        store.pendingDs = mergeUpdatesV2([dsRest, dsRest2]);\n      } else {\n        // case 2: ds1 != null\n        // case 3: ds2 != null\n        // case 4: ds1 == null && ds2 == null\n        store.pendingDs = dsRest || dsRest2;\n      }\n    } else {\n      // Either dsRest == null && pendingDs == null OR dsRest != null\n      store.pendingDs = dsRest;\n    } // console.log('time to cleanup: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    // console.log('time to resume delete readers: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n\n\n    if (retry) {\n      var update =\n      /** @type {{update: Uint8Array}} */\n      store.pendingStructs.update;\n      store.pendingStructs = null;\n      applyUpdateV2(transaction.doc, update);\n    }\n  }, transactionOrigin, false);\n};\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\n\n\nvar readUpdate = function readUpdate(decoder, ydoc, transactionOrigin) {\n  return readUpdateV2(decoder, ydoc, transactionOrigin, new UpdateDecoderV1(decoder));\n};\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n *\n * @function\n */\n\n\nvar applyUpdateV2 = function applyUpdateV2(ydoc, update, transactionOrigin) {\n  var YDecoder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : UpdateDecoderV2;\n  var decoder = createDecoder(update);\n  readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder));\n};\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\n\n\nvar applyUpdate = function applyUpdate(ydoc, update, transactionOrigin) {\n  return applyUpdateV2(ydoc, update, transactionOrigin, UpdateDecoderV1);\n};\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */\n\n\nvar writeStateAsUpdate = function writeStateAsUpdate(encoder, doc) {\n  var targetStateVector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Map();\n  writeClientsStructs(encoder, doc.store, targetStateVector);\n  writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store));\n};\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @param {UpdateEncoderV1 | UpdateEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\n\n\nvar encodeStateAsUpdateV2 = function encodeStateAsUpdateV2(doc) {\n  var encodedTargetStateVector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint8Array([0]);\n  var encoder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new UpdateEncoderV2();\n  var targetStateVector = decodeStateVector(encodedTargetStateVector);\n  writeStateAsUpdate(encoder, doc, targetStateVector);\n  var updates = [encoder.toUint8Array()]; // also add the pending updates (if there are any)\n  // @todo support diffirent encoders\n\n  if (encoder.constructor === UpdateEncoderV2) {\n    if (doc.store.pendingDs) {\n      updates.push(doc.store.pendingDs);\n    }\n\n    if (doc.store.pendingStructs) {\n      updates.push(diffUpdateV2(doc.store.pendingStructs.update, encodedTargetStateVector));\n    }\n\n    if (updates.length > 1) {\n      return mergeUpdatesV2(updates);\n    }\n  }\n\n  return updates[0];\n};\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */\n\n\nvar encodeStateAsUpdate = function encodeStateAsUpdate(doc, encodedTargetStateVector) {\n  return encodeStateAsUpdateV2(doc, encodedTargetStateVector, new UpdateEncoderV1());\n};\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n\n\nvar readStateVector = function readStateVector(decoder) {\n  var ss = new Map();\n  var ssLength = readVarUint(decoder.restDecoder);\n\n  for (var i = 0; i < ssLength; i++) {\n    var client = readVarUint(decoder.restDecoder);\n    var clock = readVarUint(decoder.restDecoder);\n    ss.set(client, clock);\n  }\n\n  return ss;\n};\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n// export const decodeStateVectorV2 = decodedState => readStateVector(new DSDecoderV2(decoding.createDecoder(decodedState)))\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n\n\nvar decodeStateVector = function decodeStateVector(decodedState) {\n  return readStateVector(new DSDecoderV1(createDecoder(decodedState)));\n};\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Map<number,number>} sv\n * @function\n */\n\n\nvar writeStateVector = function writeStateVector(encoder, sv) {\n  writeVarUint(encoder.restEncoder, sv.size);\n  sv.forEach(function (clock, client) {\n    writeVarUint(encoder.restEncoder, client); // @todo use a special client decoder that is based on mapping\n\n    writeVarUint(encoder.restEncoder, clock);\n  });\n  return encoder;\n};\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Doc} doc\n *\n * @function\n */\n\n\nvar writeDocumentStateVector = function writeDocumentStateVector(encoder, doc) {\n  return writeStateVector(encoder, getStateVector(doc.store));\n};\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\n\n\nvar encodeStateVectorV2 = function encodeStateVectorV2(doc) {\n  var encoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new DSEncoderV2();\n\n  if (doc instanceof Map) {\n    writeStateVector(encoder, doc);\n  } else {\n    writeDocumentStateVector(encoder, doc);\n  }\n\n  return encoder.toUint8Array();\n};\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @return {Uint8Array}\n *\n * @function\n */\n\n\nvar encodeStateVector = function encodeStateVector(doc) {\n  return encodeStateVectorV2(doc, new DSEncoderV1());\n};\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\n\n\nvar EventHandler = function EventHandler() {\n  _classCallCheck(this, EventHandler);\n\n  /**\n   * @type {Array<function(ARG0, ARG1):void>}\n   */\n  this.l = [];\n};\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\n\n\nvar createEventHandler = function createEventHandler() {\n  return new EventHandler();\n};\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\n\n\nvar addEventHandlerListener = function addEventHandlerListener(eventHandler, f) {\n  return eventHandler.l.push(f);\n};\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\n\n\nvar removeEventHandlerListener = function removeEventHandlerListener(eventHandler, f) {\n  var l = eventHandler.l;\n  var len = l.length;\n  eventHandler.l = l.filter(function (g) {\n    return f !== g;\n  });\n\n  if (len === eventHandler.l.length) {\n    console.error('[yjs] Tried to remove event handler that doesn\\'t exist.');\n  }\n};\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\n\n\nvar callEventHandlerListeners = function callEventHandlerListeners(eventHandler, arg0, arg1) {\n  return callAll(eventHandler.l, [arg0, arg1]);\n};\n\nvar ID =\n/**\n * @param {number} client client id\n * @param {number} clock unique per client id, continuous number\n */\nfunction ID(client, clock) {\n  _classCallCheck(this, ID);\n\n  /**\n   * Client id\n   * @type {number}\n   */\n  this.client = client;\n  /**\n   * unique per client id, continuous number\n   * @type {number}\n   */\n\n  this.clock = clock;\n};\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\n\n\nvar compareIDs = function compareIDs(a, b) {\n  return a === b || a !== null && b !== null && a.client === b.client && a.clock === b.clock;\n};\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\n\n\nvar createID = function createID(client, clock) {\n  return new ID(client, clock);\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */\n\n\nvar writeID = function writeID(encoder, id) {\n  writeVarUint(encoder, id.client);\n  writeVarUint(encoder, id.clock);\n};\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */\n\n\nvar readID = function readID(decoder) {\n  return createID(readVarUint(decoder), readVarUint(decoder));\n};\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\n\n\nvar findRootTypeKey = function findRootTypeKey(type) {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  var _iterator4 = _createForOfIteratorHelper(type.doc.share.entries()),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          key = _step4$value[0],\n          value = _step4$value[1];\n\n      if (value === type) {\n        return key;\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  throw unexpectedCase();\n};\n/**\n * Check if `parent` is a parent of `child`.\n *\n * @param {AbstractType<any>} parent\n * @param {Item|null} child\n * @return {Boolean} Whether `parent` is a parent of `child`.\n *\n * @private\n * @function\n */\n\n\nvar isParentOf = function isParentOf(parent, child) {\n  while (child !== null) {\n    if (child.parent === parent) {\n      return true;\n    }\n\n    child =\n    /** @type {AbstractType<any>} */\n    child.parent._item;\n  }\n\n  return false;\n};\n/**\n * Convenient helper to log type information.\n *\n * Do not use in productive systems as the output can be immense!\n *\n * @param {AbstractType<any>} type\n */\n\n\nvar logType = function logType(type) {\n  var res = [];\n  var n = type._start;\n\n  while (n) {\n    res.push(n);\n    n = n.right;\n  }\n\n  console.log('Children: ', res);\n  console.log('Children content: ', res.filter(function (m) {\n    return !m.deleted;\n  }).map(function (m) {\n    return m.content;\n  }));\n};\n\nvar PermanentUserData = /*#__PURE__*/function () {\n  /**\n   * @param {Doc} doc\n   * @param {YMap<any>} [storeType]\n   */\n  function PermanentUserData(doc) {\n    var _this8 = this;\n\n    var storeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doc.getMap('users');\n\n    _classCallCheck(this, PermanentUserData);\n\n    /**\n     * @type {Map<string,DeleteSet>}\n     */\n    var dss = new Map();\n    this.yusers = storeType;\n    this.doc = doc;\n    /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */\n\n    this.clients = new Map();\n    this.dss = dss;\n    /**\n     * @param {YMap<any>} user\n     * @param {string} userDescription\n     */\n\n    var initUser = function initUser(user, userDescription) {\n      /**\n       * @type {YArray<Uint8Array>}\n       */\n      var ds = user.get('ds');\n      var ids = user.get('ids');\n\n      var addClientId =\n      /** @param {number} clientid */\n      function addClientId(clientid) {\n        return _this8.clients.set(clientid, userDescription);\n      };\n\n      ds.observe(\n      /** @param {YArrayEvent<any>} event */\n      function (event) {\n        event.changes.added.forEach(function (item) {\n          item.content.getContent().forEach(function (encodedDs) {\n            if (encodedDs instanceof Uint8Array) {\n              _this8.dss.set(userDescription, mergeDeleteSets([_this8.dss.get(userDescription) || createDeleteSet(), readDeleteSet(new DSDecoderV1(createDecoder(encodedDs)))]));\n            }\n          });\n        });\n      });\n\n      _this8.dss.set(userDescription, mergeDeleteSets(ds.map(function (encodedDs) {\n        return readDeleteSet(new DSDecoderV1(createDecoder(encodedDs)));\n      })));\n\n      ids.observe(\n      /** @param {YArrayEvent<any>} event */\n      function (event) {\n        return event.changes.added.forEach(function (item) {\n          return item.content.getContent().forEach(addClientId);\n        });\n      });\n      ids.forEach(addClientId);\n    }; // observe users\n\n\n    storeType.observe(function (event) {\n      event.keysChanged.forEach(function (userDescription) {\n        return initUser(storeType.get(userDescription), userDescription);\n      });\n    }); // add intial data\n\n    storeType.forEach(initUser);\n  }\n  /**\n   * @param {Doc} doc\n   * @param {number} clientid\n   * @param {string} userDescription\n   * @param {Object} [conf]\n   * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n   */\n\n\n  _createClass(PermanentUserData, [{\n    key: \"setUserMapping\",\n    value: function setUserMapping(doc, clientid, userDescription) {\n      var _this9 = this;\n\n      var _ref4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n          _ref4$filter = _ref4.filter,\n          filter = _ref4$filter === void 0 ? function () {\n        return true;\n      } : _ref4$filter;\n\n      var users = this.yusers;\n      var user = users.get(userDescription);\n\n      if (!user) {\n        user = new YMap();\n        user.set('ids', new YArray());\n        user.set('ds', new YArray());\n        users.set(userDescription, user);\n      }\n\n      user.get('ids').push([clientid]);\n      users.observe(function (event) {\n        setTimeout(function () {\n          var userOverwrite = users.get(userDescription);\n\n          if (userOverwrite !== user) {\n            // user was overwritten, port all data over to the next user object\n            // @todo Experiment with Y.Sets here\n            user = userOverwrite; // @todo iterate over old type\n\n            _this9.clients.forEach(function (_userDescription, clientid) {\n              if (userDescription === _userDescription) {\n                user.get('ids').push([clientid]);\n              }\n            });\n\n            var encoder = new DSEncoderV1();\n\n            var ds = _this9.dss.get(userDescription);\n\n            if (ds) {\n              writeDeleteSet(encoder, ds);\n              user.get('ds').push([encoder.toUint8Array()]);\n            }\n          }\n        }, 0);\n      });\n      doc.on('afterTransaction',\n      /** @param {Transaction} transaction */\n      function (transaction) {\n        setTimeout(function () {\n          var yds = user.get('ds');\n          var ds = transaction.deleteSet;\n\n          if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {\n            var encoder = new DSEncoderV1();\n            writeDeleteSet(encoder, ds);\n            yds.push([encoder.toUint8Array()]);\n          }\n        });\n      });\n    }\n    /**\n     * @param {number} clientid\n     * @return {any}\n     */\n\n  }, {\n    key: \"getUserByClientId\",\n    value: function getUserByClientId(clientid) {\n      return this.clients.get(clientid) || null;\n    }\n    /**\n     * @param {ID} id\n     * @return {string | null}\n     */\n\n  }, {\n    key: \"getUserByDeletedId\",\n    value: function getUserByDeletedId(id) {\n      var _iterator5 = _createForOfIteratorHelper(this.dss.entries()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              userDescription = _step5$value[0],\n              ds = _step5$value[1];\n\n          if (isDeleted(ds, id)) {\n            return userDescription;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return null;\n    }\n  }]);\n\n  return PermanentUserData;\n}();\n/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */\n\n\nvar RelativePosition =\n/**\n * @param {ID|null} type\n * @param {string|null} tname\n * @param {ID|null} item\n * @param {number} assoc\n */\nfunction RelativePosition(type, tname, item) {\n  var assoc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  _classCallCheck(this, RelativePosition);\n\n  /**\n   * @type {ID|null}\n   */\n  this.type = type;\n  /**\n   * @type {string|null}\n   */\n\n  this.tname = tname;\n  /**\n   * @type {ID | null}\n   */\n\n  this.item = item;\n  /**\n   * A relative position is associated to a specific character. By default\n   * assoc >= 0, the relative position is associated to the character\n   * after the meant position.\n   * I.e. position 1 in 'ab' is associated to character 'b'.\n   *\n   * If assoc < 0, then the relative position is associated to the caharacter\n   * before the meant position.\n   *\n   * @type {number}\n   */\n\n  this.assoc = assoc;\n};\n/**\n * @param {RelativePosition} rpos\n * @return {any}\n */\n\n\nvar relativePositionToJSON = function relativePositionToJSON(rpos) {\n  var json = {};\n\n  if (rpos.type) {\n    json.type = rpos.type;\n  }\n\n  if (rpos.tname) {\n    json.tname = rpos.tname;\n  }\n\n  if (rpos.item) {\n    json.item = rpos.item;\n  }\n\n  if (rpos.assoc != null) {\n    json.assoc = rpos.assoc;\n  }\n\n  return json;\n};\n/**\n * @param {any} json\n * @return {RelativePosition}\n *\n * @function\n */\n\n\nvar createRelativePositionFromJSON = function createRelativePositionFromJSON(json) {\n  return new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname || null, json.item == null ? null : createID(json.item.client, json.item.clock), json.assoc == null ? 0 : json.assoc);\n};\n\nvar AbsolutePosition =\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @param {number} [assoc]\n */\nfunction AbsolutePosition(type, index) {\n  var assoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  _classCallCheck(this, AbsolutePosition);\n\n  /**\n   * @type {AbstractType<any>}\n   */\n  this.type = type;\n  /**\n   * @type {number}\n   */\n\n  this.index = index;\n  this.assoc = assoc;\n};\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @param {number} [assoc]\n *\n * @function\n */\n\n\nvar createAbsolutePosition = function createAbsolutePosition(type, index) {\n  var assoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return new AbsolutePosition(type, index, assoc);\n};\n/**\n * @param {AbstractType<any>} type\n * @param {ID|null} item\n * @param {number} [assoc]\n *\n * @function\n */\n\n\nvar createRelativePosition = function createRelativePosition(type, item, assoc) {\n  var typeid = null;\n  var tname = null;\n\n  if (type._item === null) {\n    tname = findRootTypeKey(type);\n  } else {\n    typeid = createID(type._item.id.client, type._item.id.clock);\n  }\n\n  return new RelativePosition(typeid, tname, item, assoc);\n};\n/**\n * Create a relativePosition based on a absolute position.\n *\n * @param {AbstractType<any>} type The base type (e.g. YText or YArray).\n * @param {number} index The absolute position.\n * @param {number} [assoc]\n * @return {RelativePosition}\n *\n * @function\n */\n\n\nvar createRelativePositionFromTypeIndex = function createRelativePositionFromTypeIndex(type, index) {\n  var assoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var t = type._start;\n\n  if (assoc < 0) {\n    // associated to the left character or the beginning of a type, increment index if possible.\n    if (index === 0) {\n      return createRelativePosition(type, null, assoc);\n    }\n\n    index--;\n  }\n\n  while (t !== null) {\n    if (!t.deleted && t.countable) {\n      if (t.length > index) {\n        // case 1: found position somewhere in the linked list\n        return createRelativePosition(type, createID(t.id.client, t.id.clock + index), assoc);\n      }\n\n      index -= t.length;\n    }\n\n    if (t.right === null && assoc < 0) {\n      // left-associated position, return last available id\n      return createRelativePosition(type, t.lastId, assoc);\n    }\n\n    t = t.right;\n  }\n\n  return createRelativePosition(type, null, assoc);\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {RelativePosition} rpos\n *\n * @function\n */\n\n\nvar writeRelativePosition = function writeRelativePosition(encoder, rpos) {\n  var type = rpos.type,\n      tname = rpos.tname,\n      item = rpos.item,\n      assoc = rpos.assoc;\n\n  if (item !== null) {\n    writeVarUint(encoder, 0);\n    writeID(encoder, item);\n  } else if (tname !== null) {\n    // case 2: found position at the end of the list and type is stored in y.share\n    writeUint8(encoder, 1);\n    writeVarString(encoder, tname);\n  } else if (type !== null) {\n    // case 3: found position at the end of the list and type is attached to an item\n    writeUint8(encoder, 2);\n    writeID(encoder, type);\n  } else {\n    throw unexpectedCase();\n  }\n\n  writeVarInt(encoder, assoc);\n  return encoder;\n};\n/**\n * @param {RelativePosition} rpos\n * @return {Uint8Array}\n */\n\n\nvar encodeRelativePosition = function encodeRelativePosition(rpos) {\n  var encoder = createEncoder();\n  writeRelativePosition(encoder, rpos);\n  return _toUint8Array(encoder);\n};\n/**\n * @param {decoding.Decoder} decoder\n * @return {RelativePosition}\n *\n * @function\n */\n\n\nvar readRelativePosition = function readRelativePosition(decoder) {\n  var type = null;\n  var tname = null;\n  var itemID = null;\n\n  switch (readVarUint(decoder)) {\n    case 0:\n      // case 1: found position somewhere in the linked list\n      itemID = readID(decoder);\n      break;\n\n    case 1:\n      // case 2: found position at the end of the list and type is stored in y.share\n      tname = readVarString(decoder);\n      break;\n\n    case 2:\n      {\n        // case 3: found position at the end of the list and type is attached to an item\n        type = readID(decoder);\n      }\n  }\n\n  var assoc = hasContent(decoder) ? readVarInt(decoder) : 0;\n  return new RelativePosition(type, tname, itemID, assoc);\n};\n/**\n * @param {Uint8Array} uint8Array\n * @return {RelativePosition}\n */\n\n\nvar decodeRelativePosition = function decodeRelativePosition(uint8Array) {\n  return readRelativePosition(createDecoder(uint8Array));\n};\n/**\n * @param {RelativePosition} rpos\n * @param {Doc} doc\n * @return {AbsolutePosition|null}\n *\n * @function\n */\n\n\nvar createAbsolutePositionFromRelativePosition = function createAbsolutePositionFromRelativePosition(rpos, doc) {\n  var store = doc.store;\n  var rightID = rpos.item;\n  var typeID = rpos.type;\n  var tname = rpos.tname;\n  var assoc = rpos.assoc;\n  var type = null;\n  var index = 0;\n\n  if (rightID !== null) {\n    if (getState(store, rightID.client) <= rightID.clock) {\n      return null;\n    }\n\n    var res = followRedone(store, rightID);\n    var right = res.item;\n\n    if (!(right instanceof Item)) {\n      return null;\n    }\n\n    type =\n    /** @type {AbstractType<any>} */\n    right.parent;\n\n    if (type._item === null || !type._item.deleted) {\n      index = right.deleted || !right.countable ? 0 : res.diff + (assoc >= 0 ? 0 : 1); // adjust position based on left association if necessary\n\n      var n = right.left;\n\n      while (n !== null) {\n        if (!n.deleted && n.countable) {\n          index += n.length;\n        }\n\n        n = n.left;\n      }\n    }\n  } else {\n    if (tname !== null) {\n      type = doc.get(tname);\n    } else if (typeID !== null) {\n      if (getState(store, typeID.client) <= typeID.clock) {\n        // type does not exist yet\n        return null;\n      }\n\n      var _followRedone = followRedone(store, typeID),\n          item = _followRedone.item;\n\n      if (item instanceof Item && item.content instanceof ContentType) {\n        type = item.content.type;\n      } else {\n        // struct is garbage collected\n        return null;\n      }\n    } else {\n      throw unexpectedCase();\n    }\n\n    if (assoc >= 0) {\n      index = type._length;\n    } else {\n      index = 0;\n    }\n  }\n\n  return createAbsolutePosition(type, index, rpos.assoc);\n};\n/**\n * @param {RelativePosition|null} a\n * @param {RelativePosition|null} b\n * @return {boolean}\n *\n * @function\n */\n\n\nvar compareRelativePositions = function compareRelativePositions(a, b) {\n  return a === b || a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type) && a.assoc === b.assoc;\n};\n\nvar Snapshot =\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sv state map\n */\nfunction Snapshot(ds, sv) {\n  _classCallCheck(this, Snapshot);\n\n  /**\n   * @type {DeleteSet}\n   */\n  this.ds = ds;\n  /**\n   * State Map\n   * @type {Map<number,number>}\n   */\n\n  this.sv = sv;\n};\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */\n\n\nvar equalSnapshots = function equalSnapshots(snap1, snap2) {\n  var ds1 = snap1.ds.clients;\n  var ds2 = snap2.ds.clients;\n  var sv1 = snap1.sv;\n  var sv2 = snap2.sv;\n\n  if (sv1.size !== sv2.size || ds1.size !== ds2.size) {\n    return false;\n  }\n\n  var _iterator6 = _createForOfIteratorHelper(sv1.entries()),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n          key = _step6$value[0],\n          value = _step6$value[1];\n\n      if (sv2.get(key) !== value) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  var _iterator7 = _createForOfIteratorHelper(ds1.entries()),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n          client = _step7$value[0],\n          dsitems1 = _step7$value[1];\n\n      var dsitems2 = ds2.get(client) || [];\n\n      if (dsitems1.length !== dsitems2.length) {\n        return false;\n      }\n\n      for (var i = 0; i < dsitems1.length; i++) {\n        var dsitem1 = dsitems1[i];\n        var dsitem2 = dsitems2[i];\n\n        if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {\n          return false;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return true;\n};\n/**\n * @param {Snapshot} snapshot\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n */\n\n\nvar encodeSnapshotV2 = function encodeSnapshotV2(snapshot) {\n  var encoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new DSEncoderV2();\n  writeDeleteSet(encoder, snapshot.ds);\n  writeStateVector(encoder, snapshot.sv);\n  return encoder.toUint8Array();\n};\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */\n\n\nvar encodeSnapshot = function encodeSnapshot(snapshot) {\n  return encodeSnapshotV2(snapshot, new DSEncoderV1());\n};\n/**\n * @param {Uint8Array} buf\n * @param {DSDecoderV1 | DSDecoderV2} [decoder]\n * @return {Snapshot}\n */\n\n\nvar decodeSnapshotV2 = function decodeSnapshotV2(buf) {\n  var decoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new DSDecoderV2(createDecoder(buf));\n  return new Snapshot(readDeleteSet(decoder), readStateVector(decoder));\n};\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */\n\n\nvar decodeSnapshot = function decodeSnapshot(buf) {\n  return decodeSnapshotV2(buf, new DSDecoderV1(createDecoder(buf)));\n};\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */\n\n\nvar createSnapshot = function createSnapshot(ds, sm) {\n  return new Snapshot(ds, sm);\n};\n\nvar emptySnapshot = createSnapshot(createDeleteSet(), new Map());\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */\n\nvar snapshot = function snapshot(doc) {\n  return createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store));\n};\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\n\n\nvar isVisible = function isVisible(item, snapshot) {\n  return snapshot === undefined ? !item.deleted : snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id);\n};\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\n\n\nvar splitSnapshotAffectedStructs = function splitSnapshotAffectedStructs(transaction, snapshot) {\n  var meta = setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, create$1);\n  var store = transaction.doc.store; // check if we already split for this snapshot\n\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach(function (clock, client) {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock));\n      }\n    });\n    iterateDeletedStructs(transaction, snapshot.ds, function (item) {});\n    meta.add(snapshot);\n  }\n};\n/**\n * @param {Doc} originDoc\n * @param {Snapshot} snapshot\n * @param {Doc} [newDoc] Optionally, you may define the Yjs document that receives the data from originDoc\n * @return {Doc}\n */\n\n\nvar createDocFromSnapshot = function createDocFromSnapshot(originDoc, snapshot) {\n  var newDoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Doc();\n\n  if (originDoc.gc) {\n    // we should not try to restore a GC-ed document, because some of the restored items might have their content deleted\n    throw new Error('originDoc must not be garbage collected');\n  }\n\n  var sv = snapshot.sv,\n      ds = snapshot.ds;\n  var encoder = new UpdateEncoderV2();\n  originDoc.transact(function (transaction) {\n    var size = 0;\n    sv.forEach(function (clock) {\n      if (clock > 0) {\n        size++;\n      }\n    });\n    writeVarUint(encoder.restEncoder, size); // splitting the structs before writing them to the encoder\n\n    var _iterator8 = _createForOfIteratorHelper(sv),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var _step8$value = _slicedToArray(_step8.value, 2),\n            client = _step8$value[0],\n            clock = _step8$value[1];\n\n        if (clock === 0) {\n          continue;\n        }\n\n        if (clock < getState(originDoc.store, client)) {\n          getItemCleanStart(transaction, createID(client, clock));\n        }\n\n        var structs = originDoc.store.clients.get(client) || [];\n        var lastStructIndex = findIndexSS(structs, clock - 1); // write # encoded structs\n\n        writeVarUint(encoder.restEncoder, lastStructIndex + 1);\n        encoder.writeClient(client); // first clock written is 0\n\n        writeVarUint(encoder.restEncoder, 0);\n\n        for (var i = 0; i <= lastStructIndex; i++) {\n          structs[i].write(encoder, 0);\n        }\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    writeDeleteSet(encoder, ds);\n  });\n  applyUpdateV2(newDoc, encoder.toUint8Array(), 'snapshot');\n  return newDoc;\n};\n\nvar StructStore = function StructStore() {\n  _classCallCheck(this, StructStore);\n\n  /**\n   * @type {Map<number,Array<GC|Item>>}\n   */\n  this.clients = new Map();\n  /**\n   * @type {null | { missing: Map<number, number>, update: Uint8Array }}\n   */\n\n  this.pendingStructs = null;\n  /**\n   * @type {null | Uint8Array}\n   */\n\n  this.pendingDs = null;\n};\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\n\n\nvar getStateVector = function getStateVector(store) {\n  var sm = new Map();\n  store.clients.forEach(function (structs, client) {\n    var struct = structs[structs.length - 1];\n    sm.set(client, struct.id.clock + struct.length);\n  });\n  return sm;\n};\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\n\n\nvar getState = function getState(store, client) {\n  var structs = store.clients.get(client);\n\n  if (structs === undefined) {\n    return 0;\n  }\n\n  var lastStruct = structs[structs.length - 1];\n  return lastStruct.id.clock + lastStruct.length;\n};\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\n\n\nvar addStruct = function addStruct(store, struct) {\n  var structs = store.clients.get(struct.id.client);\n\n  if (structs === undefined) {\n    structs = [];\n    store.clients.set(struct.id.client, structs);\n  } else {\n    var lastStruct = structs[structs.length - 1];\n\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw unexpectedCase();\n    }\n  }\n\n  structs.push(struct);\n};\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\n\n\nvar findIndexSS = function findIndexSS(structs, clock) {\n  var left = 0;\n  var right = structs.length - 1;\n  var mid = structs[right];\n  var midclock = mid.id.clock;\n\n  if (midclock === clock) {\n    return right;\n  } // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n\n\n  var midindex = floor(clock / (midclock + mid.length - 1) * right); // pivoting the search\n\n  while (left <= right) {\n    mid = structs[midindex];\n    midclock = mid.id.clock;\n\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex;\n      }\n\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n\n    midindex = floor((left + right) / 2);\n  } // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n\n\n  throw unexpectedCase();\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\n\n\nvar find = function find(store, id) {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  var structs = store.clients.get(id.client);\n  return structs[findIndexSS(structs, id.clock)];\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\n\n\nvar getItem =\n/** @type {function(StructStore,ID):Item} */\nfind;\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\n\nvar findIndexCleanStart = function findIndexCleanStart(transaction, structs, clock) {\n  var index = findIndexSS(structs, clock);\n  var struct = structs[index];\n\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n    return index + 1;\n  }\n\n  return index;\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\n\n\nvar getItemCleanStart = function getItemCleanStart(transaction, id) {\n  var structs =\n  /** @type {Array<Item>} */\n  transaction.doc.store.clients.get(id.client);\n  return structs[findIndexCleanStart(transaction, structs, id.clock)];\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\n\n\nvar getItemCleanEnd = function getItemCleanEnd(transaction, store, id) {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  var structs = store.clients.get(id.client);\n  var index = findIndexSS(structs, id.clock);\n  var struct = structs[index];\n\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1));\n  }\n\n  return struct;\n};\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\n\n\nvar replaceStruct = function replaceStruct(store, struct, newStruct) {\n  var structs =\n  /** @type {Array<GC|Item>} */\n  store.clients.get(struct.id.client);\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct;\n};\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\n\n\nvar iterateStructs = function iterateStructs(transaction, structs, clockStart, len, f) {\n  if (len === 0) {\n    return;\n  }\n\n  var clockEnd = clockStart + len;\n  var index = findIndexCleanStart(transaction, structs, clockStart);\n  var struct;\n\n  do {\n    struct = structs[index++];\n\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd);\n    }\n\n    f(struct);\n  } while (index < structs.length && structs[index].id.clock < clockEnd);\n};\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const map = y.define('map', YMap)\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * y.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\n\n\nvar Transaction =\n/**\n * @param {Doc} doc\n * @param {any} origin\n * @param {boolean} local\n */\nfunction Transaction(doc, origin, local) {\n  _classCallCheck(this, Transaction);\n\n  /**\n   * The Yjs instance.\n   * @type {Doc}\n   */\n  this.doc = doc;\n  /**\n   * Describes the set of deleted items by ids\n   * @type {DeleteSet}\n   */\n\n  this.deleteSet = new DeleteSet();\n  /**\n   * Holds the state before the transaction started.\n   * @type {Map<Number,Number>}\n   */\n\n  this.beforeState = getStateVector(doc.store);\n  /**\n   * Holds the state after the transaction.\n   * @type {Map<Number,Number>}\n   */\n\n  this.afterState = new Map();\n  /**\n   * All types that were directly modified (property added or child\n   * inserted/deleted). New types are not included in this Set.\n   * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n   * @type {Map<AbstractType<YEvent>,Set<String|null>>}\n   */\n\n  this.changed = new Map();\n  /**\n   * Stores the events for the types that observe also child elements.\n   * It is mainly used by `observeDeep`.\n   * @type {Map<AbstractType<YEvent>,Array<YEvent>>}\n   */\n\n  this.changedParentTypes = new Map();\n  /**\n   * @type {Array<AbstractStruct>}\n   */\n\n  this._mergeStructs = [];\n  /**\n   * @type {any}\n   */\n\n  this.origin = origin;\n  /**\n   * Stores meta information on the transaction\n   * @type {Map<any,any>}\n   */\n\n  this.meta = new Map();\n  /**\n   * Whether this change originates from this doc.\n   * @type {boolean}\n   */\n\n  this.local = local;\n  /**\n   * @type {Set<Doc>}\n   */\n\n  this.subdocsAdded = new Set();\n  /**\n   * @type {Set<Doc>}\n   */\n\n  this.subdocsRemoved = new Set();\n  /**\n   * @type {Set<Doc>}\n   */\n\n  this.subdocsLoaded = new Set();\n};\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n * @return {boolean} Whether data was written.\n */\n\n\nvar writeUpdateMessageFromTransaction = function writeUpdateMessageFromTransaction(encoder, transaction) {\n  if (transaction.deleteSet.clients.size === 0 && !any(transaction.afterState, function (clock, client) {\n    return transaction.beforeState.get(client) !== clock;\n  })) {\n    return false;\n  }\n\n  sortAndMergeDeleteSet(transaction.deleteSet);\n  writeStructsFromTransaction(encoder, transaction);\n  writeDeleteSet(encoder, transaction.deleteSet);\n  return true;\n};\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent>} type\n * @param {string|null} parentSub\n */\n\n\nvar addChangedTypeToTransaction = function addChangedTypeToTransaction(transaction, type, parentSub) {\n  var item = type._item;\n\n  if (item === null || item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted) {\n    setIfUndefined(transaction.changed, type, create$1).add(parentSub);\n  }\n};\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n */\n\n\nvar tryToMergeWithLeft = function tryToMergeWithLeft(structs, pos) {\n  var left = structs[pos - 1];\n  var right = structs[pos];\n\n  if (left.deleted === right.deleted && left.constructor === right.constructor) {\n    if (left.mergeWith(right)) {\n      structs.splice(pos, 1);\n\n      if (right instanceof Item && right.parentSub !== null &&\n      /** @type {AbstractType<any>} */\n      right.parent._map.get(right.parentSub) === right) {\n        /** @type {AbstractType<any>} */\n        right.parent._map.set(right.parentSub,\n        /** @type {Item} */\n        left);\n      }\n    }\n  }\n};\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\n\n\nvar tryGcDeleteSet = function tryGcDeleteSet(ds, store, gcFilter) {\n  var _iterator9 = _createForOfIteratorHelper(ds.clients.entries()),\n      _step9;\n\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var _step9$value = _slicedToArray(_step9.value, 2),\n          client = _step9$value[0],\n          deleteItems = _step9$value[1];\n\n      var structs =\n      /** @type {Array<GC|Item>} */\n      store.clients.get(client);\n\n      for (var di = deleteItems.length - 1; di >= 0; di--) {\n        var deleteItem = deleteItems[di];\n        var endDeleteItemClock = deleteItem.clock + deleteItem.len;\n\n        for (var si = findIndexSS(structs, deleteItem.clock), struct = structs[si]; si < structs.length && struct.id.clock < endDeleteItemClock; struct = structs[++si]) {\n          var _struct = structs[si];\n\n          if (deleteItem.clock + deleteItem.len <= _struct.id.clock) {\n            break;\n          }\n\n          if (_struct instanceof Item && _struct.deleted && !_struct.keep && gcFilter(_struct)) {\n            _struct.gc(store, false);\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n};\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\n\n\nvar tryMergeDeleteSet = function tryMergeDeleteSet(ds, store) {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiecy and so we don't miss any merge targets\n  ds.clients.forEach(function (deleteItems, client) {\n    var structs =\n    /** @type {Array<GC|Item>} */\n    store.clients.get(client);\n\n    for (var di = deleteItems.length - 1; di >= 0; di--) {\n      var deleteItem = deleteItems[di]; // start with merging the item next to the last deleted item\n\n      var mostRightIndexToCheck = min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));\n\n      for (var si = mostRightIndexToCheck, struct = structs[si]; si > 0 && struct.id.clock >= deleteItem.clock; struct = structs[--si]) {\n        tryToMergeWithLeft(structs, si);\n      }\n    }\n  });\n};\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\n\n\nvar tryGc = function tryGc(ds, store, gcFilter) {\n  tryGcDeleteSet(ds, store, gcFilter);\n  tryMergeDeleteSet(ds, store);\n};\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\n\n\nvar cleanupTransactions = function cleanupTransactions(transactionCleanups, i) {\n  if (i < transactionCleanups.length) {\n    var transaction = transactionCleanups[i];\n    var _doc = transaction.doc;\n    var store = _doc.store;\n    var ds = transaction.deleteSet;\n    var mergeStructs = transaction._mergeStructs;\n\n    try {\n      sortAndMergeDeleteSet(ds);\n      transaction.afterState = getStateVector(transaction.doc.store);\n      _doc._transaction = null;\n\n      _doc.emit('beforeObserverCalls', [transaction, _doc]);\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n\n\n      var fs = []; // observe events on changed types\n\n      transaction.changed.forEach(function (subs, itemtype) {\n        return fs.push(function () {\n          if (itemtype._item === null || !itemtype._item.deleted) {\n            itemtype._callObserver(transaction, subs);\n          }\n        });\n      });\n      fs.push(function () {\n        // deep observe events\n        transaction.changedParentTypes.forEach(function (events, type) {\n          return fs.push(function () {\n            // We need to think about the possibility that the user transforms the\n            // Y.Doc in the event.\n            if (type._item === null || !type._item.deleted) {\n              events = events.filter(function (event) {\n                return event.target._item === null || !event.target._item.deleted;\n              });\n              events.forEach(function (event) {\n                event.currentTarget = type;\n              }); // sort events by path length so that top-level events are fired first.\n\n              events.sort(function (event1, event2) {\n                return event1.path.length - event2.path.length;\n              }); // We don't need to check for events.length\n              // because we know it has at least one element\n\n              callEventHandlerListeners(type._dEH, events, transaction);\n            }\n          });\n        });\n        fs.push(function () {\n          return _doc.emit('afterTransaction', [transaction, _doc]);\n        });\n      });\n      callAll(fs, []);\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (_doc.gc) {\n        tryGcDeleteSet(ds, store, _doc.gcFilter);\n      }\n\n      tryMergeDeleteSet(ds, store); // on all affected store.clients props, try to merge\n\n      transaction.afterState.forEach(function (clock, client) {\n        var beforeClock = transaction.beforeState.get(client) || 0;\n\n        if (beforeClock !== clock) {\n          var structs =\n          /** @type {Array<GC|Item>} */\n          store.clients.get(client); // we iterate from right to left so we can safely remove entries\n\n          var firstChangePos = max(findIndexSS(structs, beforeClock), 1);\n\n          for (var _i4 = structs.length - 1; _i4 >= firstChangePos; _i4--) {\n            tryToMergeWithLeft(structs, _i4);\n          }\n        }\n      }); // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n\n      for (var _i5 = 0; _i5 < mergeStructs.length; _i5++) {\n        var _mergeStructs$_i5$id = mergeStructs[_i5].id,\n            client = _mergeStructs$_i5$id.client,\n            clock = _mergeStructs$_i5$id.clock;\n        var structs =\n        /** @type {Array<GC|Item>} */\n        store.clients.get(client);\n        var replacedStructPos = findIndexSS(structs, clock);\n\n        if (replacedStructPos + 1 < structs.length) {\n          tryToMergeWithLeft(structs, replacedStructPos + 1);\n        }\n\n        if (replacedStructPos > 0) {\n          tryToMergeWithLeft(structs, replacedStructPos);\n        }\n      }\n\n      if (!transaction.local && transaction.afterState.get(_doc.clientID) !== transaction.beforeState.get(_doc.clientID)) {\n        _doc.clientID = generateNewClientId();\n        print(ORANGE, BOLD, '[yjs] ', UNBOLD, RED, 'Changed the client-id because another client seems to be using it.');\n      } // @todo Merge all the transactions into one and provide send the data as a single update message\n\n\n      _doc.emit('afterTransactionCleanup', [transaction, _doc]);\n\n      if (_doc._observers.has('update')) {\n        var encoder = new UpdateEncoderV1();\n\n        var _hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n\n        if (_hasContent) {\n          _doc.emit('update', [encoder.toUint8Array(), transaction.origin, _doc, transaction]);\n        }\n      }\n\n      if (_doc._observers.has('updateV2')) {\n        var _encoder = new UpdateEncoderV2();\n\n        var _hasContent2 = writeUpdateMessageFromTransaction(_encoder, transaction);\n\n        if (_hasContent2) {\n          _doc.emit('updateV2', [_encoder.toUint8Array(), transaction.origin, _doc, transaction]);\n        }\n      }\n\n      transaction.subdocsAdded.forEach(function (subdoc) {\n        return _doc.subdocs.add(subdoc);\n      });\n      transaction.subdocsRemoved.forEach(function (subdoc) {\n        return _doc.subdocs.delete(subdoc);\n      });\n\n      _doc.emit('subdocs', [{\n        loaded: transaction.subdocsLoaded,\n        added: transaction.subdocsAdded,\n        removed: transaction.subdocsRemoved\n      }]);\n\n      transaction.subdocsRemoved.forEach(function (subdoc) {\n        return subdoc.destroy();\n      });\n\n      if (transactionCleanups.length <= i + 1) {\n        _doc._transactionCleanups = [];\n\n        _doc.emit('afterAllTransactions', [_doc, transactionCleanups]);\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1);\n      }\n    }\n  }\n};\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @param {Doc} doc\n * @param {function(Transaction):void} f\n * @param {any} [origin=true]\n *\n * @function\n */\n\n\nvar _transact = function _transact(doc, f) {\n  var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var local = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var transactionCleanups = doc._transactionCleanups;\n  var initialCall = false;\n\n  if (doc._transaction === null) {\n    initialCall = true;\n    doc._transaction = new Transaction(doc, origin, local);\n    transactionCleanups.push(doc._transaction);\n\n    if (transactionCleanups.length === 1) {\n      doc.emit('beforeAllTransactions', [doc]);\n    }\n\n    doc.emit('beforeTransaction', [doc._transaction, doc]);\n  }\n\n  try {\n    f(doc._transaction);\n  } finally {\n    if (initialCall && transactionCleanups[0] === doc._transaction) {\n      // The first transaction ended, now process observer calls.\n      // Observer call may create new transactions for which we need to call the observers and do cleanup.\n      // We don't want to nest these calls, so we execute these calls one after\n      // another.\n      // Also we need to ensure that all cleanups are called, even if the\n      // observes throw errors.\n      // This file is full of hacky try {} finally {} blocks to ensure that an\n      // event can throw errors and also that the cleanup is called.\n      cleanupTransactions(transactionCleanups, 0);\n    }\n  }\n};\n\nvar StackItem =\n/**\n * @param {DeleteSet} deletions\n * @param {DeleteSet} insertions\n */\nfunction StackItem(deletions, insertions) {\n  _classCallCheck(this, StackItem);\n\n  this.insertions = insertions;\n  this.deletions = deletions;\n  /**\n   * Use this to save and restore metadata like selection range\n   */\n\n  this.meta = new Map();\n};\n/**\n * @param {UndoManager} undoManager\n * @param {Array<StackItem>} stack\n * @param {string} eventType\n * @return {StackItem?}\n */\n\n\nvar popStackItem = function popStackItem(undoManager, stack, eventType) {\n  /**\n   * Whether a change happened\n   * @type {StackItem?}\n   */\n  var result = null;\n  /**\n   * Keep a reference to the transaction so we can fire the event with the changedParentTypes\n   * @type {any}\n   */\n\n  var _tr = null;\n  var doc = undoManager.doc;\n  var scope = undoManager.scope;\n\n  _transact(doc, function (transaction) {\n    var _loop3 = function _loop3() {\n      var store = doc.store;\n      var stackItem =\n      /** @type {StackItem} */\n      stack.pop();\n      /**\n       * @type {Set<Item>}\n       */\n\n      var itemsToRedo = new Set();\n      /**\n       * @type {Array<Item>}\n       */\n\n      var itemsToDelete = [];\n      var performedChange = false;\n      iterateDeletedStructs(transaction, stackItem.insertions, function (struct) {\n        if (struct instanceof Item) {\n          if (struct.redone !== null) {\n            var _followRedone2 = followRedone(store, struct.id),\n                item = _followRedone2.item,\n                diff = _followRedone2.diff;\n\n            if (diff > 0) {\n              item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff));\n            }\n\n            struct = item;\n          }\n\n          if (!struct.deleted && scope.some(function (type) {\n            return isParentOf(type,\n            /** @type {Item} */\n            struct);\n          })) {\n            itemsToDelete.push(struct);\n          }\n        }\n      });\n      iterateDeletedStructs(transaction, stackItem.deletions, function (struct) {\n        if (struct instanceof Item && scope.some(function (type) {\n          return isParentOf(type, struct);\n        }) && // Never redo structs in stackItem.insertions because they were created and deleted in the same capture interval.\n        !isDeleted(stackItem.insertions, struct.id)) {\n          itemsToRedo.add(struct);\n        }\n      });\n      itemsToRedo.forEach(function (struct) {\n        performedChange = redoItem(transaction, struct, itemsToRedo) !== null || performedChange;\n      }); // We want to delete in reverse order so that children are deleted before\n      // parents, so we have more information available when items are filtered.\n\n      for (var i = itemsToDelete.length - 1; i >= 0; i--) {\n        var item = itemsToDelete[i];\n\n        if (undoManager.deleteFilter(item)) {\n          item.delete(transaction);\n          performedChange = true;\n        }\n      }\n\n      result = stackItem;\n    };\n\n    while (stack.length > 0 && result === null) {\n      _loop3();\n    }\n\n    transaction.changed.forEach(function (subProps, type) {\n      // destroy search marker if necessary\n      if (subProps.has(null) && type._searchMarker) {\n        type._searchMarker.length = 0;\n      }\n    });\n    _tr = transaction;\n  }, undoManager);\n\n  if (result != null) {\n    var changedParentTypes = _tr.changedParentTypes;\n    undoManager.emit('stack-item-popped', [{\n      stackItem: result,\n      type: eventType,\n      changedParentTypes: changedParentTypes\n    }, undoManager]);\n  }\n\n  return result;\n};\n/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter whan an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n */\n\n/**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {Observable<'stack-item-added'|'stack-item-popped'>}\n */\n\n\nvar UndoManager = /*#__PURE__*/function (_Observable3) {\n  _inherits(UndoManager, _Observable3);\n\n  var _super7 = _createSuper(UndoManager);\n\n  /**\n   * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types\n   * @param {UndoManagerOptions} options\n   */\n  function UndoManager(typeScope) {\n    var _this10;\n\n    var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref5$captureTimeout = _ref5.captureTimeout,\n        captureTimeout = _ref5$captureTimeout === void 0 ? 500 : _ref5$captureTimeout,\n        _ref5$deleteFilter = _ref5.deleteFilter,\n        deleteFilter = _ref5$deleteFilter === void 0 ? function () {\n      return true;\n    } : _ref5$deleteFilter,\n        _ref5$trackedOrigins = _ref5.trackedOrigins,\n        trackedOrigins = _ref5$trackedOrigins === void 0 ? new Set([null]) : _ref5$trackedOrigins;\n\n    _classCallCheck(this, UndoManager);\n\n    _this10 = _super7.call(this);\n    _this10.scope = typeScope instanceof Array ? typeScope : [typeScope];\n    _this10.deleteFilter = deleteFilter;\n    trackedOrigins.add(_assertThisInitialized(_this10));\n    _this10.trackedOrigins = trackedOrigins;\n    /**\n     * @type {Array<StackItem>}\n     */\n\n    _this10.undoStack = [];\n    /**\n     * @type {Array<StackItem>}\n     */\n\n    _this10.redoStack = [];\n    /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */\n\n    _this10.undoing = false;\n    _this10.redoing = false;\n    _this10.doc =\n    /** @type {Doc} */\n    _this10.scope[0].doc;\n    _this10.lastChange = 0;\n\n    _this10.doc.on('afterTransaction',\n    /** @param {Transaction} transaction */\n    function (transaction) {\n      // Only track certain transactions\n      if (!_this10.scope.some(function (type) {\n        return transaction.changedParentTypes.has(type);\n      }) || !_this10.trackedOrigins.has(transaction.origin) && (!transaction.origin || !_this10.trackedOrigins.has(transaction.origin.constructor))) {\n        return;\n      }\n\n      var undoing = _this10.undoing;\n      var redoing = _this10.redoing;\n      var stack = undoing ? _this10.redoStack : _this10.undoStack;\n\n      if (undoing) {\n        _this10.stopCapturing(); // next undo should not be appended to last stack item\n\n      } else if (!redoing) {\n        // neither undoing nor redoing: delete redoStack\n        _this10.redoStack = [];\n      }\n\n      var insertions = new DeleteSet();\n      transaction.afterState.forEach(function (endClock, client) {\n        var startClock = transaction.beforeState.get(client) || 0;\n        var len = endClock - startClock;\n\n        if (len > 0) {\n          addToDeleteSet(insertions, client, startClock, len);\n        }\n      });\n      var now = getUnixTime();\n\n      if (now - _this10.lastChange < captureTimeout && stack.length > 0 && !undoing && !redoing) {\n        // append change to last stack op\n        var lastOp = stack[stack.length - 1];\n        lastOp.deletions = mergeDeleteSets([lastOp.deletions, transaction.deleteSet]);\n        lastOp.insertions = mergeDeleteSets([lastOp.insertions, insertions]);\n      } else {\n        // create a new stack op\n        stack.push(new StackItem(transaction.deleteSet, insertions));\n      }\n\n      if (!undoing && !redoing) {\n        _this10.lastChange = now;\n      } // make sure that deleted structs are not gc'd\n\n\n      iterateDeletedStructs(transaction, transaction.deleteSet,\n      /** @param {Item|GC} item */\n      function (item) {\n        if (item instanceof Item && _this10.scope.some(function (type) {\n          return isParentOf(type, item);\n        })) {\n          keepItem(item, true);\n        }\n      });\n\n      _this10.emit('stack-item-added', [{\n        stackItem: stack[stack.length - 1],\n        origin: transaction.origin,\n        type: undoing ? 'redo' : 'undo',\n        changedParentTypes: transaction.changedParentTypes\n      }, _assertThisInitialized(_this10)]);\n    });\n\n    return _this10;\n  }\n\n  _createClass(UndoManager, [{\n    key: \"clear\",\n    value: function clear() {\n      var _this11 = this;\n\n      this.doc.transact(function (transaction) {\n        /**\n         * @param {StackItem} stackItem\n         */\n        var clearItem = function clearItem(stackItem) {\n          iterateDeletedStructs(transaction, stackItem.deletions, function (item) {\n            if (item instanceof Item && _this11.scope.some(function (type) {\n              return isParentOf(type, item);\n            })) {\n              keepItem(item, false);\n            }\n          });\n        };\n\n        _this11.undoStack.forEach(clearItem);\n\n        _this11.redoStack.forEach(clearItem);\n      });\n      this.undoStack = [];\n      this.redoStack = [];\n    }\n    /**\n     * UndoManager merges Undo-StackItem if they are created within time-gap\n     * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n     * StackItem won't be merged.\n     *\n     *\n     * @example\n     *     // without stopCapturing\n     *     ytext.insert(0, 'a')\n     *     ytext.insert(1, 'b')\n     *     um.undo()\n     *     ytext.toString() // => '' (note that 'ab' was removed)\n     *     // with stopCapturing\n     *     ytext.insert(0, 'a')\n     *     um.stopCapturing()\n     *     ytext.insert(0, 'b')\n     *     um.undo()\n     *     ytext.toString() // => 'a' (note that only 'b' was removed)\n     *\n     */\n\n  }, {\n    key: \"stopCapturing\",\n    value: function stopCapturing() {\n      this.lastChange = 0;\n    }\n    /**\n     * Undo last changes on type.\n     *\n     * @return {StackItem?} Returns StackItem if a change was applied\n     */\n\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      this.undoing = true;\n      var res;\n\n      try {\n        res = popStackItem(this, this.undoStack, 'undo');\n      } finally {\n        this.undoing = false;\n      }\n\n      return res;\n    }\n    /**\n     * Redo last undo operation.\n     *\n     * @return {StackItem?} Returns StackItem if a change was applied\n     */\n\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      this.redoing = true;\n      var res;\n\n      try {\n        res = popStackItem(this, this.redoStack, 'redo');\n      } finally {\n        this.redoing = false;\n      }\n\n      return res;\n    }\n  }]);\n\n  return UndoManager;\n}(Observable);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n */\n\n\nfunction lazyStructReaderGenerator(decoder) {\n  var numOfStateUpdates, i, numberOfStructs, client, clock, _i6, info, len, cantCopyParentInfo, struct, _len2;\n\n  return _regeneratorRuntime.wrap(function lazyStructReaderGenerator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          numOfStateUpdates = readVarUint(decoder.restDecoder);\n          i = 0;\n\n        case 2:\n          if (!(i < numOfStateUpdates)) {\n            _context.next = 34;\n            break;\n          }\n\n          numberOfStructs = readVarUint(decoder.restDecoder);\n          client = decoder.readClient();\n          clock = readVarUint(decoder.restDecoder);\n          _i6 = 0;\n\n        case 7:\n          if (!(_i6 < numberOfStructs)) {\n            _context.next = 31;\n            break;\n          }\n\n          info = decoder.readInfo(); // @todo use switch instead of ifs\n\n          if (!(info === 10)) {\n            _context.next = 16;\n            break;\n          }\n\n          len = readVarUint(decoder.restDecoder);\n          _context.next = 13;\n          return new Skip(createID(client, clock), len);\n\n        case 13:\n          clock += len;\n          _context.next = 28;\n          break;\n\n        case 16:\n          if (!((BITS5 & info) !== 0)) {\n            _context.next = 24;\n            break;\n          }\n\n          cantCopyParentInfo = (info & (BIT7 | BIT8)) === 0; // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n\n          struct = new Item(createID(client, clock), null, // left\n          (info & BIT8) === BIT8 ? decoder.readLeftID() : null, // origin\n          null, // right\n          (info & BIT7) === BIT7 ? decoder.readRightID() : null, // right origin\n          // @ts-ignore Force writing a string here.\n          cantCopyParentInfo ? decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID() : null, // parent\n          cantCopyParentInfo && (info & BIT6) === BIT6 ? decoder.readString() : null, // parentSub\n          readItemContent(decoder, info) // item content\n          );\n          _context.next = 21;\n          return struct;\n\n        case 21:\n          clock += struct.length;\n          _context.next = 28;\n          break;\n\n        case 24:\n          _len2 = decoder.readLen();\n          _context.next = 27;\n          return new GC(createID(client, clock), _len2);\n\n        case 27:\n          clock += _len2;\n\n        case 28:\n          _i6++;\n          _context.next = 7;\n          break;\n\n        case 31:\n          i++;\n          _context.next = 2;\n          break;\n\n        case 34:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar LazyStructReader = /*#__PURE__*/function () {\n  /**\n   * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n   * @param {boolean} filterSkips\n   */\n  function LazyStructReader(decoder, filterSkips) {\n    _classCallCheck(this, LazyStructReader);\n\n    this.gen = lazyStructReaderGenerator(decoder);\n    /**\n     * @type {null | Item | Skip | GC}\n     */\n\n    this.curr = null;\n    this.done = false;\n    this.filterSkips = filterSkips;\n    this.next();\n  }\n  /**\n   * @return {Item | GC | Skip |null}\n   */\n\n\n  _createClass(LazyStructReader, [{\n    key: \"next\",\n    value: function next() {\n      // ignore \"Skip\" structs\n      do {\n        this.curr = this.gen.next().value || null;\n      } while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip);\n\n      return this.curr;\n    }\n  }]);\n\n  return LazyStructReader;\n}();\n/**\n * @param {Uint8Array} update\n *\n */\n\n\nvar logUpdate = function logUpdate(update) {\n  return logUpdateV2(update, UpdateDecoderV1);\n};\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\n\n\nvar logUpdateV2 = function logUpdateV2(update) {\n  var YDecoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UpdateDecoderV2;\n  var structs = [];\n  var updateDecoder = new YDecoder(createDecoder(update));\n  var lazyDecoder = new LazyStructReader(updateDecoder, false);\n\n  for (var curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr);\n  }\n\n  print('Structs: ', structs);\n  var ds = readDeleteSet(updateDecoder);\n  print('DeleteSet: ', ds);\n};\n\nvar LazyStructWriter =\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n */\nfunction LazyStructWriter(encoder) {\n  _classCallCheck(this, LazyStructWriter);\n\n  this.currClient = 0;\n  this.startClock = 0;\n  this.written = 0;\n  this.encoder = encoder;\n  /**\n   * We want to write operations lazily, but also we need to know beforehand how many operations we want to write for each client.\n   *\n   * This kind of meta-information (#clients, #structs-per-client-written) is written to the restEncoder.\n   *\n   * We fragment the restEncoder and store a slice of it per-client until we know how many clients there are.\n   * When we flush (toUint8Array) we write the restEncoder using the fragments and the meta-information.\n   *\n   * @type {Array<{ written: number, restEncoder: Uint8Array }>}\n   */\n\n  this.clientStructs = [];\n};\n/**\n * @param {Array<Uint8Array>} updates\n * @return {Uint8Array}\n */\n\n\nvar mergeUpdates = function mergeUpdates(updates) {\n  return mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1);\n};\n/**\n * @param {Uint8Array} update\n * @param {typeof DSEncoderV1 | typeof DSEncoderV2} YEncoder\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {Uint8Array}\n */\n\n\nvar encodeStateVectorFromUpdateV2 = function encodeStateVectorFromUpdateV2(update) {\n  var YEncoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DSEncoderV2;\n  var YDecoder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UpdateDecoderV2;\n  var encoder = new YEncoder();\n  var updateDecoder = new LazyStructReader(new YDecoder(createDecoder(update)), true);\n  var curr = updateDecoder.curr;\n\n  if (curr !== null) {\n    var size = 1;\n    var currClient = curr.id.client;\n    var currClock = curr.id.clock;\n    var stopCounting = false;\n\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        size++; // We found a new client\n        // write what we have to the encoder\n\n        writeVarUint(encoder.restEncoder, currClient);\n        writeVarUint(encoder.restEncoder, currClock);\n        currClient = curr.id.client;\n        stopCounting = false;\n      }\n\n      if (curr.constructor === Skip) {\n        stopCounting = true;\n      }\n\n      if (!stopCounting) {\n        currClock = curr.id.clock + curr.length;\n      }\n    } // write what we have\n\n\n    writeVarUint(encoder.restEncoder, currClient);\n    writeVarUint(encoder.restEncoder, currClock); // prepend the size of the state vector\n\n    var enc = createEncoder();\n    writeVarUint(enc, size);\n    writeBinaryEncoder(enc, encoder.restEncoder);\n    encoder.restEncoder = enc;\n    return encoder.toUint8Array();\n  } else {\n    writeVarUint(encoder.restEncoder, 0);\n    return encoder.toUint8Array();\n  }\n};\n/**\n * @param {Uint8Array} update\n * @return {Uint8Array}\n */\n\n\nvar encodeStateVectorFromUpdate = function encodeStateVectorFromUpdate(update) {\n  return encodeStateVectorFromUpdateV2(update, DSEncoderV1, UpdateDecoderV1);\n};\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\n\n\nvar parseUpdateMetaV2 = function parseUpdateMetaV2(update) {\n  var YDecoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UpdateDecoderV2;\n\n  /**\n   * @type {Map<number, number>}\n   */\n  var from = new Map();\n  /**\n   * @type {Map<number, number>}\n   */\n\n  var to = new Map();\n  var updateDecoder = new LazyStructReader(new YDecoder(createDecoder(update)), false);\n  var curr = updateDecoder.curr;\n\n  if (curr !== null) {\n    var currClient = curr.id.client;\n    var currClock = curr.id.clock; // write the beginning to `from`\n\n    from.set(currClient, currClock);\n\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        // We found a new client\n        // write the end to `to`\n        to.set(currClient, currClock); // write the beginning to `from`\n\n        from.set(curr.id.client, curr.id.clock); // update currClient\n\n        currClient = curr.id.client;\n      }\n\n      currClock = curr.id.clock + curr.length;\n    } // write the end to `to`\n\n\n    to.set(currClient, currClock);\n  }\n\n  return {\n    from: from,\n    to: to\n  };\n};\n/**\n * @param {Uint8Array} update\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\n\n\nvar parseUpdateMeta = function parseUpdateMeta(update) {\n  return parseUpdateMetaV2(update, UpdateDecoderV1);\n};\n/**\n * This method is intended to slice any kind of struct and retrieve the right part.\n * It does not handle side-effects, so it should only be used by the lazy-encoder.\n *\n * @param {Item | GC | Skip} left\n * @param {number} diff\n * @return {Item | GC}\n */\n\n\nvar sliceStruct = function sliceStruct(left, diff) {\n  if (left.constructor === GC) {\n    var _left$id = left.id,\n        client = _left$id.client,\n        clock = _left$id.clock;\n    return new GC(createID(client, clock + diff), left.length - diff);\n  } else if (left.constructor === Skip) {\n    var _left$id2 = left.id,\n        _client2 = _left$id2.client,\n        _clock2 = _left$id2.clock;\n    return new Skip(createID(_client2, _clock2 + diff), left.length - diff);\n  } else {\n    var leftItem =\n    /** @type {Item} */\n    left;\n    var _leftItem$id = leftItem.id,\n        _client3 = _leftItem$id.client,\n        _clock3 = _leftItem$id.clock;\n    return new Item(createID(_client3, _clock3 + diff), null, createID(_client3, _clock3 + diff - 1), null, leftItem.rightOrigin, leftItem.parent, leftItem.parentSub, leftItem.content.splice(diff));\n  }\n};\n/**\n *\n * This function works similarly to `readUpdateV2`.\n *\n * @param {Array<Uint8Array>} updates\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n * @return {Uint8Array}\n */\n\n\nvar mergeUpdatesV2 = function mergeUpdatesV2(updates) {\n  var YDecoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UpdateDecoderV2;\n  var YEncoder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UpdateEncoderV2;\n  var updateDecoders = updates.map(function (update) {\n    return new YDecoder(createDecoder(update));\n  });\n  var lazyStructDecoders = updateDecoders.map(function (decoder) {\n    return new LazyStructReader(decoder, true);\n  });\n  /**\n   * @todo we don't need offset because we always slice before\n   * @type {null | { struct: Item | GC | Skip, offset: number }}\n   */\n\n  var currWrite = null;\n  var updateEncoder = new YEncoder(); // write structs lazily\n\n  var lazyStructEncoder = new LazyStructWriter(updateEncoder); // Note: We need to ensure that all lazyStructDecoders are fully consumed\n  // Note: Should merge document updates whenever possible - even from different updates\n  // Note: Should handle that some operations cannot be applied yet ()\n\n  while (true) {\n    // Write higher clients first ⇒ sort by clientID & clock and remove decoders without content\n    lazyStructDecoders = lazyStructDecoders.filter(function (dec) {\n      return dec.curr !== null;\n    });\n    lazyStructDecoders.sort(\n    /** @type {function(any,any):number} */\n    function (dec1, dec2) {\n      if (dec1.curr.id.client === dec2.curr.id.client) {\n        var clockDiff = dec1.curr.id.clock - dec2.curr.id.clock;\n\n        if (clockDiff === 0) {\n          return dec1.curr.constructor === dec2.curr.constructor ? 0 : dec1.curr.constructor === Skip ? 1 : -1;\n        } else {\n          return clockDiff;\n        }\n      } else {\n        return dec2.curr.id.client - dec1.curr.id.client;\n      }\n    });\n\n    if (lazyStructDecoders.length === 0) {\n      break;\n    }\n\n    var currDecoder = lazyStructDecoders[0]; // write from currDecoder until the next operation is from another client or if filler-struct\n    // then we need to reorder the decoders and find the next operation to write\n\n    var firstClient =\n    /** @type {Item | GC} */\n    currDecoder.curr.id.client;\n\n    if (currWrite !== null) {\n      var curr =\n      /** @type {Item | GC | null} */\n      currDecoder.curr; // iterate until we find something that we haven't written already\n      // remember: first the high client-ids are written\n\n      while (curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client) {\n        curr = currDecoder.next();\n      }\n\n      if (curr === null || curr.id.client !== firstClient) {\n        continue;\n      }\n\n      if (firstClient !== currWrite.struct.id.client) {\n        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n        currWrite = {\n          struct: curr,\n          offset: 0\n        };\n        currDecoder.next();\n      } else {\n        if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {\n          // @todo write currStruct & set currStruct = Skip(clock = currStruct.id.clock + currStruct.length, length = curr.id.clock - self.clock)\n          if (currWrite.struct.constructor === Skip) {\n            // extend existing skip\n            currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock;\n          } else {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n            var diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length;\n            /**\n             * @type {Skip}\n             */\n\n            var struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff);\n            currWrite = {\n              struct: struct,\n              offset: 0\n            };\n          }\n        } else {\n          // if (currWrite.struct.id.clock + currWrite.struct.length >= curr.id.clock) {\n          var _diff = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock;\n\n          if (_diff > 0) {\n            if (currWrite.struct.constructor === Skip) {\n              // prefer to slice Skip because the other struct might contain more information\n              currWrite.struct.length -= _diff;\n            } else {\n              curr = sliceStruct(curr, _diff);\n            }\n          }\n\n          if (!currWrite.struct.mergeWith(\n          /** @type {any} */\n          curr)) {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n            currWrite = {\n              struct: curr,\n              offset: 0\n            };\n            currDecoder.next();\n          }\n        }\n      }\n    } else {\n      currWrite = {\n        struct:\n        /** @type {Item | GC} */\n        currDecoder.curr,\n        offset: 0\n      };\n      currDecoder.next();\n    }\n\n    for (var next = currDecoder.curr; next !== null && next.id.client === firstClient && next.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next.constructor !== Skip; next = currDecoder.next()) {\n      writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n      currWrite = {\n        struct: next,\n        offset: 0\n      };\n    }\n  }\n\n  if (currWrite !== null) {\n    writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n    currWrite = null;\n  }\n\n  finishLazyStructWriting(lazyStructEncoder);\n  var dss = updateDecoders.map(function (decoder) {\n    return readDeleteSet(decoder);\n  });\n  var ds = mergeDeleteSets(dss);\n  writeDeleteSet(updateEncoder, ds);\n  return updateEncoder.toUint8Array();\n};\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n */\n\n\nvar diffUpdateV2 = function diffUpdateV2(update, sv) {\n  var YDecoder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UpdateDecoderV2;\n  var YEncoder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : UpdateEncoderV2;\n  var state = decodeStateVector(sv);\n  var encoder = new YEncoder();\n  var lazyStructWriter = new LazyStructWriter(encoder);\n  var decoder = new YDecoder(createDecoder(update));\n  var reader = new LazyStructReader(decoder, false);\n\n  while (reader.curr) {\n    var curr = reader.curr;\n    var currClient = curr.id.client;\n    var svClock = state.get(currClient) || 0;\n\n    if (reader.curr.constructor === Skip) {\n      // the first written struct shouldn't be a skip\n      reader.next();\n      continue;\n    }\n\n    if (curr.id.clock + curr.length > svClock) {\n      writeStructToLazyStructWriter(lazyStructWriter, curr, max(svClock - curr.id.clock, 0));\n      reader.next();\n\n      while (reader.curr && reader.curr.id.client === currClient) {\n        writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0);\n        reader.next();\n      }\n    } else {\n      // read until something new comes up\n      while (reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock) {\n        reader.next();\n      }\n    }\n  }\n\n  finishLazyStructWriting(lazyStructWriter); // write ds\n\n  var ds = readDeleteSet(decoder);\n  writeDeleteSet(encoder, ds);\n  return encoder.toUint8Array();\n};\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n */\n\n\nvar diffUpdate = function diffUpdate(update, sv) {\n  return diffUpdateV2(update, sv, UpdateDecoderV1, UpdateEncoderV1);\n};\n/**\n * @param {LazyStructWriter} lazyWriter\n */\n\n\nvar flushLazyStructWriter = function flushLazyStructWriter(lazyWriter) {\n  if (lazyWriter.written > 0) {\n    lazyWriter.clientStructs.push({\n      written: lazyWriter.written,\n      restEncoder: _toUint8Array(lazyWriter.encoder.restEncoder)\n    });\n    lazyWriter.encoder.restEncoder = createEncoder();\n    lazyWriter.written = 0;\n  }\n};\n/**\n * @param {LazyStructWriter} lazyWriter\n * @param {Item | GC} struct\n * @param {number} offset\n */\n\n\nvar writeStructToLazyStructWriter = function writeStructToLazyStructWriter(lazyWriter, struct, offset) {\n  // flush curr if we start another client\n  if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) {\n    flushLazyStructWriter(lazyWriter);\n  }\n\n  if (lazyWriter.written === 0) {\n    lazyWriter.currClient = struct.id.client; // write next client\n\n    lazyWriter.encoder.writeClient(struct.id.client); // write startClock\n\n    writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset);\n  }\n\n  struct.write(lazyWriter.encoder, offset);\n  lazyWriter.written++;\n};\n/**\n * Call this function when we collected all parts and want to\n * put all the parts together. After calling this method,\n * you can continue using the UpdateEncoder.\n *\n * @param {LazyStructWriter} lazyWriter\n */\n\n\nvar finishLazyStructWriting = function finishLazyStructWriting(lazyWriter) {\n  flushLazyStructWriter(lazyWriter); // this is a fresh encoder because we called flushCurr\n\n  var restEncoder = lazyWriter.encoder.restEncoder;\n  /**\n   * Now we put all the fragments together.\n   * This works similarly to `writeClientsStructs`\n   */\n  // write # states that were updated - i.e. the clients\n\n  writeVarUint(restEncoder, lazyWriter.clientStructs.length);\n\n  for (var i = 0; i < lazyWriter.clientStructs.length; i++) {\n    var partStructs = lazyWriter.clientStructs[i];\n    /**\n     * Works similarly to `writeStructs`\n     */\n    // write # encoded structs\n\n    writeVarUint(restEncoder, partStructs.written); // write the rest of the fragment\n\n    writeUint8Array(restEncoder, partStructs.restEncoder);\n  }\n};\n/**\n * YEvent describes the changes on a YType.\n */\n\n\nvar YEvent = /*#__PURE__*/function () {\n  /**\n   * @param {AbstractType<any>} target The changed type.\n   * @param {Transaction} transaction\n   */\n  function YEvent(target, transaction) {\n    _classCallCheck(this, YEvent);\n\n    /**\n     * The type on which this event was created on.\n     * @type {AbstractType<any>}\n     */\n    this.target = target;\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n\n    this.currentTarget = target;\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n\n    this.transaction = transaction;\n    /**\n     * @type {Object|null}\n     */\n\n    this._changes = null;\n  }\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n\n\n  _createClass(YEvent, [{\n    key: \"path\",\n    get: function get() {\n      // @ts-ignore _item is defined because target is integrated\n      return getPathTo(this.currentTarget, this.target);\n    }\n    /**\n     * Check if a struct is deleted by this event.\n     *\n     * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n     *\n     * @param {AbstractStruct} struct\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"deletes\",\n    value: function deletes(struct) {\n      return isDeleted(this.transaction.deleteSet, struct.id);\n    }\n    /**\n     * Check if a struct is added by this event.\n     *\n     * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n     *\n     * @param {AbstractStruct} struct\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"adds\",\n    value: function adds(struct) {\n      return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0);\n    }\n    /**\n     * @return {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert:Array<any>}|{delete:number}|{retain:number}>}}\n     */\n\n  }, {\n    key: \"changes\",\n    get: function get() {\n      var _this12 = this;\n\n      var changes = this._changes;\n\n      if (changes === null) {\n        var target = this.target;\n        var added = create$1();\n        var deleted = create$1();\n        /**\n         * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n         */\n\n        var delta = [];\n        /**\n         * @type {Map<string,{ action: 'add' | 'update' | 'delete', oldValue: any}>}\n         */\n\n        var keys = new Map();\n        changes = {\n          added: added,\n          deleted: deleted,\n          delta: delta,\n          keys: keys\n        };\n        var changed =\n        /** @type Set<string|null> */\n        this.transaction.changed.get(target);\n\n        if (changed.has(null)) {\n          /**\n           * @type {any}\n           */\n          var lastOp = null;\n\n          var packOp = function packOp() {\n            if (lastOp) {\n              delta.push(lastOp);\n            }\n          };\n\n          for (var item = target._start; item !== null; item = item.right) {\n            if (item.deleted) {\n              if (this.deletes(item) && !this.adds(item)) {\n                if (lastOp === null || lastOp.delete === undefined) {\n                  packOp();\n                  lastOp = {\n                    delete: 0\n                  };\n                }\n\n                lastOp.delete += item.length;\n                deleted.add(item);\n              } // else nop\n\n            } else {\n              if (this.adds(item)) {\n                if (lastOp === null || lastOp.insert === undefined) {\n                  packOp();\n                  lastOp = {\n                    insert: []\n                  };\n                }\n\n                lastOp.insert = lastOp.insert.concat(item.content.getContent());\n                added.add(item);\n              } else {\n                if (lastOp === null || lastOp.retain === undefined) {\n                  packOp();\n                  lastOp = {\n                    retain: 0\n                  };\n                }\n\n                lastOp.retain += item.length;\n              }\n            }\n          }\n\n          if (lastOp !== null && lastOp.retain === undefined) {\n            packOp();\n          }\n        }\n\n        changed.forEach(function (key) {\n          if (key !== null) {\n            var _item =\n            /** @type {Item} */\n            target._map.get(key);\n            /**\n             * @type {'delete' | 'add' | 'update'}\n             */\n\n\n            var action;\n            var oldValue;\n\n            if (_this12.adds(_item)) {\n              var prev = _item.left;\n\n              while (prev !== null && _this12.adds(prev)) {\n                prev = prev.left;\n              }\n\n              if (_this12.deletes(_item)) {\n                if (prev !== null && _this12.deletes(prev)) {\n                  action = 'delete';\n                  oldValue = last(prev.content.getContent());\n                } else {\n                  return;\n                }\n              } else {\n                if (prev !== null && _this12.deletes(prev)) {\n                  action = 'update';\n                  oldValue = last(prev.content.getContent());\n                } else {\n                  action = 'add';\n                  oldValue = undefined;\n                }\n              }\n            } else {\n              if (_this12.deletes(_item)) {\n                action = 'delete';\n                oldValue = last(\n                /** @type {Item} */\n                _item.content.getContent());\n              } else {\n                return; // nop\n              }\n            }\n\n            keys.set(key, {\n              action: action,\n              oldValue: oldValue\n            });\n          }\n        });\n        this._changes = changes;\n      }\n\n      return (\n        /** @type {any} */\n        changes\n      );\n    }\n  }]);\n\n  return YEvent;\n}();\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\n\n\nvar getPathTo = function getPathTo(parent, child) {\n  var path = [];\n\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub);\n    } else {\n      // parent is array-ish\n      var i = 0;\n      var c =\n      /** @type {AbstractType<any>} */\n      child._item.parent._start;\n\n      while (c !== child._item && c !== null) {\n        if (!c.deleted) {\n          i++;\n        }\n\n        c = c.right;\n      }\n\n      path.unshift(i);\n    }\n\n    child =\n    /** @type {AbstractType<any>} */\n    child._item.parent;\n  }\n\n  return path;\n};\n\nvar maxSearchMarker = 80;\n/**\n * A unique timestamp that identifies each marker.\n *\n * Time is relative,.. this is more like an ever-increasing clock.\n *\n * @type {number}\n */\n\nvar globalSearchMarkerTimestamp = 0;\n\nvar ArraySearchMarker =\n/**\n * @param {Item} p\n * @param {number} index\n */\nfunction ArraySearchMarker(p, index) {\n  _classCallCheck(this, ArraySearchMarker);\n\n  p.marker = true;\n  this.p = p;\n  this.index = index;\n  this.timestamp = globalSearchMarkerTimestamp++;\n};\n/**\n * @param {ArraySearchMarker} marker\n */\n\n\nvar refreshMarkerTimestamp = function refreshMarkerTimestamp(marker) {\n  marker.timestamp = globalSearchMarkerTimestamp++;\n};\n/**\n * This is rather complex so this function is the only thing that should overwrite a marker\n *\n * @param {ArraySearchMarker} marker\n * @param {Item} p\n * @param {number} index\n */\n\n\nvar overwriteMarker = function overwriteMarker(marker, p, index) {\n  marker.p.marker = false;\n  marker.p = p;\n  p.marker = true;\n  marker.index = index;\n  marker.timestamp = globalSearchMarkerTimestamp++;\n};\n/**\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {Item} p\n * @param {number} index\n */\n\n\nvar markPosition = function markPosition(searchMarker, p, index) {\n  if (searchMarker.length >= maxSearchMarker) {\n    // override oldest marker (we don't want to create more objects)\n    var marker = searchMarker.reduce(function (a, b) {\n      return a.timestamp < b.timestamp ? a : b;\n    });\n    overwriteMarker(marker, p, index);\n    return marker;\n  } else {\n    // create new marker\n    var pm = new ArraySearchMarker(p, index);\n    searchMarker.push(pm);\n    return pm;\n  }\n};\n/**\n * Search marker help us to find positions in the associative array faster.\n *\n * They speed up the process of finding a position without much bookkeeping.\n *\n * A maximum of `maxSearchMarker` objects are created.\n *\n * This function always returns a refreshed marker (updated timestamp)\n *\n * @param {AbstractType<any>} yarray\n * @param {number} index\n */\n\n\nvar findMarker = function findMarker(yarray, index) {\n  if (yarray._start === null || index === 0 || yarray._searchMarker === null) {\n    return null;\n  }\n\n  var marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce(function (a, b) {\n    return abs(index - a.index) < abs(index - b.index) ? a : b;\n  });\n  var p = yarray._start;\n  var pindex = 0;\n\n  if (marker !== null) {\n    p = marker.p;\n    pindex = marker.index;\n    refreshMarkerTimestamp(marker); // we used it, we might need to use it again\n  } // iterate to right if possible\n\n\n  while (p.right !== null && pindex < index) {\n    if (!p.deleted && p.countable) {\n      if (index < pindex + p.length) {\n        break;\n      }\n\n      pindex += p.length;\n    }\n\n    p = p.right;\n  } // iterate to left if necessary (might be that pindex > index)\n\n\n  while (p.left !== null && pindex > index) {\n    p = p.left;\n\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  } // we want to make sure that p can't be merged with left, because that would screw up everything\n  // in that cas just return what we have (it is most likely the best marker anyway)\n  // iterate to left until p can't be merged with left\n\n\n  while (p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock) {\n    p = p.left;\n\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  } // @todo remove!\n  // assure position\n  // {\n  //   let start = yarray._start\n  //   let pos = 0\n  //   while (start !== p) {\n  //     if (!start.deleted && start.countable) {\n  //       pos += start.length\n  //     }\n  //     start = /** @type {Item} */ (start.right)\n  //   }\n  //   if (pos !== pindex) {\n  //     debugger\n  //     throw new Error('Gotcha position fail!')\n  //   }\n  // }\n  // if (marker) {\n  //   if (window.lengthes == null) {\n  //     window.lengthes = []\n  //     window.getLengthes = () => window.lengthes.sort((a, b) => a - b)\n  //   }\n  //   window.lengthes.push(marker.index - pindex)\n  //   console.log('distance', marker.index - pindex, 'len', p && p.parent.length)\n  // }\n\n\n  if (marker !== null && abs(marker.index - pindex) <\n  /** @type {YText|YArray<any>} */\n  p.parent.length / maxSearchMarker) {\n    // adjust existing marker\n    overwriteMarker(marker, p, pindex);\n    return marker;\n  } else {\n    // create new marker\n    return markPosition(yarray._searchMarker, p, pindex);\n  }\n};\n/**\n * Update markers when a change happened.\n *\n * This should be called before doing a deletion!\n *\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {number} index\n * @param {number} len If insertion, len is positive. If deletion, len is negative.\n */\n\n\nvar updateMarkerChanges = function updateMarkerChanges(searchMarker, index, len) {\n  for (var i = searchMarker.length - 1; i >= 0; i--) {\n    var m = searchMarker[i];\n\n    if (len > 0) {\n      /**\n       * @type {Item|null}\n       */\n      var p = m.p;\n      p.marker = false; // Ideally we just want to do a simple position comparison, but this will only work if\n      // search markers don't point to deleted items for formats.\n      // Iterate marker to prev undeleted countable position so we know what to do when updating a position\n\n      while (p && (p.deleted || !p.countable)) {\n        p = p.left;\n\n        if (p && !p.deleted && p.countable) {\n          // adjust position. the loop should break now\n          m.index -= p.length;\n        }\n      }\n\n      if (p === null || p.marker === true) {\n        // remove search marker if updated position is null or if position is already marked\n        searchMarker.splice(i, 1);\n        continue;\n      }\n\n      m.p = p;\n      p.marker = true;\n    }\n\n    if (index < m.index || len > 0 && index === m.index) {\n      // a simple index <= m.index check would actually suffice\n      m.index = max(index, m.index + len);\n    }\n  }\n};\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */\n\n\nvar getTypeChildren = function getTypeChildren(t) {\n  var s = t._start;\n  var arr = [];\n\n  while (s) {\n    arr.push(s);\n    s = s.right;\n  }\n\n  return arr;\n};\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\n\n\nvar callTypeObservers = function callTypeObservers(type, transaction, event) {\n  var changedType = type;\n  var changedParentTypes = transaction.changedParentTypes;\n\n  while (true) {\n    // @ts-ignore\n    setIfUndefined(changedParentTypes, type, function () {\n      return [];\n    }).push(event);\n\n    if (type._item === null) {\n      break;\n    }\n\n    type =\n    /** @type {AbstractType<any>} */\n    type._item.parent;\n  }\n\n  callEventHandlerListeners(changedType._eH, event, transaction);\n};\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\n\n\nvar AbstractType = /*#__PURE__*/function () {\n  function AbstractType() {\n    _classCallCheck(this, AbstractType);\n\n    /**\n     * @type {Item|null}\n     */\n    this._item = null;\n    /**\n     * @type {Map<string,Item>}\n     */\n\n    this._map = new Map();\n    /**\n     * @type {Item|null}\n     */\n\n    this._start = null;\n    /**\n     * @type {Doc|null}\n     */\n\n    this.doc = null;\n    this._length = 0;\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n\n    this._eH = createEventHandler();\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent>,Transaction>}\n     */\n\n    this._dEH = createEventHandler();\n    /**\n     * @type {null | Array<ArraySearchMarker>}\n     */\n\n    this._searchMarker = null;\n  }\n  /**\n   * @return {AbstractType<any>|null}\n   */\n\n\n  _createClass(AbstractType, [{\n    key: \"parent\",\n    get: function get() {\n      return this._item ?\n      /** @type {AbstractType<any>} */\n      this._item.parent : null;\n    }\n    /**\n     * Integrate this type into the Yjs instance.\n     *\n     * * Save this struct in the os\n     * * This type is sent to other client\n     * * Observer functions are fired\n     *\n     * @param {Doc} y The Yjs instance\n     * @param {Item|null} item\n     */\n\n  }, {\n    key: \"_integrate\",\n    value: function _integrate(y, item) {\n      this.doc = y;\n      this._item = item;\n    }\n    /**\n     * @return {AbstractType<EventType>}\n     */\n\n  }, {\n    key: \"_copy\",\n    value: function _copy() {\n      throw methodUnimplemented();\n    }\n    /**\n     * @return {AbstractType<EventType>}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      throw methodUnimplemented();\n    }\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(encoder) {}\n    /**\n     * The first non-deleted item\n     */\n\n  }, {\n    key: \"_first\",\n    get: function get() {\n      var n = this._start;\n\n      while (n !== null && n.deleted) {\n        n = n.right;\n      }\n\n      return n;\n    }\n    /**\n     * Creates YEvent and calls all type observers.\n     * Must be implemented by each type.\n     *\n     * @param {Transaction} transaction\n     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n     */\n\n  }, {\n    key: \"_callObserver\",\n    value: function _callObserver(transaction, parentSubs) {\n      if (!transaction.local && this._searchMarker) {\n        this._searchMarker.length = 0;\n      }\n    }\n    /**\n     * Observe all events that are created on this type.\n     *\n     * @param {function(EventType, Transaction):void} f Observer function\n     */\n\n  }, {\n    key: \"observe\",\n    value: function observe(f) {\n      addEventHandlerListener(this._eH, f);\n    }\n    /**\n     * Observe all events that are created by this type and its children.\n     *\n     * @param {function(Array<YEvent>,Transaction):void} f Observer function\n     */\n\n  }, {\n    key: \"observeDeep\",\n    value: function observeDeep(f) {\n      addEventHandlerListener(this._dEH, f);\n    }\n    /**\n     * Unregister an observer function.\n     *\n     * @param {function(EventType,Transaction):void} f Observer function\n     */\n\n  }, {\n    key: \"unobserve\",\n    value: function unobserve(f) {\n      removeEventHandlerListener(this._eH, f);\n    }\n    /**\n     * Unregister an observer function.\n     *\n     * @param {function(Array<YEvent>,Transaction):void} f Observer function\n     */\n\n  }, {\n    key: \"unobserveDeep\",\n    value: function unobserveDeep(f) {\n      removeEventHandlerListener(this._dEH, f);\n    }\n    /**\n     * @abstract\n     * @return {any}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {}\n  }]);\n\n  return AbstractType;\n}();\n/**\n * @param {AbstractType<any>} type\n * @param {number} start\n * @param {number} end\n * @return {Array<any>}\n *\n * @private\n * @function\n */\n\n\nvar typeListSlice = function typeListSlice(type, start, end) {\n  if (start < 0) {\n    start = type._length + start;\n  }\n\n  if (end < 0) {\n    end = type._length + end;\n  }\n\n  var len = end - start;\n  var cs = [];\n  var n = type._start;\n\n  while (n !== null && len > 0) {\n    if (n.countable && !n.deleted) {\n      var c = n.content.getContent();\n\n      if (c.length <= start) {\n        start -= c.length;\n      } else {\n        for (var i = start; i < c.length && len > 0; i++) {\n          cs.push(c[i]);\n          len--;\n        }\n\n        start = 0;\n      }\n    }\n\n    n = n.right;\n  }\n\n  return cs;\n};\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\n\n\nvar typeListToArray = function typeListToArray(type) {\n  var cs = [];\n  var n = type._start;\n\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      var c = n.content.getContent();\n\n      for (var i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n\n    n = n.right;\n  }\n\n  return cs;\n};\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */\n\n\nvar typeListToArraySnapshot = function typeListToArraySnapshot(type, snapshot) {\n  var cs = [];\n  var n = type._start;\n\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      var c = n.content.getContent();\n\n      for (var i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n\n    n = n.right;\n  }\n\n  return cs;\n};\n/**\n * Executes a provided function on once on overy element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\n\n\nvar typeListForEach = function typeListForEach(type, f) {\n  var index = 0;\n  var n = type._start;\n\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      var c = n.content.getContent();\n\n      for (var i = 0; i < c.length; i++) {\n        f(c[i], index++, type);\n      }\n    }\n\n    n = n.right;\n  }\n};\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\n\n\nvar typeListMap = function typeListMap(type, f) {\n  /**\n   * @type {Array<any>}\n   */\n  var result = [];\n  typeListForEach(type, function (c, i) {\n    result.push(f(c, i, type));\n  });\n  return result;\n};\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\n\n\nvar typeListCreateIterator = function typeListCreateIterator(type) {\n  var _ref6;\n\n  var n = type._start;\n  /**\n   * @type {Array<any>|null}\n   */\n\n  var currentContent = null;\n  var currentContentIndex = 0;\n  return _ref6 = {}, _defineProperty(_ref6, Symbol.iterator, function () {\n    return this;\n  }), _defineProperty(_ref6, \"next\", function next() {\n    // find some content\n    if (currentContent === null) {\n      while (n !== null && n.deleted) {\n        n = n.right;\n      } // check if we reached the end, no need to check currentContent, because it does not exist\n\n\n      if (n === null) {\n        return {\n          done: true,\n          value: undefined\n        };\n      } // we found n, so we can set currentContent\n\n\n      currentContent = n.content.getContent();\n      currentContentIndex = 0;\n      n = n.right; // we used the content of n, now iterate to next\n    }\n\n    var value = currentContent[currentContentIndex++]; // check if we need to empty currentContent\n\n    if (currentContent.length <= currentContentIndex) {\n      currentContent = null;\n    }\n\n    return {\n      done: false,\n      value: value\n    };\n  }), _ref6;\n};\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\n\n\nvar typeListGet = function typeListGet(type, index) {\n  var marker = findMarker(type, index);\n  var n = type._start;\n\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  }\n\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index];\n      }\n\n      index -= n.length;\n    }\n  }\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\n\n\nvar typeListInsertGenericsAfter = function typeListInsertGenericsAfter(transaction, parent, referenceItem, content) {\n  var left = referenceItem;\n  var doc = transaction.doc;\n  var ownClientId = doc.clientID;\n  var store = doc.store;\n  var right = referenceItem === null ? parent._start : referenceItem.right;\n  /**\n   * @type {Array<Object|Array<any>|number>}\n   */\n\n  var jsonContent = [];\n\n  var packJsonContent = function packJsonContent() {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent));\n      left.integrate(transaction, 0);\n      jsonContent = [];\n    }\n  };\n\n  content.forEach(function (c) {\n    switch (c.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        jsonContent.push(c);\n        break;\n\n      default:\n        packJsonContent();\n\n        switch (c.constructor) {\n          case Uint8Array:\n          case ArrayBuffer:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(\n            /** @type {Uint8Array} */\n            c)));\n            left.integrate(transaction, 0);\n            break;\n\n          case Doc:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(\n            /** @type {Doc} */\n            c));\n            left.integrate(transaction, 0);\n            break;\n\n          default:\n            if (c instanceof AbstractType) {\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c));\n              left.integrate(transaction, 0);\n            } else {\n              throw new Error('Unexpected content type in insert operation');\n            }\n\n        }\n\n    }\n  });\n  packJsonContent();\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\n\n\nvar typeListInsertGenerics = function typeListInsertGenerics(transaction, parent, index, content) {\n  if (index === 0) {\n    if (parent._searchMarker) {\n      updateMarkerChanges(parent._searchMarker, index, content.length);\n    }\n\n    return typeListInsertGenericsAfter(transaction, parent, null, content);\n  }\n\n  var startIndex = index;\n  var marker = findMarker(parent, index);\n  var n = parent._start;\n\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index; // we need to iterate one to the left so that the algorithm works\n\n    if (index === 0) {\n      // @todo refactor this as it actually doesn't consider formats\n      n = n.prev; // important! get the left undeleted item so that we can actually decrease index\n\n      index += n && n.countable && !n.deleted ? n.length : 0;\n    }\n  }\n\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n        }\n\n        break;\n      }\n\n      index -= n.length;\n    }\n  }\n\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, content.length);\n  }\n\n  return typeListInsertGenericsAfter(transaction, parent, n, content);\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\n\n\nvar typeListDelete = function typeListDelete(transaction, parent, index, length) {\n  if (length === 0) {\n    return;\n  }\n\n  var startIndex = index;\n  var startLength = length;\n  var marker = findMarker(parent, index);\n  var n = parent._start;\n\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  } // compute the first item to be deleted\n\n\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n      }\n\n      index -= n.length;\n    }\n  } // delete all items until done\n\n\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length));\n      }\n\n      n.delete(transaction);\n      length -= n.length;\n    }\n\n    n = n.right;\n  }\n\n  if (length > 0) {\n    throw create$2('array length exceeded');\n  }\n\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, -startLength + length\n    /* in case we remove the above exception */\n    );\n  }\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\n\n\nvar typeMapDelete = function typeMapDelete(transaction, parent, key) {\n  var c = parent._map.get(key);\n\n  if (c !== undefined) {\n    c.delete(transaction);\n  }\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\n\n\nvar typeMapSet = function typeMapSet(transaction, parent, key, value) {\n  var left = parent._map.get(key) || null;\n  var doc = transaction.doc;\n  var ownClientId = doc.clientID;\n  var content;\n\n  if (value == null) {\n    content = new ContentAny([value]);\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        content = new ContentAny([value]);\n        break;\n\n      case Uint8Array:\n        content = new ContentBinary(\n        /** @type {Uint8Array} */\n        value);\n        break;\n\n      case Doc:\n        content = new ContentDoc(\n        /** @type {Doc} */\n        value);\n        break;\n\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value);\n        } else {\n          throw new Error('Unexpected content type');\n        }\n\n    }\n  }\n\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0);\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\n\n\nvar typeMapGet = function typeMapGet(parent, key) {\n  var val = parent._map.get(key);\n\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined;\n};\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\n\n\nvar typeMapGetAll = function typeMapGetAll(parent) {\n  /**\n   * @type {Object<string,any>}\n   */\n  var res = {};\n\n  parent._map.forEach(function (value, key) {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1];\n    }\n  });\n\n  return res;\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\n\n\nvar typeMapHas = function typeMapHas(parent, key) {\n  var val = parent._map.get(key);\n\n  return val !== undefined && !val.deleted;\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\n\n\nvar typeMapGetSnapshot = function typeMapGetSnapshot(parent, key, snapshot) {\n  var v = parent._map.get(key) || null;\n\n  while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n    v = v.left;\n  }\n\n  return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined;\n};\n/**\n * @param {Map<string,Item>} map\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\n\n\nvar createMapIterator = function createMapIterator(map) {\n  return iteratorFilter(map.entries(),\n  /** @param {any} entry */\n  function (entry) {\n    return !entry[1].deleted;\n  });\n};\n/**\n * @module YArray\n */\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n */\n\n\nvar YArrayEvent = /*#__PURE__*/function (_YEvent) {\n  _inherits(YArrayEvent, _YEvent);\n\n  var _super8 = _createSuper(YArrayEvent);\n\n  /**\n   * @param {YArray<T>} yarray The changed type\n   * @param {Transaction} transaction The transaction object\n   */\n  function YArrayEvent(yarray, transaction) {\n    var _this13;\n\n    _classCallCheck(this, YArrayEvent);\n\n    _this13 = _super8.call(this, yarray, transaction);\n    _this13._transaction = transaction;\n    return _this13;\n  }\n\n  return YArrayEvent;\n}(YEvent);\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\n\n\nvar YArray = /*#__PURE__*/function (_AbstractType) {\n  _inherits(YArray, _AbstractType);\n\n  var _super9 = _createSuper(YArray);\n\n  function YArray() {\n    var _this14;\n\n    _classCallCheck(this, YArray);\n\n    _this14 = _super9.call(this);\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n\n    _this14._prelimContent = [];\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n\n    _this14._searchMarker = [];\n    return _this14;\n  }\n  /**\n   * Construct a new YArray containing the specified items.\n   * @template T\n   * @param {Array<T>} items\n   * @return {YArray<T>}\n   */\n\n\n  _createClass(YArray, [{\n    key: \"_integrate\",\n    value:\n    /**\n     * Integrate this type into the Yjs instance.\n     *\n     * * Save this struct in the os\n     * * This type is sent to other client\n     * * Observer functions are fired\n     *\n     * @param {Doc} y The Yjs instance\n     * @param {Item} item\n     */\n    function _integrate(y, item) {\n      _get(_getPrototypeOf(YArray.prototype), \"_integrate\", this).call(this, y, item);\n\n      this.insert(0,\n      /** @type {Array<any>} */\n      this._prelimContent);\n      this._prelimContent = null;\n    }\n  }, {\n    key: \"_copy\",\n    value: function _copy() {\n      return new YArray();\n    }\n    /**\n     * @return {YArray<T>}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var arr = new YArray();\n      arr.insert(0, this.toArray().map(function (el) {\n        return el instanceof AbstractType ? el.clone() : el;\n      }));\n      return arr;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._prelimContent === null ? this._length : this._prelimContent.length;\n    }\n    /**\n     * Creates YArrayEvent and calls observers.\n     *\n     * @param {Transaction} transaction\n     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n     */\n\n  }, {\n    key: \"_callObserver\",\n    value: function _callObserver(transaction, parentSubs) {\n      _get(_getPrototypeOf(YArray.prototype), \"_callObserver\", this).call(this, transaction, parentSubs);\n\n      callTypeObservers(this, transaction, new YArrayEvent(this, transaction));\n    }\n    /**\n     * Inserts new content at an index.\n     *\n     * Important: This function expects an array of content. Not just a content\n     * object. The reason for this \"weirdness\" is that inserting several elements\n     * is very efficient when it is done as a single operation.\n     *\n     * @example\n     *  // Insert character 'a' at position 0\n     *  yarray.insert(0, ['a'])\n     *  // Insert numbers 1, 2 at position 1\n     *  yarray.insert(1, [1, 2])\n     *\n     * @param {number} index The index to insert content at.\n     * @param {Array<T>} content The array of content\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(index, content) {\n      var _this15 = this;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeListInsertGenerics(transaction, _this15, index, content);\n        });\n      } else {\n        var _this$_prelimContent;\n\n        /** @type {Array<any>} */\n        (_this$_prelimContent = this._prelimContent).splice.apply(_this$_prelimContent, [index, 0].concat(_toConsumableArray(content)));\n      }\n    }\n    /**\n     * Appends content to this YArray.\n     *\n     * @param {Array<T>} content Array of content to append.\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(content) {\n      this.insert(this.length, content);\n    }\n    /**\n     * Preppends content to this YArray.\n     *\n     * @param {Array<T>} content Array of content to preppend.\n     */\n\n  }, {\n    key: \"unshift\",\n    value: function unshift(content) {\n      this.insert(0, content);\n    }\n    /**\n     * Deletes elements starting from an index.\n     *\n     * @param {number} index Index at which to start deleting elements\n     * @param {number} length The number of elements to remove. Defaults to 1.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(index) {\n      var _this16 = this;\n\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeListDelete(transaction, _this16, index, length);\n        });\n      } else {\n        /** @type {Array<any>} */\n        this._prelimContent.splice(index, length);\n      }\n    }\n    /**\n     * Returns the i-th element from a YArray.\n     *\n     * @param {number} index The index of the element to return from the YArray\n     * @return {T}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return typeListGet(this, index);\n    }\n    /**\n     * Transforms this YArray to a JavaScript Array.\n     *\n     * @return {Array<T>}\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return typeListToArray(this);\n    }\n    /**\n     * Transforms this YArray to a JavaScript Array.\n     *\n     * @param {number} [start]\n     * @param {number} [end]\n     * @return {Array<T>}\n     */\n\n  }, {\n    key: \"slice\",\n    value: function slice() {\n      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;\n      return typeListSlice(this, start, end);\n    }\n    /**\n     * Transforms this Shared Type to a JSON object.\n     *\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.map(function (c) {\n        return c instanceof AbstractType ? c.toJSON() : c;\n      });\n    }\n    /**\n     * Returns an Array with the result of calling a provided function on every\n     * element of this YArray.\n     *\n     * @template T,M\n     * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n     * @return {Array<M>} A new array with each element being the result of the\n     *                 callback function\n     */\n\n  }, {\n    key: \"map\",\n    value: function map(f) {\n      return typeListMap(this,\n      /** @type {any} */\n      f);\n    }\n    /**\n     * Executes a provided function on once on overy element of this YArray.\n     *\n     * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(f) {\n      typeListForEach(this, f);\n    }\n    /**\n     * @return {IterableIterator<T>}\n     */\n\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return typeListCreateIterator(this);\n    }\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(encoder) {\n      encoder.writeTypeRef(YArrayRefID);\n    }\n  }], [{\n    key: \"from\",\n    value: function from(items) {\n      var a = new YArray();\n      a.push(items);\n      return a;\n    }\n  }]);\n\n  return YArray;\n}(AbstractType);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n *\n * @private\n * @function\n */\n\n\nvar readYArray = function readYArray(decoder) {\n  return new YArray();\n};\n/**\n * @template T\n * Event that describes the changes on a YMap.\n */\n\n\nvar YMapEvent = /*#__PURE__*/function (_YEvent2) {\n  _inherits(YMapEvent, _YEvent2);\n\n  var _super10 = _createSuper(YMapEvent);\n\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  function YMapEvent(ymap, transaction, subs) {\n    var _this17;\n\n    _classCallCheck(this, YMapEvent);\n\n    _this17 = _super10.call(this, ymap, transaction);\n    _this17.keysChanged = subs;\n    return _this17;\n  }\n\n  return YMapEvent;\n}(YEvent);\n/**\n * @template T number|string|Object|Array|Uint8Array\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<T>>\n * @implements {Iterable<T>}\n */\n\n\nvar YMap = /*#__PURE__*/function (_AbstractType2) {\n  _inherits(YMap, _AbstractType2);\n\n  var _super11 = _createSuper(YMap);\n\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  function YMap(entries) {\n    var _this18;\n\n    _classCallCheck(this, YMap);\n\n    _this18 = _super11.call(this);\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n\n    _this18._prelimContent = null;\n\n    if (entries === undefined) {\n      _this18._prelimContent = new Map();\n    } else {\n      _this18._prelimContent = new Map(entries);\n    }\n\n    return _this18;\n  }\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n\n\n  _createClass(YMap, [{\n    key: \"_integrate\",\n    value: function _integrate(y, item) {\n      var _this19 = this;\n\n      _get(_getPrototypeOf(YMap.prototype), \"_integrate\", this).call(this, y, item);\n      /** @type {Map<string, any>} */\n\n\n      this._prelimContent.forEach(function (value, key) {\n        _this19.set(key, value);\n      });\n\n      this._prelimContent = null;\n    }\n  }, {\n    key: \"_copy\",\n    value: function _copy() {\n      return new YMap();\n    }\n    /**\n     * @return {YMap<T>}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var map = new YMap();\n      this.forEach(function (value, key) {\n        map.set(key, value instanceof AbstractType ? value.clone() : value);\n      });\n      return map;\n    }\n    /**\n     * Creates YMapEvent and calls observers.\n     *\n     * @param {Transaction} transaction\n     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n     */\n\n  }, {\n    key: \"_callObserver\",\n    value: function _callObserver(transaction, parentSubs) {\n      callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));\n    }\n    /**\n     * Transforms this Shared Type to a JSON object.\n     *\n     * @return {Object<string,T>}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      /**\n       * @type {Object<string,T>}\n       */\n      var map = {};\n\n      this._map.forEach(function (item, key) {\n        if (!item.deleted) {\n          var v = item.content.getContent()[item.length - 1];\n          map[key] = v instanceof AbstractType ? v.toJSON() : v;\n        }\n      });\n\n      return map;\n    }\n    /**\n     * Returns the size of the YMap (count of key/value pairs)\n     *\n     * @return {number}\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return _toConsumableArray(createMapIterator(this._map)).length;\n    }\n    /**\n     * Returns the keys for each element in the YMap Type.\n     *\n     * @return {IterableIterator<string>}\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return iteratorMap(createMapIterator(this._map),\n      /** @param {any} v */\n      function (v) {\n        return v[0];\n      });\n    }\n    /**\n     * Returns the values for each element in the YMap Type.\n     *\n     * @return {IterableIterator<any>}\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      return iteratorMap(createMapIterator(this._map),\n      /** @param {any} v */\n      function (v) {\n        return v[1].content.getContent()[v[1].length - 1];\n      });\n    }\n    /**\n     * Returns an Iterator of [key, value] pairs\n     *\n     * @return {IterableIterator<any>}\n     */\n\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return iteratorMap(createMapIterator(this._map),\n      /** @param {any} v */\n      function (v) {\n        return [v[0], v[1].content.getContent()[v[1].length - 1]];\n      });\n    }\n    /**\n     * Executes a provided function on once on every key-value pair.\n     *\n     * @param {function(T,string,YMap<T>):void} f A function to execute on every element of this YArray.\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(f) {\n      var _this20 = this;\n\n      /**\n       * @type {Object<string,T>}\n       */\n      var map = {};\n\n      this._map.forEach(function (item, key) {\n        if (!item.deleted) {\n          f(item.content.getContent()[item.length - 1], key, _this20);\n        }\n      });\n\n      return map;\n    }\n    /**\n     * @return {IterableIterator<T>}\n     */\n\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this.entries();\n    }\n    /**\n     * Remove a specified element from this YMap.\n     *\n     * @param {string} key The key of the element to remove.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var _this21 = this;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeMapDelete(transaction, _this21, key);\n        });\n      } else {\n        /** @type {Map<string, any>} */\n        this._prelimContent.delete(key);\n      }\n    }\n    /**\n     * Adds or updates an element with a specified key and value.\n     *\n     * @param {string} key The key of the element to add to this YMap\n     * @param {T} value The value of the element to add\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var _this22 = this;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeMapSet(transaction, _this22, key, value);\n        });\n      } else {\n        /** @type {Map<string, any>} */\n        this._prelimContent.set(key, value);\n      }\n\n      return value;\n    }\n    /**\n     * Returns a specified element from this YMap.\n     *\n     * @param {string} key\n     * @return {T|undefined}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return (\n        /** @type {any} */\n        typeMapGet(this, key)\n      );\n    }\n    /**\n     * Returns a boolean indicating whether the specified key exists or not.\n     *\n     * @param {string} key The key to test.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return typeMapHas(this, key);\n    }\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(encoder) {\n      encoder.writeTypeRef(YMapRefID);\n    }\n  }]);\n\n  return YMap;\n}(AbstractType);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n *\n * @private\n * @function\n */\n\n\nvar readYMap = function readYMap(decoder) {\n  return new YMap();\n};\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\n\n\nvar equalAttrs = function equalAttrs(a, b) {\n  return a === b || typeof a === 'object' && typeof b === 'object' && a && b && equalFlat(a, b);\n};\n\nvar ItemTextListPosition = /*#__PURE__*/function () {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {number} index\n   * @param {Map<string,any>} currentAttributes\n   */\n  function ItemTextListPosition(left, right, index, currentAttributes) {\n    _classCallCheck(this, ItemTextListPosition);\n\n    this.left = left;\n    this.right = right;\n    this.index = index;\n    this.currentAttributes = currentAttributes;\n  }\n  /**\n   * Only call this if you know that this.right is defined\n   */\n\n\n  _createClass(ItemTextListPosition, [{\n    key: \"forward\",\n    value: function forward() {\n      if (this.right === null) {\n        unexpectedCase();\n      }\n\n      switch (this.right.content.constructor) {\n        case ContentEmbed:\n        case ContentString:\n          if (!this.right.deleted) {\n            this.index += this.right.length;\n          }\n\n          break;\n\n        case ContentFormat:\n          if (!this.right.deleted) {\n            updateCurrentAttributes(this.currentAttributes,\n            /** @type {ContentFormat} */\n            this.right.content);\n          }\n\n          break;\n      }\n\n      this.left = this.right;\n      this.right = this.right.right;\n    }\n  }]);\n\n  return ItemTextListPosition;\n}();\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} pos\n * @param {number} count steps to move forward\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\n\n\nvar findNextPosition = function findNextPosition(transaction, pos, count) {\n  while (pos.right !== null && count > 0) {\n    switch (pos.right.content.constructor) {\n      case ContentEmbed:\n      case ContentString:\n        if (!pos.right.deleted) {\n          if (count < pos.right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count));\n          }\n\n          pos.index += pos.right.length;\n          count -= pos.right.length;\n        }\n\n        break;\n\n      case ContentFormat:\n        if (!pos.right.deleted) {\n          updateCurrentAttributes(pos.currentAttributes,\n          /** @type {ContentFormat} */\n          pos.right.content);\n        }\n\n        break;\n    }\n\n    pos.left = pos.right;\n    pos.right = pos.right.right; // pos.forward() - we don't forward because that would halve the performance because we already do the checks above\n  }\n\n  return pos;\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\n\n\nvar findPosition = function findPosition(transaction, parent, index) {\n  var currentAttributes = new Map();\n  var marker = findMarker(parent, index);\n\n  if (marker) {\n    var pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes);\n    return findNextPosition(transaction, pos, index - marker.index);\n  } else {\n    var _pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes);\n\n    return findNextPosition(transaction, _pos, index);\n  }\n};\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\n\n\nvar insertNegatedAttributes = function insertNegatedAttributes(transaction, parent, currPos, negatedAttributes) {\n  // check if we really need to remove attributes\n  while (currPos.right !== null && (currPos.right.deleted === true || currPos.right.content.constructor === ContentFormat && equalAttrs(negatedAttributes.get(\n  /** @type {ContentFormat} */\n  currPos.right.content.key),\n  /** @type {ContentFormat} */\n  currPos.right.content.value))) {\n    if (!currPos.right.deleted) {\n      negatedAttributes.delete(\n      /** @type {ContentFormat} */\n      currPos.right.content.key);\n    }\n\n    currPos.forward();\n  }\n\n  var doc = transaction.doc;\n  var ownClientId = doc.clientID;\n  var nextFormat = currPos.left;\n  var right = currPos.right;\n  negatedAttributes.forEach(function (val, key) {\n    nextFormat = new Item(createID(ownClientId, getState(doc.store, ownClientId)), nextFormat, nextFormat && nextFormat.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n    nextFormat.integrate(transaction, 0);\n    currPos.right = nextFormat;\n  });\n};\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\n\n\nvar updateCurrentAttributes = function updateCurrentAttributes(currentAttributes, format) {\n  var key = format.key,\n      value = format.value;\n\n  if (value === null) {\n    currentAttributes.delete(key);\n  } else {\n    currentAttributes.set(key, value);\n  }\n};\n/**\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\n\n\nvar minimizeAttributeChanges = function minimizeAttributeChanges(currPos, attributes) {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  while (true) {\n    if (currPos.right === null) {\n      break;\n    } else if (currPos.right.deleted || currPos.right.content.constructor === ContentFormat && equalAttrs(attributes[\n    /** @type {ContentFormat} */\n    currPos.right.content.key] || null,\n    /** @type {ContentFormat} */\n    currPos.right.content.value)) ;else {\n      break;\n    }\n\n    currPos.forward();\n  }\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\n\n\nvar insertAttributes = function insertAttributes(transaction, parent, currPos, attributes) {\n  var doc = transaction.doc;\n  var ownClientId = doc.clientID;\n  var negatedAttributes = new Map(); // insert format-start items\n\n  for (var key in attributes) {\n    var val = attributes[key];\n    var currentVal = currPos.currentAttributes.get(key) || null;\n\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal);\n      var left = currPos.left,\n          right = currPos.right;\n      currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n      currPos.right.integrate(transaction, 0);\n      currPos.forward();\n    }\n  }\n\n  return negatedAttributes;\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {string|object} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\n\n\nvar insertText = function insertText(transaction, parent, currPos, text, attributes) {\n  currPos.currentAttributes.forEach(function (val, key) {\n    if (attributes[key] === undefined) {\n      attributes[key] = null;\n    }\n  });\n  var doc = transaction.doc;\n  var ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  var negatedAttributes = insertAttributes(transaction, parent, currPos, attributes); // insert content\n\n  var content = text.constructor === String ? new ContentString(\n  /** @type {string} */\n  text) : new ContentEmbed(text);\n  var left = currPos.left,\n      right = currPos.right,\n      index = currPos.index;\n\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength());\n  }\n\n  right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content);\n  right.integrate(transaction, 0);\n  currPos.right = right;\n  currPos.index = index;\n  currPos.forward();\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\n\n\nvar formatText = function formatText(transaction, parent, currPos, length, attributes) {\n  var doc = transaction.doc;\n  var ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  var negatedAttributes = insertAttributes(transaction, parent, currPos, attributes); // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n\n  while (length > 0 && currPos.right !== null) {\n    if (!currPos.right.deleted) {\n      switch (currPos.right.content.constructor) {\n        case ContentFormat:\n          {\n            var _currPos$right$conten =\n            /** @type {ContentFormat} */\n            currPos.right.content,\n                key = _currPos$right$conten.key,\n                value = _currPos$right$conten.value;\n            var attr = attributes[key];\n\n            if (attr !== undefined) {\n              if (equalAttrs(attr, value)) {\n                negatedAttributes.delete(key);\n              } else {\n                negatedAttributes.set(key, value);\n              }\n\n              currPos.right.delete(transaction);\n            }\n\n            break;\n          }\n\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n\n          length -= currPos.right.length;\n          break;\n      }\n    }\n\n    currPos.forward();\n  } // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n\n\n  if (length > 0) {\n    var newlines = '';\n\n    for (; length > 0; length--) {\n      newlines += '\\n';\n    }\n\n    currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines));\n    currPos.right.integrate(transaction, 0);\n    currPos.forward();\n  }\n\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} end exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} endAttributes This attribute is modified!\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\n\n\nvar cleanupFormattingGap = function cleanupFormattingGap(transaction, start, end, startAttributes, endAttributes) {\n  while (end && end.content.constructor !== ContentString && end.content.constructor !== ContentEmbed) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      updateCurrentAttributes(endAttributes,\n      /** @type {ContentFormat} */\n      end.content);\n    }\n\n    end = end.right;\n  }\n\n  var cleanups = 0;\n\n  while (start !== end) {\n    if (!start.deleted) {\n      var content = start.content;\n\n      switch (content.constructor) {\n        case ContentFormat:\n          {\n            var key =\n            /** @type {ContentFormat} */\n            content.key,\n                value = content.value;\n\n            if ((endAttributes.get(key) || null) !== value || (startAttributes.get(key) || null) === value) {\n              // Either this format is overwritten or it is not necessary because the attribute already existed.\n              start.delete(transaction);\n              cleanups++;\n            }\n\n            break;\n          }\n      }\n    }\n\n    start =\n    /** @type {Item} */\n    start.right;\n  }\n\n  return cleanups;\n};\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\n\n\nvar cleanupContextlessFormattingGap = function cleanupContextlessFormattingGap(transaction, item) {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || item.right.content.constructor !== ContentString && item.right.content.constructor !== ContentEmbed)) {\n    item = item.right;\n  }\n\n  var attrs = new Set(); // iterate back until a content item is found\n\n  while (item && (item.deleted || item.content.constructor !== ContentString && item.content.constructor !== ContentEmbed)) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      var key =\n      /** @type {ContentFormat} */\n      item.content.key;\n\n      if (attrs.has(key)) {\n        item.delete(transaction);\n      } else {\n        attrs.add(key);\n      }\n    }\n\n    item = item.left;\n  }\n};\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\n\n\nvar cleanupYTextFormatting = function cleanupYTextFormatting(type) {\n  var res = 0;\n\n  _transact(\n  /** @type {Doc} */\n  type.doc, function (transaction) {\n    var start =\n    /** @type {Item} */\n    type._start;\n    var end = type._start;\n    var startAttributes = create();\n    var currentAttributes = copy(startAttributes);\n\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes,\n            /** @type {ContentFormat} */\n            end.content);\n            break;\n\n          case ContentEmbed:\n          case ContentString:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes);\n            startAttributes = copy(currentAttributes);\n            start = end;\n            break;\n        }\n      }\n\n      end = end.right;\n    }\n  });\n\n  return res;\n};\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\n\n\nvar deleteText = function deleteText(transaction, currPos, length) {\n  var startLength = length;\n  var startAttrs = copy(currPos.currentAttributes);\n  var start = currPos.right;\n\n  while (length > 0 && currPos.right !== null) {\n    if (currPos.right.deleted === false) {\n      switch (currPos.right.content.constructor) {\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n\n          length -= currPos.right.length;\n          currPos.right.delete(transaction);\n          break;\n      }\n    }\n\n    currPos.forward();\n  }\n\n  if (start) {\n    cleanupFormattingGap(transaction, start, currPos.right, startAttrs, copy(currPos.currentAttributes));\n  }\n\n  var parent =\n  /** @type {AbstractType<any>} */\n\n  /** @type {Item} */\n  (currPos.left || currPos.right).parent;\n\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length);\n  }\n\n  return currPos;\n};\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * @typedef {Object} DeltaItem\n * @property {number|undefined} DeltaItem.delete\n * @property {number|undefined} DeltaItem.retain\n * @property {string|undefined} DeltaItem.insert\n * @property {Object<string,any>} DeltaItem.attributes\n */\n\n/**\n * Event that describes the changes on a YText type.\n */\n\n\nvar YTextEvent = /*#__PURE__*/function (_YEvent3) {\n  _inherits(YTextEvent, _YEvent3);\n\n  var _super12 = _createSuper(YTextEvent);\n\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed\n   */\n  function YTextEvent(ytext, transaction, subs) {\n    var _this23;\n\n    _classCallCheck(this, YTextEvent);\n\n    _this23 = _super12.call(this, ytext, transaction);\n    /**\n     * @type {Array<DeltaItem>|null}\n     */\n\n    _this23._delta = null;\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n\n    _this23.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n\n    _this23.keysChanged = new Set();\n    subs.forEach(function (sub) {\n      if (sub === null) {\n        _this23.childListChanged = true;\n      } else {\n        _this23.keysChanged.add(sub);\n      }\n    });\n    return _this23;\n  }\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<DeltaItem>}\n   *\n   * @public\n   */\n\n\n  _createClass(YTextEvent, [{\n    key: \"delta\",\n    get: function get() {\n      var _this24 = this;\n\n      if (this._delta === null) {\n        var y =\n        /** @type {Doc} */\n        this.target.doc;\n        this._delta = [];\n\n        _transact(y, function (transaction) {\n          var delta =\n          /** @type {Array<DeltaItem>} */\n          _this24._delta;\n          var currentAttributes = new Map(); // saves all current attributes for insert\n\n          var oldAttributes = new Map();\n          var item = _this24.target._start;\n          /**\n           * @type {string?}\n           */\n\n          var action = null;\n          /**\n           * @type {Object<string,any>}\n           */\n\n          var attributes = {}; // counts added or removed new attributes for retain\n\n          /**\n           * @type {string|object}\n           */\n\n          var insert = '';\n          var retain = 0;\n          var deleteLen = 0;\n\n          var addOp = function addOp() {\n            if (action !== null) {\n              /**\n               * @type {any}\n               */\n              var op;\n\n              switch (action) {\n                case 'delete':\n                  op = {\n                    delete: deleteLen\n                  };\n                  deleteLen = 0;\n                  break;\n\n                case 'insert':\n                  op = {\n                    insert: insert\n                  };\n\n                  if (currentAttributes.size > 0) {\n                    op.attributes = {};\n                    currentAttributes.forEach(function (value, key) {\n                      if (value !== null) {\n                        op.attributes[key] = value;\n                      }\n                    });\n                  }\n\n                  insert = '';\n                  break;\n\n                case 'retain':\n                  op = {\n                    retain: retain\n                  };\n\n                  if (Object.keys(attributes).length > 0) {\n                    op.attributes = {};\n\n                    for (var key in attributes) {\n                      op.attributes[key] = attributes[key];\n                    }\n                  }\n\n                  retain = 0;\n                  break;\n              }\n\n              delta.push(op);\n              action = null;\n            }\n          };\n\n          while (item !== null) {\n            switch (item.content.constructor) {\n              case ContentEmbed:\n                if (_this24.adds(item)) {\n                  if (!_this24.deletes(item)) {\n                    addOp();\n                    action = 'insert';\n                    insert =\n                    /** @type {ContentEmbed} */\n                    item.content.embed;\n                    addOp();\n                  }\n                } else if (_this24.deletes(item)) {\n                  if (action !== 'delete') {\n                    addOp();\n                    action = 'delete';\n                  }\n\n                  deleteLen += 1;\n                } else if (!item.deleted) {\n                  if (action !== 'retain') {\n                    addOp();\n                    action = 'retain';\n                  }\n\n                  retain += 1;\n                }\n\n                break;\n\n              case ContentString:\n                if (_this24.adds(item)) {\n                  if (!_this24.deletes(item)) {\n                    if (action !== 'insert') {\n                      addOp();\n                      action = 'insert';\n                    }\n\n                    insert +=\n                    /** @type {ContentString} */\n                    item.content.str;\n                  }\n                } else if (_this24.deletes(item)) {\n                  if (action !== 'delete') {\n                    addOp();\n                    action = 'delete';\n                  }\n\n                  deleteLen += item.length;\n                } else if (!item.deleted) {\n                  if (action !== 'retain') {\n                    addOp();\n                    action = 'retain';\n                  }\n\n                  retain += item.length;\n                }\n\n                break;\n\n              case ContentFormat:\n                {\n                  var _item$content =\n                  /** @type {ContentFormat} */\n                  item.content,\n                      key = _item$content.key,\n                      value = _item$content.value;\n\n                  if (_this24.adds(item)) {\n                    if (!_this24.deletes(item)) {\n                      var curVal = currentAttributes.get(key) || null;\n\n                      if (!equalAttrs(curVal, value)) {\n                        if (action === 'retain') {\n                          addOp();\n                        }\n\n                        if (equalAttrs(value, oldAttributes.get(key) || null)) {\n                          delete attributes[key];\n                        } else {\n                          attributes[key] = value;\n                        }\n                      } else {\n                        item.delete(transaction);\n                      }\n                    }\n                  } else if (_this24.deletes(item)) {\n                    oldAttributes.set(key, value);\n\n                    var _curVal = currentAttributes.get(key) || null;\n\n                    if (!equalAttrs(_curVal, value)) {\n                      if (action === 'retain') {\n                        addOp();\n                      }\n\n                      attributes[key] = _curVal;\n                    }\n                  } else if (!item.deleted) {\n                    oldAttributes.set(key, value);\n                    var attr = attributes[key];\n\n                    if (attr !== undefined) {\n                      if (!equalAttrs(attr, value)) {\n                        if (action === 'retain') {\n                          addOp();\n                        }\n\n                        if (value === null) {\n                          attributes[key] = value;\n                        } else {\n                          delete attributes[key];\n                        }\n                      } else {\n                        item.delete(transaction);\n                      }\n                    }\n                  }\n\n                  if (!item.deleted) {\n                    if (action === 'insert') {\n                      addOp();\n                    }\n\n                    updateCurrentAttributes(currentAttributes,\n                    /** @type {ContentFormat} */\n                    item.content);\n                  }\n\n                  break;\n                }\n            }\n\n            item = item.right;\n          }\n\n          addOp();\n\n          while (delta.length > 0) {\n            var lastOp = delta[delta.length - 1];\n\n            if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n              // retain delta's if they don't assign attributes\n              delta.pop();\n            } else {\n              break;\n            }\n          }\n        });\n      }\n\n      return this._delta;\n    }\n  }]);\n\n  return YTextEvent;\n}(YEvent);\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\n\n\nvar YText = /*#__PURE__*/function (_AbstractType3) {\n  _inherits(YText, _AbstractType3);\n\n  var _super13 = _createSuper(YText);\n\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  function YText(string) {\n    var _this25;\n\n    _classCallCheck(this, YText);\n\n    _this25 = _super13.call(this);\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n\n    _this25._pending = string !== undefined ? [function () {\n      return _this25.insert(0, string);\n    }] : [];\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n\n    _this25._searchMarker = [];\n    return _this25;\n  }\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n\n\n  _createClass(YText, [{\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n    /**\n     * @param {Doc} y\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"_integrate\",\n    value: function _integrate(y, item) {\n      _get(_getPrototypeOf(YText.prototype), \"_integrate\", this).call(this, y, item);\n\n      try {\n        /** @type {Array<function>} */\n        this._pending.forEach(function (f) {\n          return f();\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n      this._pending = null;\n    }\n  }, {\n    key: \"_copy\",\n    value: function _copy() {\n      return new YText();\n    }\n    /**\n     * @return {YText}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var text = new YText();\n      text.applyDelta(this.toDelta());\n      return text;\n    }\n    /**\n     * Creates YTextEvent and calls observers.\n     *\n     * @param {Transaction} transaction\n     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n     */\n\n  }, {\n    key: \"_callObserver\",\n    value: function _callObserver(transaction, parentSubs) {\n      var _this26 = this;\n\n      _get(_getPrototypeOf(YText.prototype), \"_callObserver\", this).call(this, transaction, parentSubs);\n\n      var event = new YTextEvent(this, transaction, parentSubs);\n      var doc = transaction.doc; // If a remote change happened, we try to cleanup potential formatting duplicates.\n\n      if (!transaction.local) {\n        // check if another formatting item was inserted\n        var foundFormattingItem = false;\n\n        var _iterator10 = _createForOfIteratorHelper(transaction.afterState.entries()),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _step10$value = _slicedToArray(_step10.value, 2),\n                client = _step10$value[0],\n                afterClock = _step10$value[1];\n\n            var clock = transaction.beforeState.get(client) || 0;\n\n            if (afterClock === clock) {\n              continue;\n            }\n\n            iterateStructs(transaction,\n            /** @type {Array<Item|GC>} */\n            doc.store.clients.get(client), clock, afterClock, function (item) {\n              if (!item.deleted &&\n              /** @type {Item} */\n              item.content.constructor === ContentFormat) {\n                foundFormattingItem = true;\n              }\n            });\n\n            if (foundFormattingItem) {\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        if (!foundFormattingItem) {\n          iterateDeletedStructs(transaction, transaction.deleteSet, function (item) {\n            if (item instanceof GC || foundFormattingItem) {\n              return;\n            }\n\n            if (item.parent === _this26 && item.content.constructor === ContentFormat) {\n              foundFormattingItem = true;\n            }\n          });\n        }\n\n        _transact(doc, function (t) {\n          if (foundFormattingItem) {\n            // If a formatting item was inserted, we simply clean the whole type.\n            // We need to compute currentAttributes for the current position anyway.\n            cleanupYTextFormatting(_this26);\n          } else {\n            // If no formatting attribute was inserted, we can make due with contextless\n            // formatting cleanups.\n            // Contextless: it is not necessary to compute currentAttributes for the affected position.\n            iterateDeletedStructs(t, t.deleteSet, function (item) {\n              if (item instanceof GC) {\n                return;\n              }\n\n              if (item.parent === _this26) {\n                cleanupContextlessFormattingGap(t, item);\n              }\n            });\n          }\n        });\n      }\n\n      callTypeObservers(this, transaction, event);\n    }\n    /**\n     * Returns the unformatted string representation of this YText type.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var str = '';\n      /**\n       * @type {Item|null}\n       */\n\n      var n = this._start;\n\n      while (n !== null) {\n        if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n          str +=\n          /** @type {ContentString} */\n          n.content.str;\n        }\n\n        n = n.right;\n      }\n\n      return str;\n    }\n    /**\n     * Returns the unformatted string representation of this YText type.\n     *\n     * @return {string}\n     * @public\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * Apply a {@link Delta} on this shared YText type.\n     *\n     * @param {any} delta The changes to apply on this element.\n     * @param {object}  [opts]\n     * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n     *\n     *\n     * @public\n     */\n\n  }, {\n    key: \"applyDelta\",\n    value: function applyDelta(delta) {\n      var _this27 = this;\n\n      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref7$sanitize = _ref7.sanitize,\n          sanitize = _ref7$sanitize === void 0 ? true : _ref7$sanitize;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          var currPos = new ItemTextListPosition(null, _this27._start, 0, new Map());\n\n          for (var i = 0; i < delta.length; i++) {\n            var op = delta[i];\n\n            if (op.insert !== undefined) {\n              // Quill assumes that the content starts with an empty paragraph.\n              // Yjs/Y.Text assumes that it starts empty. We always hide that\n              // there is a newline at the end of the content.\n              // If we omit this step, clients will see a different number of\n              // paragraphs, but nothing bad will happen.\n              var ins = !sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n' ? op.insert.slice(0, -1) : op.insert;\n\n              if (typeof ins !== 'string' || ins.length > 0) {\n                insertText(transaction, _this27, currPos, ins, op.attributes || {});\n              }\n            } else if (op.retain !== undefined) {\n              formatText(transaction, _this27, currPos, op.retain, op.attributes || {});\n            } else if (op.delete !== undefined) {\n              deleteText(transaction, currPos, op.delete);\n            }\n          }\n        });\n      } else {\n        /** @type {Array<function>} */\n        this._pending.push(function () {\n          return _this27.applyDelta(delta);\n        });\n      }\n    }\n    /**\n     * Returns the Delta representation of this YText type.\n     *\n     * @param {Snapshot} [snapshot]\n     * @param {Snapshot} [prevSnapshot]\n     * @param {function('removed' | 'added', ID):any} [computeYChange]\n     * @return {any} The Delta representation of this type.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"toDelta\",\n    value: function toDelta(snapshot, prevSnapshot, computeYChange) {\n      /**\n       * @type{Array<any>}\n       */\n      var ops = [];\n      var currentAttributes = new Map();\n      var doc =\n      /** @type {Doc} */\n      this.doc;\n      var str = '';\n      var n = this._start;\n\n      function packStr() {\n        if (str.length > 0) {\n          // pack str with attributes to ops\n\n          /**\n           * @type {Object<string,any>}\n           */\n          var attributes = {};\n          var addAttributes = false;\n          currentAttributes.forEach(function (value, key) {\n            addAttributes = true;\n            attributes[key] = value;\n          });\n          /**\n           * @type {Object<string,any>}\n           */\n\n          var op = {\n            insert: str\n          };\n\n          if (addAttributes) {\n            op.attributes = attributes;\n          }\n\n          ops.push(op);\n          str = '';\n        }\n      } // snapshots are merged again after the transaction, so we need to keep the\n      // transalive until we are done\n\n\n      _transact(doc, function (transaction) {\n        if (snapshot) {\n          splitSnapshotAffectedStructs(transaction, snapshot);\n        }\n\n        if (prevSnapshot) {\n          splitSnapshotAffectedStructs(transaction, prevSnapshot);\n        }\n\n        while (n !== null) {\n          if (isVisible(n, snapshot) || prevSnapshot !== undefined && isVisible(n, prevSnapshot)) {\n            switch (n.content.constructor) {\n              case ContentString:\n                {\n                  var cur = currentAttributes.get('ychange');\n\n                  if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                    if (cur === undefined || cur.user !== n.id.client || cur.state !== 'removed') {\n                      packStr();\n                      currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : {\n                        type: 'removed'\n                      });\n                    }\n                  } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                    if (cur === undefined || cur.user !== n.id.client || cur.state !== 'added') {\n                      packStr();\n                      currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : {\n                        type: 'added'\n                      });\n                    }\n                  } else if (cur !== undefined) {\n                    packStr();\n                    currentAttributes.delete('ychange');\n                  }\n\n                  str +=\n                  /** @type {ContentString} */\n                  n.content.str;\n                  break;\n                }\n\n              case ContentEmbed:\n                {\n                  packStr();\n                  /**\n                   * @type {Object<string,any>}\n                   */\n\n                  var op = {\n                    insert:\n                    /** @type {ContentEmbed} */\n                    n.content.embed\n                  };\n\n                  if (currentAttributes.size > 0) {\n                    (function () {\n                      var attrs =\n                      /** @type {Object<string,any>} */\n                      {};\n                      op.attributes = attrs;\n                      currentAttributes.forEach(function (value, key) {\n                        attrs[key] = value;\n                      });\n                    })();\n                  }\n\n                  ops.push(op);\n                  break;\n                }\n\n              case ContentFormat:\n                if (isVisible(n, snapshot)) {\n                  packStr();\n                  updateCurrentAttributes(currentAttributes,\n                  /** @type {ContentFormat} */\n                  n.content);\n                }\n\n                break;\n            }\n          }\n\n          n = n.right;\n        }\n\n        packStr();\n      }, splitSnapshotAffectedStructs);\n\n      return ops;\n    }\n    /**\n     * Insert text at a given index.\n     *\n     * @param {number} index The index at which to start inserting.\n     * @param {String} text The text to insert at the specified position.\n     * @param {TextAttributes} [attributes] Optionally define some formatting\n     *                                    information to apply on the inserted\n     *                                    Text.\n     * @public\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(index, text, attributes) {\n      var _this28 = this;\n\n      if (text.length <= 0) {\n        return;\n      }\n\n      var y = this.doc;\n\n      if (y !== null) {\n        _transact(y, function (transaction) {\n          var pos = findPosition(transaction, _this28, index);\n\n          if (!attributes) {\n            attributes = {}; // @ts-ignore\n\n            pos.currentAttributes.forEach(function (v, k) {\n              attributes[k] = v;\n            });\n          }\n\n          insertText(transaction, _this28, pos, text, attributes);\n        });\n      } else {\n        /** @type {Array<function>} */\n        this._pending.push(function () {\n          return _this28.insert(index, text, attributes);\n        });\n      }\n    }\n    /**\n     * Inserts an embed at a index.\n     *\n     * @param {number} index The index to insert the embed at.\n     * @param {Object} embed The Object that represents the embed.\n     * @param {TextAttributes} attributes Attribute information to apply on the\n     *                                    embed\n     *\n     * @public\n     */\n\n  }, {\n    key: \"insertEmbed\",\n    value: function insertEmbed(index, embed) {\n      var _this29 = this;\n\n      var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (embed.constructor !== Object) {\n        throw new Error('Embed must be an Object');\n      }\n\n      var y = this.doc;\n\n      if (y !== null) {\n        _transact(y, function (transaction) {\n          var pos = findPosition(transaction, _this29, index);\n          insertText(transaction, _this29, pos, embed, attributes);\n        });\n      } else {\n        /** @type {Array<function>} */\n        this._pending.push(function () {\n          return _this29.insertEmbed(index, embed, attributes);\n        });\n      }\n    }\n    /**\n     * Deletes text starting from an index.\n     *\n     * @param {number} index Index at which to start deleting.\n     * @param {number} length The number of characters to remove. Defaults to 1.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(index, length) {\n      var _this30 = this;\n\n      if (length === 0) {\n        return;\n      }\n\n      var y = this.doc;\n\n      if (y !== null) {\n        _transact(y, function (transaction) {\n          deleteText(transaction, findPosition(transaction, _this30, index), length);\n        });\n      } else {\n        /** @type {Array<function>} */\n        this._pending.push(function () {\n          return _this30.delete(index, length);\n        });\n      }\n    }\n    /**\n     * Assigns properties to a range of text.\n     *\n     * @param {number} index The position where to start formatting.\n     * @param {number} length The amount of characters to assign properties to.\n     * @param {TextAttributes} attributes Attribute information to apply on the\n     *                                    text.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(index, length, attributes) {\n      var _this31 = this;\n\n      if (length === 0) {\n        return;\n      }\n\n      var y = this.doc;\n\n      if (y !== null) {\n        _transact(y, function (transaction) {\n          var pos = findPosition(transaction, _this31, index);\n\n          if (pos.right === null) {\n            return;\n          }\n\n          formatText(transaction, _this31, pos, length, attributes);\n        });\n      } else {\n        /** @type {Array<function>} */\n        this._pending.push(function () {\n          return _this31.format(index, length, attributes);\n        });\n      }\n    }\n    /**\n     * Removes an attribute.\n     *\n     * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n     *\n     * @param {String} attributeName The attribute name that is to be removed.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute(attributeName) {\n      var _this32 = this;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeMapDelete(transaction, _this32, attributeName);\n        });\n      } else {\n        /** @type {Array<function>} */\n        this._pending.push(function () {\n          return _this32.removeAttribute(attributeName);\n        });\n      }\n    }\n    /**\n     * Sets or updates an attribute.\n     *\n     * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n     *\n     * @param {String} attributeName The attribute name that is to be set.\n     * @param {any} attributeValue The attribute value that is to be set.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(attributeName, attributeValue) {\n      var _this33 = this;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeMapSet(transaction, _this33, attributeName, attributeValue);\n        });\n      } else {\n        /** @type {Array<function>} */\n        this._pending.push(function () {\n          return _this33.setAttribute(attributeName, attributeValue);\n        });\n      }\n    }\n    /**\n     * Returns an attribute value that belongs to the attribute name.\n     *\n     * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n     *\n     * @param {String} attributeName The attribute name that identifies the\n     *                               queried value.\n     * @return {any} The queried attribute value.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attributeName) {\n      return (\n        /** @type {any} */\n        typeMapGet(this, attributeName)\n      );\n    }\n    /**\n     * Returns all attribute name/value pairs in a JSON Object.\n     *\n     * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n     *\n     * @param {Snapshot} [snapshot]\n     * @return {Object<string, any>} A JSON Object that describes the attributes.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes(snapshot) {\n      return typeMapGetAll(this);\n    }\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(encoder) {\n      encoder.writeTypeRef(YTextRefID);\n    }\n  }]);\n\n  return YText;\n}(AbstractType);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YText}\n *\n * @private\n * @function\n */\n\n\nvar readYText = function readYText(decoder) {\n  return new YText();\n};\n/**\n * @module YXml\n */\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\n\n\nvar YXmlTreeWalker = /*#__PURE__*/function () {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  function YXmlTreeWalker(root) {\n    var f = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n      return true;\n    };\n\n    _classCallCheck(this, YXmlTreeWalker);\n\n    this._filter = f;\n    this._root = root;\n    /**\n     * @type {Item}\n     */\n\n    this._currentNode =\n    /** @type {Item} */\n    root._start;\n    this._firstCall = true;\n  }\n\n  _createClass(YXmlTreeWalker, [{\n    key: Symbol.iterator,\n    value: function value() {\n      return this;\n    }\n    /**\n     * Get the next node.\n     *\n     * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      /**\n       * @type {Item|null}\n       */\n      var n = this._currentNode;\n      var type =\n      /** @type {any} */\n      n.content.type;\n\n      if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) {\n        // if first call, we check if we can use the first item\n        do {\n          type =\n          /** @type {any} */\n          n.content.type;\n\n          if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n            // walk down in the tree\n            n = type._start;\n          } else {\n            // walk right or up in the tree\n            while (n !== null) {\n              if (n.right !== null) {\n                n = n.right;\n                break;\n              } else if (n.parent === this._root) {\n                n = null;\n              } else {\n                n =\n                /** @type {AbstractType<any>} */\n                n.parent._item;\n              }\n            }\n          }\n        } while (n !== null && (n.deleted || !this._filter(\n        /** @type {ContentType} */\n        n.content.type)));\n      }\n\n      this._firstCall = false;\n\n      if (n === null) {\n        // @ts-ignore\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      this._currentNode = n;\n      return {\n        value:\n        /** @type {any} */\n        n.content.type,\n        done: false\n      };\n    }\n  }]);\n\n  return YXmlTreeWalker;\n}();\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\n\n\nvar YXmlFragment = /*#__PURE__*/function (_AbstractType4) {\n  _inherits(YXmlFragment, _AbstractType4);\n\n  var _super14 = _createSuper(YXmlFragment);\n\n  function YXmlFragment() {\n    var _this34;\n\n    _classCallCheck(this, YXmlFragment);\n\n    _this34 = _super14.call(this);\n    /**\n     * @type {Array<any>|null}\n     */\n\n    _this34._prelimContent = [];\n    return _this34;\n  }\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n\n\n  _createClass(YXmlFragment, [{\n    key: \"firstChild\",\n    get: function get() {\n      var first = this._first;\n      return first ? first.content.getContent()[0] : null;\n    }\n    /**\n     * Integrate this type into the Yjs instance.\n     *\n     * * Save this struct in the os\n     * * This type is sent to other client\n     * * Observer functions are fired\n     *\n     * @param {Doc} y The Yjs instance\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"_integrate\",\n    value: function _integrate(y, item) {\n      _get(_getPrototypeOf(YXmlFragment.prototype), \"_integrate\", this).call(this, y, item);\n\n      this.insert(0,\n      /** @type {Array<any>} */\n      this._prelimContent);\n      this._prelimContent = null;\n    }\n  }, {\n    key: \"_copy\",\n    value: function _copy() {\n      return new YXmlFragment();\n    }\n    /**\n     * @return {YXmlFragment}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var el = new YXmlFragment(); // @ts-ignore\n\n      el.insert(0, el.toArray().map(function (item) {\n        return item instanceof AbstractType ? item.clone() : item;\n      }));\n      return el;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._prelimContent === null ? this._length : this._prelimContent.length;\n    }\n    /**\n     * Create a subtree of childNodes.\n     *\n     * @example\n     * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n     * for (let node in walker) {\n     *   // `node` is a div node\n     *   nop(node)\n     * }\n     *\n     * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n     *                          returns a Boolean indicating whether the child\n     *                          is to be included in the subtree.\n     * @return {YXmlTreeWalker} A subtree and a position within it.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"createTreeWalker\",\n    value: function createTreeWalker(filter) {\n      return new YXmlTreeWalker(this, filter);\n    }\n    /**\n     * Returns the first YXmlElement that matches the query.\n     * Similar to DOM's {@link querySelector}.\n     *\n     * Query support:\n     *   - tagname\n     * TODO:\n     *   - id\n     *   - attribute\n     *\n     * @param {CSS_Selector} query The query on the children.\n     * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"querySelector\",\n    value: function querySelector(query) {\n      query = query.toUpperCase(); // @ts-ignore\n\n      var iterator = new YXmlTreeWalker(this, function (element) {\n        return element.nodeName && element.nodeName.toUpperCase() === query;\n      });\n      var next = iterator.next();\n\n      if (next.done) {\n        return null;\n      } else {\n        return next.value;\n      }\n    }\n    /**\n     * Returns all YXmlElements that match the query.\n     * Similar to Dom's {@link querySelectorAll}.\n     *\n     * @todo Does not yet support all queries. Currently only query by tagName.\n     *\n     * @param {CSS_Selector} query The query on the children\n     * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"querySelectorAll\",\n    value: function querySelectorAll(query) {\n      query = query.toUpperCase(); // @ts-ignore\n\n      return Array.from(new YXmlTreeWalker(this, function (element) {\n        return element.nodeName && element.nodeName.toUpperCase() === query;\n      }));\n    }\n    /**\n     * Creates YXmlEvent and calls observers.\n     *\n     * @param {Transaction} transaction\n     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n     */\n\n  }, {\n    key: \"_callObserver\",\n    value: function _callObserver(transaction, parentSubs) {\n      callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));\n    }\n    /**\n     * Get the string representation of all the children of this YXmlFragment.\n     *\n     * @return {string} The string representation of all children.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return typeListMap(this, function (xml) {\n        return xml.toString();\n      }).join('');\n    }\n    /**\n     * @return {string}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * Creates a Dom Element that mirrors this YXmlElement.\n     *\n     * @param {Document} [_document=document] The document object (you must define\n     *                                        this when calling this method in\n     *                                        nodejs)\n     * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n     *                                             are presented in the DOM\n     * @param {any} [binding] You should not set this property. This is\n     *                               used if DomBinding wants to create a\n     *                               association to the created DOM type.\n     * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n     *\n     * @public\n     */\n\n  }, {\n    key: \"toDOM\",\n    value: function toDOM() {\n      var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\n      var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var binding = arguments.length > 2 ? arguments[2] : undefined;\n\n      var fragment = _document.createDocumentFragment();\n\n      if (binding !== undefined) {\n        binding._createAssociation(fragment, this);\n      }\n\n      typeListForEach(this, function (xmlType) {\n        fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);\n      });\n      return fragment;\n    }\n    /**\n     * Inserts new content at an index.\n     *\n     * @example\n     *  // Insert character 'a' at position 0\n     *  xml.insert(0, [new Y.XmlText('text')])\n     *\n     * @param {number} index The index to insert content at\n     * @param {Array<YXmlElement|YXmlText>} content The array of content\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(index, content) {\n      var _this35 = this;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeListInsertGenerics(transaction, _this35, index, content);\n        });\n      } else {\n        var _this$_prelimContent2;\n\n        // @ts-ignore _prelimContent is defined because this is not yet integrated\n        (_this$_prelimContent2 = this._prelimContent).splice.apply(_this$_prelimContent2, [index, 0].concat(_toConsumableArray(content)));\n      }\n    }\n    /**\n     * Inserts new content at an index.\n     *\n     * @example\n     *  // Insert character 'a' at position 0\n     *  xml.insert(0, [new Y.XmlText('text')])\n     *\n     * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at\n     * @param {Array<YXmlElement|YXmlText>} content The array of content\n     */\n\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(ref, content) {\n      var _this36 = this;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          var refItem = ref && ref instanceof AbstractType ? ref._item : ref;\n          typeListInsertGenericsAfter(transaction, _this36, refItem, content);\n        });\n      } else {\n        var pc =\n        /** @type {Array<any>} */\n        this._prelimContent;\n        var index = ref === null ? 0 : pc.findIndex(function (el) {\n          return el === ref;\n        }) + 1;\n\n        if (index === 0 && ref !== null) {\n          throw create$2('Reference item not found');\n        }\n\n        pc.splice.apply(pc, [index, 0].concat(_toConsumableArray(content)));\n      }\n    }\n    /**\n     * Deletes elements starting from an index.\n     *\n     * @param {number} index Index at which to start deleting elements\n     * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(index) {\n      var _this37 = this;\n\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeListDelete(transaction, _this37, index, length);\n        });\n      } else {\n        // @ts-ignore _prelimContent is defined because this is not yet integrated\n        this._prelimContent.splice(index, length);\n      }\n    }\n    /**\n     * Transforms this YArray to a JavaScript Array.\n     *\n     * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return typeListToArray(this);\n    }\n    /**\n     * Appends content to this YArray.\n     *\n     * @param {Array<YXmlElement|YXmlText>} content Array of content to append.\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(content) {\n      this.insert(this.length, content);\n    }\n    /**\n     * Preppends content to this YArray.\n     *\n     * @param {Array<YXmlElement|YXmlText>} content Array of content to preppend.\n     */\n\n  }, {\n    key: \"unshift\",\n    value: function unshift(content) {\n      this.insert(0, content);\n    }\n    /**\n     * Returns the i-th element from a YArray.\n     *\n     * @param {number} index The index of the element to return from the YArray\n     * @return {YXmlElement|YXmlText}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return typeListGet(this, index);\n    }\n    /**\n     * Transforms this YArray to a JavaScript Array.\n     *\n     * @param {number} [start]\n     * @param {number} [end]\n     * @return {Array<YXmlElement|YXmlText>}\n     */\n\n  }, {\n    key: \"slice\",\n    value: function slice() {\n      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;\n      return typeListSlice(this, start, end);\n    }\n    /**\n     * Transform the properties of this type to binary and write it to an\n     * BinaryEncoder.\n     *\n     * This is called when this Item is sent to a remote peer.\n     *\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(encoder) {\n      encoder.writeTypeRef(YXmlFragmentRefID);\n    }\n  }]);\n\n  return YXmlFragment;\n}(AbstractType);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */\n\n\nvar readYXmlFragment = function readYXmlFragment(decoder) {\n  return new YXmlFragment();\n};\n/**\n * An YXmlElement imitates the behavior of a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n */\n\n\nvar YXmlElement = /*#__PURE__*/function (_YXmlFragment) {\n  _inherits(YXmlElement, _YXmlFragment);\n\n  var _super15 = _createSuper(YXmlElement);\n\n  function YXmlElement() {\n    var _this38;\n\n    var nodeName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'UNDEFINED';\n\n    _classCallCheck(this, YXmlElement);\n\n    _this38 = _super15.call(this);\n    _this38.nodeName = nodeName;\n    /**\n     * @type {Map<string, any>|null}\n     */\n\n    _this38._prelimAttrs = new Map();\n    return _this38;\n  }\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n\n\n  _createClass(YXmlElement, [{\n    key: \"nextSibling\",\n    get: function get() {\n      var n = this._item ? this._item.next : null;\n      return n ?\n      /** @type {YXmlElement|YXmlText} */\n\n      /** @type {ContentType} */\n      n.content.type : null;\n    }\n    /**\n     * @type {YXmlElement|YXmlText|null}\n     */\n\n  }, {\n    key: \"prevSibling\",\n    get: function get() {\n      var n = this._item ? this._item.prev : null;\n      return n ?\n      /** @type {YXmlElement|YXmlText} */\n\n      /** @type {ContentType} */\n      n.content.type : null;\n    }\n    /**\n     * Integrate this type into the Yjs instance.\n     *\n     * * Save this struct in the os\n     * * This type is sent to other client\n     * * Observer functions are fired\n     *\n     * @param {Doc} y The Yjs instance\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"_integrate\",\n    value: function _integrate(y, item) {\n      var _this39 = this;\n\n      _get(_getPrototypeOf(YXmlElement.prototype), \"_integrate\", this).call(this, y, item);\n\n      /** @type {Map<string, any>} */\n      this._prelimAttrs.forEach(function (value, key) {\n        _this39.setAttribute(key, value);\n      });\n\n      this._prelimAttrs = null;\n    }\n    /**\n     * Creates an Item with the same effect as this Item (without position effect)\n     *\n     * @return {YXmlElement}\n     */\n\n  }, {\n    key: \"_copy\",\n    value: function _copy() {\n      return new YXmlElement(this.nodeName);\n    }\n    /**\n     * @return {YXmlElement}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var el = new YXmlElement(this.nodeName);\n      var attrs = this.getAttributes();\n\n      for (var key in attrs) {\n        el.setAttribute(key, attrs[key]);\n      } // @ts-ignore\n\n\n      el.insert(0, el.toArray().map(function (item) {\n        return item instanceof AbstractType ? item.clone() : item;\n      }));\n      return el;\n    }\n    /**\n     * Returns the XML serialization of this YXmlElement.\n     * The attributes are ordered by attribute-name, so you can easily use this\n     * method to compare YXmlElements\n     *\n     * @return {string} The string representation of this type.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var attrs = this.getAttributes();\n      var stringBuilder = [];\n      var keys = [];\n\n      for (var key in attrs) {\n        keys.push(key);\n      }\n\n      keys.sort();\n      var keysLen = keys.length;\n\n      for (var i = 0; i < keysLen; i++) {\n        var _key = keys[i];\n        stringBuilder.push(_key + '=\"' + attrs[_key] + '\"');\n      }\n\n      var nodeName = this.nodeName.toLocaleLowerCase();\n      var attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';\n      return \"<\".concat(nodeName).concat(attrsString, \">\").concat(_get(_getPrototypeOf(YXmlElement.prototype), \"toString\", this).call(this), \"</\").concat(nodeName, \">\");\n    }\n    /**\n     * Removes an attribute from this YXmlElement.\n     *\n     * @param {String} attributeName The attribute name that is to be removed.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute(attributeName) {\n      var _this40 = this;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeMapDelete(transaction, _this40, attributeName);\n        });\n      } else {\n        /** @type {Map<string,any>} */\n        this._prelimAttrs.delete(attributeName);\n      }\n    }\n    /**\n     * Sets or updates an attribute.\n     *\n     * @param {String} attributeName The attribute name that is to be set.\n     * @param {String} attributeValue The attribute value that is to be set.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(attributeName, attributeValue) {\n      var _this41 = this;\n\n      if (this.doc !== null) {\n        _transact(this.doc, function (transaction) {\n          typeMapSet(transaction, _this41, attributeName, attributeValue);\n        });\n      } else {\n        /** @type {Map<string, any>} */\n        this._prelimAttrs.set(attributeName, attributeValue);\n      }\n    }\n    /**\n     * Returns an attribute value that belongs to the attribute name.\n     *\n     * @param {String} attributeName The attribute name that identifies the\n     *                               queried value.\n     * @return {String} The queried attribute value.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attributeName) {\n      return (\n        /** @type {any} */\n        typeMapGet(this, attributeName)\n      );\n    }\n    /**\n     * Returns all attribute name/value pairs in a JSON Object.\n     *\n     * @param {Snapshot} [snapshot]\n     * @return {Object<string, any>} A JSON Object that describes the attributes.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes(snapshot) {\n      return typeMapGetAll(this);\n    }\n    /**\n     * Creates a Dom Element that mirrors this YXmlElement.\n     *\n     * @param {Document} [_document=document] The document object (you must define\n     *                                        this when calling this method in\n     *                                        nodejs)\n     * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n     *                                             are presented in the DOM\n     * @param {any} [binding] You should not set this property. This is\n     *                               used if DomBinding wants to create a\n     *                               association to the created DOM type.\n     * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n     *\n     * @public\n     */\n\n  }, {\n    key: \"toDOM\",\n    value: function toDOM() {\n      var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\n      var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var binding = arguments.length > 2 ? arguments[2] : undefined;\n\n      var dom = _document.createElement(this.nodeName);\n\n      var attrs = this.getAttributes();\n\n      for (var key in attrs) {\n        dom.setAttribute(key, attrs[key]);\n      }\n\n      typeListForEach(this, function (yxml) {\n        dom.appendChild(yxml.toDOM(_document, hooks, binding));\n      });\n\n      if (binding !== undefined) {\n        binding._createAssociation(dom, this);\n      }\n\n      return dom;\n    }\n    /**\n     * Transform the properties of this type to binary and write it to an\n     * BinaryEncoder.\n     *\n     * This is called when this Item is sent to a remote peer.\n     *\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(encoder) {\n      encoder.writeTypeRef(YXmlElementRefID);\n      encoder.writeKey(this.nodeName);\n    }\n  }]);\n\n  return YXmlElement;\n}(YXmlFragment);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlElement}\n *\n * @function\n */\n\n\nvar readYXmlElement = function readYXmlElement(decoder) {\n  return new YXmlElement(decoder.readKey());\n};\n/**\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\n\n\nvar YXmlEvent = /*#__PURE__*/function (_YEvent4) {\n  _inherits(YXmlEvent, _YEvent4);\n\n  var _super16 = _createSuper(YXmlEvent);\n\n  /**\n   * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with wich the\n   *                                  change was created.\n   */\n  function YXmlEvent(target, subs, transaction) {\n    var _this42;\n\n    _classCallCheck(this, YXmlEvent);\n\n    _this42 = _super16.call(this, target, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n\n    _this42.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n\n    _this42.attributesChanged = new Set();\n    subs.forEach(function (sub) {\n      if (sub === null) {\n        _this42.childListChanged = true;\n      } else {\n        _this42.attributesChanged.add(sub);\n      }\n    });\n    return _this42;\n  }\n\n  return YXmlEvent;\n}(YEvent);\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\n\n\nvar YXmlHook = /*#__PURE__*/function (_YMap) {\n  _inherits(YXmlHook, _YMap);\n\n  var _super17 = _createSuper(YXmlHook);\n\n  /**\n   * @param {string} hookName nodeName of the Dom Node.\n   */\n  function YXmlHook(hookName) {\n    var _this43;\n\n    _classCallCheck(this, YXmlHook);\n\n    _this43 = _super17.call(this);\n    /**\n     * @type {string}\n     */\n\n    _this43.hookName = hookName;\n    return _this43;\n  }\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */\n\n\n  _createClass(YXmlHook, [{\n    key: \"_copy\",\n    value: function _copy() {\n      return new YXmlHook(this.hookName);\n    }\n    /**\n     * @return {YXmlHook}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var el = new YXmlHook(this.hookName);\n      this.forEach(function (value, key) {\n        el.set(key, value);\n      });\n      return el;\n    }\n    /**\n     * Creates a Dom Element that mirrors this YXmlElement.\n     *\n     * @param {Document} [_document=document] The document object (you must define\n     *                                        this when calling this method in\n     *                                        nodejs)\n     * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n     *                                             are presented in the DOM\n     * @param {any} [binding] You should not set this property. This is\n     *                               used if DomBinding wants to create a\n     *                               association to the created DOM type\n     * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n     *\n     * @public\n     */\n\n  }, {\n    key: \"toDOM\",\n    value: function toDOM() {\n      var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\n      var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var binding = arguments.length > 2 ? arguments[2] : undefined;\n      var hook = hooks[this.hookName];\n      var dom;\n\n      if (hook !== undefined) {\n        dom = hook.createDom(this);\n      } else {\n        dom = document.createElement(this.hookName);\n      }\n\n      dom.setAttribute('data-yjs-hook', this.hookName);\n\n      if (binding !== undefined) {\n        binding._createAssociation(dom, this);\n      }\n\n      return dom;\n    }\n    /**\n     * Transform the properties of this type to binary and write it to an\n     * BinaryEncoder.\n     *\n     * This is called when this Item is sent to a remote peer.\n     *\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(encoder) {\n      encoder.writeTypeRef(YXmlHookRefID);\n      encoder.writeKey(this.hookName);\n    }\n  }]);\n\n  return YXmlHook;\n}(YMap);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */\n\n\nvar readYXmlHook = function readYXmlHook(decoder) {\n  return new YXmlHook(decoder.readKey());\n};\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\n\n\nvar YXmlText = /*#__PURE__*/function (_YText) {\n  _inherits(YXmlText, _YText);\n\n  var _super18 = _createSuper(YXmlText);\n\n  function YXmlText() {\n    _classCallCheck(this, YXmlText);\n\n    return _super18.apply(this, arguments);\n  }\n\n  _createClass(YXmlText, [{\n    key: \"nextSibling\",\n    get:\n    /**\n     * @type {YXmlElement|YXmlText|null}\n     */\n    function get() {\n      var n = this._item ? this._item.next : null;\n      return n ?\n      /** @type {YXmlElement|YXmlText} */\n\n      /** @type {ContentType} */\n      n.content.type : null;\n    }\n    /**\n     * @type {YXmlElement|YXmlText|null}\n     */\n\n  }, {\n    key: \"prevSibling\",\n    get: function get() {\n      var n = this._item ? this._item.prev : null;\n      return n ?\n      /** @type {YXmlElement|YXmlText} */\n\n      /** @type {ContentType} */\n      n.content.type : null;\n    }\n  }, {\n    key: \"_copy\",\n    value: function _copy() {\n      return new YXmlText();\n    }\n    /**\n     * @return {YXmlText}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var text = new YXmlText();\n      text.applyDelta(this.toDelta());\n      return text;\n    }\n    /**\n     * Creates a Dom Element that mirrors this YXmlText.\n     *\n     * @param {Document} [_document=document] The document object (you must define\n     *                                        this when calling this method in\n     *                                        nodejs)\n     * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n     *                                             are presented in the DOM\n     * @param {any} [binding] You should not set this property. This is\n     *                               used if DomBinding wants to create a\n     *                               association to the created DOM type.\n     * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n     *\n     * @public\n     */\n\n  }, {\n    key: \"toDOM\",\n    value: function toDOM() {\n      var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\n      var hooks = arguments.length > 1 ? arguments[1] : undefined;\n      var binding = arguments.length > 2 ? arguments[2] : undefined;\n\n      var dom = _document.createTextNode(this.toString());\n\n      if (binding !== undefined) {\n        binding._createAssociation(dom, this);\n      }\n\n      return dom;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // @ts-ignore\n      return this.toDelta().map(function (delta) {\n        var nestedNodes = [];\n\n        for (var nodeName in delta.attributes) {\n          var attrs = [];\n\n          for (var key in delta.attributes[nodeName]) {\n            attrs.push({\n              key: key,\n              value: delta.attributes[nodeName][key]\n            });\n          } // sort attributes to get a unique order\n\n\n          attrs.sort(function (a, b) {\n            return a.key < b.key ? -1 : 1;\n          });\n          nestedNodes.push({\n            nodeName: nodeName,\n            attrs: attrs\n          });\n        } // sort node order to get a unique order\n\n\n        nestedNodes.sort(function (a, b) {\n          return a.nodeName < b.nodeName ? -1 : 1;\n        }); // now convert to dom string\n\n        var str = '';\n\n        for (var i = 0; i < nestedNodes.length; i++) {\n          var node = nestedNodes[i];\n          str += \"<\".concat(node.nodeName);\n\n          for (var j = 0; j < node.attrs.length; j++) {\n            var attr = node.attrs[j];\n            str += \" \".concat(attr.key, \"=\\\"\").concat(attr.value, \"\\\"\");\n          }\n\n          str += '>';\n        }\n\n        str += delta.insert;\n\n        for (var _i7 = nestedNodes.length - 1; _i7 >= 0; _i7--) {\n          str += \"</\".concat(nestedNodes[_i7].nodeName, \">\");\n        }\n\n        return str;\n      }).join('');\n    }\n    /**\n     * @return {string}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(encoder) {\n      encoder.writeTypeRef(YXmlTextRefID);\n    }\n  }]);\n\n  return YXmlText;\n}(YText);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */\n\n\nvar readYXmlText = function readYXmlText(decoder) {\n  return new YXmlText();\n};\n\nvar AbstractStruct = /*#__PURE__*/function () {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  function AbstractStruct(id, length) {\n    _classCallCheck(this, AbstractStruct);\n\n    this.id = id;\n    this.length = length;\n  }\n  /**\n   * @type {boolean}\n   */\n\n\n  _createClass(AbstractStruct, [{\n    key: \"deleted\",\n    get: function get() {\n      throw methodUnimplemented();\n    }\n    /**\n     * Merge this struct with the item to the right.\n     * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n     * Also this method does *not* remove right from StructStore!\n     * @param {AbstractStruct} right\n     * @return {boolean} wether this merged with right\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      return false;\n    }\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n     * @param {number} offset\n     * @param {number} encodingRef\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset, encodingRef) {\n      throw methodUnimplemented();\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, offset) {\n      throw methodUnimplemented();\n    }\n  }]);\n\n  return AbstractStruct;\n}();\n\nvar structGCRefNumber = 0;\n/**\n * @private\n */\n\nvar GC = /*#__PURE__*/function (_AbstractStruct) {\n  _inherits(GC, _AbstractStruct);\n\n  var _super19 = _createSuper(GC);\n\n  function GC() {\n    _classCallCheck(this, GC);\n\n    return _super19.apply(this, arguments);\n  }\n\n  _createClass(GC, [{\n    key: \"deleted\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {}\n    /**\n     * @param {GC} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      if (this.constructor !== right.constructor) {\n        return false;\n      }\n\n      this.length += right.length;\n      return true;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, offset) {\n      if (offset > 0) {\n        this.id.clock += offset;\n        this.length -= offset;\n      }\n\n      addStruct(transaction.doc.store, this);\n    }\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      encoder.writeInfo(structGCRefNumber);\n      encoder.writeLen(this.length - offset);\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {StructStore} store\n     * @return {null | number}\n     */\n\n  }, {\n    key: \"getMissing\",\n    value: function getMissing(transaction, store) {\n      return null;\n    }\n  }]);\n\n  return GC;\n}(AbstractStruct);\n\nvar ContentBinary = /*#__PURE__*/function () {\n  /**\n   * @param {Uint8Array} content\n   */\n  function ContentBinary(content) {\n    _classCallCheck(this, ContentBinary);\n\n    this.content = content;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  _createClass(ContentBinary, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return 1;\n    }\n    /**\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return [this.content];\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isCountable\",\n    value: function isCountable() {\n      return true;\n    }\n    /**\n     * @return {ContentBinary}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new ContentBinary(this.content);\n    }\n    /**\n     * @param {number} offset\n     * @return {ContentBinary}\n     */\n\n  }, {\n    key: \"splice\",\n    value: function splice(offset) {\n      throw methodUnimplemented();\n    }\n    /**\n     * @param {ContentBinary} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      return false;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, item) {}\n    /**\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {}\n    /**\n     * @param {StructStore} store\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store) {}\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      encoder.writeBuf(this.content);\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRef\",\n    value: function getRef() {\n      return 3;\n    }\n  }]);\n\n  return ContentBinary;\n}();\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentBinary}\n */\n\n\nvar readContentBinary = function readContentBinary(decoder) {\n  return new ContentBinary(decoder.readBuf());\n};\n\nvar ContentDeleted = /*#__PURE__*/function () {\n  /**\n   * @param {number} len\n   */\n  function ContentDeleted(len) {\n    _classCallCheck(this, ContentDeleted);\n\n    this.len = len;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  _createClass(ContentDeleted, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return this.len;\n    }\n    /**\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return [];\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isCountable\",\n    value: function isCountable() {\n      return false;\n    }\n    /**\n     * @return {ContentDeleted}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new ContentDeleted(this.len);\n    }\n    /**\n     * @param {number} offset\n     * @return {ContentDeleted}\n     */\n\n  }, {\n    key: \"splice\",\n    value: function splice(offset) {\n      var right = new ContentDeleted(this.len - offset);\n      this.len = offset;\n      return right;\n    }\n    /**\n     * @param {ContentDeleted} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      this.len += right.len;\n      return true;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, item) {\n      addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len);\n      item.markDeleted();\n    }\n    /**\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {}\n    /**\n     * @param {StructStore} store\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store) {}\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      encoder.writeLen(this.len - offset);\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRef\",\n    value: function getRef() {\n      return 1;\n    }\n  }]);\n\n  return ContentDeleted;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentDeleted}\n */\n\n\nvar readContentDeleted = function readContentDeleted(decoder) {\n  return new ContentDeleted(decoder.readLen());\n};\n/**\n * @private\n */\n\n\nvar ContentDoc = /*#__PURE__*/function () {\n  /**\n   * @param {Doc} doc\n   */\n  function ContentDoc(doc) {\n    _classCallCheck(this, ContentDoc);\n\n    if (doc._item) {\n      console.error('This document was already integrated as a sub-document. You should create a second instance instead with the same guid.');\n    }\n    /**\n     * @type {Doc}\n     */\n\n\n    this.doc = doc;\n    /**\n     * @type {any}\n     */\n\n    var opts = {};\n    this.opts = opts;\n\n    if (!doc.gc) {\n      opts.gc = false;\n    }\n\n    if (doc.autoLoad) {\n      opts.autoLoad = true;\n    }\n\n    if (doc.meta !== null) {\n      opts.meta = doc.meta;\n    }\n  }\n  /**\n   * @return {number}\n   */\n\n\n  _createClass(ContentDoc, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return 1;\n    }\n    /**\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return [this.doc];\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isCountable\",\n    value: function isCountable() {\n      return true;\n    }\n    /**\n     * @return {ContentDoc}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new ContentDoc(this.doc);\n    }\n    /**\n     * @param {number} offset\n     * @return {ContentDoc}\n     */\n\n  }, {\n    key: \"splice\",\n    value: function splice(offset) {\n      throw methodUnimplemented();\n    }\n    /**\n     * @param {ContentDoc} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      return false;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, item) {\n      // this needs to be reflected in doc.destroy as well\n      this.doc._item = item;\n      transaction.subdocsAdded.add(this.doc);\n\n      if (this.doc.shouldLoad) {\n        transaction.subdocsLoaded.add(this.doc);\n      }\n    }\n    /**\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {\n      if (transaction.subdocsAdded.has(this.doc)) {\n        transaction.subdocsAdded.delete(this.doc);\n      } else {\n        transaction.subdocsRemoved.add(this.doc);\n      }\n    }\n    /**\n     * @param {StructStore} store\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store) {}\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      encoder.writeString(this.doc.guid);\n      encoder.writeAny(this.opts);\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRef\",\n    value: function getRef() {\n      return 9;\n    }\n  }]);\n\n  return ContentDoc;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentDoc}\n */\n\n\nvar readContentDoc = function readContentDoc(decoder) {\n  return new ContentDoc(new Doc(_objectSpread({\n    guid: decoder.readString()\n  }, decoder.readAny())));\n};\n/**\n * @private\n */\n\n\nvar ContentEmbed = /*#__PURE__*/function () {\n  /**\n   * @param {Object} embed\n   */\n  function ContentEmbed(embed) {\n    _classCallCheck(this, ContentEmbed);\n\n    this.embed = embed;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  _createClass(ContentEmbed, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return 1;\n    }\n    /**\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return [this.embed];\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isCountable\",\n    value: function isCountable() {\n      return true;\n    }\n    /**\n     * @return {ContentEmbed}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new ContentEmbed(this.embed);\n    }\n    /**\n     * @param {number} offset\n     * @return {ContentEmbed}\n     */\n\n  }, {\n    key: \"splice\",\n    value: function splice(offset) {\n      throw methodUnimplemented();\n    }\n    /**\n     * @param {ContentEmbed} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      return false;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, item) {}\n    /**\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {}\n    /**\n     * @param {StructStore} store\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store) {}\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      encoder.writeJSON(this.embed);\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRef\",\n    value: function getRef() {\n      return 5;\n    }\n  }]);\n\n  return ContentEmbed;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentEmbed}\n */\n\n\nvar readContentEmbed = function readContentEmbed(decoder) {\n  return new ContentEmbed(decoder.readJSON());\n};\n/**\n * @private\n */\n\n\nvar ContentFormat = /*#__PURE__*/function () {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  function ContentFormat(key, value) {\n    _classCallCheck(this, ContentFormat);\n\n    this.key = key;\n    this.value = value;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  _createClass(ContentFormat, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return 1;\n    }\n    /**\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return [];\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isCountable\",\n    value: function isCountable() {\n      return false;\n    }\n    /**\n     * @return {ContentFormat}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new ContentFormat(this.key, this.value);\n    }\n    /**\n     * @param {number} offset\n     * @return {ContentFormat}\n     */\n\n  }, {\n    key: \"splice\",\n    value: function splice(offset) {\n      throw methodUnimplemented();\n    }\n    /**\n     * @param {ContentFormat} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      return false;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, item) {\n      // @todo searchmarker are currently unsupported for rich text documents\n\n      /** @type {AbstractType<any>} */\n      item.parent._searchMarker = null;\n    }\n    /**\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {}\n    /**\n     * @param {StructStore} store\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store) {}\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      encoder.writeKey(this.key);\n      encoder.writeJSON(this.value);\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRef\",\n    value: function getRef() {\n      return 6;\n    }\n  }]);\n\n  return ContentFormat;\n}();\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentFormat}\n */\n\n\nvar readContentFormat = function readContentFormat(decoder) {\n  return new ContentFormat(decoder.readString(), decoder.readJSON());\n};\n/**\n * @private\n */\n\n\nvar ContentJSON = /*#__PURE__*/function () {\n  /**\n   * @param {Array<any>} arr\n   */\n  function ContentJSON(arr) {\n    _classCallCheck(this, ContentJSON);\n\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  _createClass(ContentJSON, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return this.arr.length;\n    }\n    /**\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this.arr;\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isCountable\",\n    value: function isCountable() {\n      return true;\n    }\n    /**\n     * @return {ContentJSON}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new ContentJSON(this.arr);\n    }\n    /**\n     * @param {number} offset\n     * @return {ContentJSON}\n     */\n\n  }, {\n    key: \"splice\",\n    value: function splice(offset) {\n      var right = new ContentJSON(this.arr.slice(offset));\n      this.arr = this.arr.slice(0, offset);\n      return right;\n    }\n    /**\n     * @param {ContentJSON} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      this.arr = this.arr.concat(right.arr);\n      return true;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, item) {}\n    /**\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {}\n    /**\n     * @param {StructStore} store\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store) {}\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      var len = this.arr.length;\n      encoder.writeLen(len - offset);\n\n      for (var i = offset; i < len; i++) {\n        var c = this.arr[i];\n        encoder.writeString(c === undefined ? 'undefined' : JSON.stringify(c));\n      }\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRef\",\n    value: function getRef() {\n      return 2;\n    }\n  }]);\n\n  return ContentJSON;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentJSON}\n */\n\n\nvar readContentJSON = function readContentJSON(decoder) {\n  var len = decoder.readLen();\n  var cs = [];\n\n  for (var i = 0; i < len; i++) {\n    var c = decoder.readString();\n\n    if (c === 'undefined') {\n      cs.push(undefined);\n    } else {\n      cs.push(JSON.parse(c));\n    }\n  }\n\n  return new ContentJSON(cs);\n};\n\nvar ContentAny = /*#__PURE__*/function () {\n  /**\n   * @param {Array<any>} arr\n   */\n  function ContentAny(arr) {\n    _classCallCheck(this, ContentAny);\n\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  _createClass(ContentAny, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return this.arr.length;\n    }\n    /**\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this.arr;\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isCountable\",\n    value: function isCountable() {\n      return true;\n    }\n    /**\n     * @return {ContentAny}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new ContentAny(this.arr);\n    }\n    /**\n     * @param {number} offset\n     * @return {ContentAny}\n     */\n\n  }, {\n    key: \"splice\",\n    value: function splice(offset) {\n      var right = new ContentAny(this.arr.slice(offset));\n      this.arr = this.arr.slice(0, offset);\n      return right;\n    }\n    /**\n     * @param {ContentAny} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      this.arr = this.arr.concat(right.arr);\n      return true;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, item) {}\n    /**\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {}\n    /**\n     * @param {StructStore} store\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store) {}\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      var len = this.arr.length;\n      encoder.writeLen(len - offset);\n\n      for (var i = offset; i < len; i++) {\n        var c = this.arr[i];\n        encoder.writeAny(c);\n      }\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRef\",\n    value: function getRef() {\n      return 8;\n    }\n  }]);\n\n  return ContentAny;\n}();\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentAny}\n */\n\n\nvar readContentAny = function readContentAny(decoder) {\n  var len = decoder.readLen();\n  var cs = [];\n\n  for (var i = 0; i < len; i++) {\n    cs.push(decoder.readAny());\n  }\n\n  return new ContentAny(cs);\n};\n/**\n * @private\n */\n\n\nvar ContentString = /*#__PURE__*/function () {\n  /**\n   * @param {string} str\n   */\n  function ContentString(str) {\n    _classCallCheck(this, ContentString);\n\n    /**\n     * @type {string}\n     */\n    this.str = str;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  _createClass(ContentString, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return this.str.length;\n    }\n    /**\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this.str.split('');\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isCountable\",\n    value: function isCountable() {\n      return true;\n    }\n    /**\n     * @return {ContentString}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new ContentString(this.str);\n    }\n    /**\n     * @param {number} offset\n     * @return {ContentString}\n     */\n\n  }, {\n    key: \"splice\",\n    value: function splice(offset) {\n      var right = new ContentString(this.str.slice(offset));\n      this.str = this.str.slice(0, offset); // Prevent encoding invalid documents because of splitting of surrogate pairs: https://github.com/yjs/yjs/issues/248\n\n      var firstCharCode = this.str.charCodeAt(offset - 1);\n\n      if (firstCharCode >= 0xD800 && firstCharCode <= 0xDBFF) {\n        // Last character of the left split is the start of a surrogate utf16/ucs2 pair.\n        // We don't support splitting of surrogate pairs because this may lead to invalid documents.\n        // Replace the invalid character with a unicode replacement character (� / U+FFFD)\n        this.str = this.str.slice(0, offset - 1) + '�'; // replace right as well\n\n        right.str = '�' + right.str.slice(1);\n      }\n\n      return right;\n    }\n    /**\n     * @param {ContentString} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      this.str += right.str;\n      return true;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, item) {}\n    /**\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {}\n    /**\n     * @param {StructStore} store\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store) {}\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      encoder.writeString(offset === 0 ? this.str : this.str.slice(offset));\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRef\",\n    value: function getRef() {\n      return 4;\n    }\n  }]);\n\n  return ContentString;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentString}\n */\n\n\nvar readContentString = function readContentString(decoder) {\n  return new ContentString(decoder.readString());\n};\n/**\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractType<any>>}\n * @private\n */\n\n\nvar typeRefs = [readYArray, readYMap, readYText, readYXmlElement, readYXmlFragment, readYXmlHook, readYXmlText];\nvar YArrayRefID = 0;\nvar YMapRefID = 1;\nvar YTextRefID = 2;\nvar YXmlElementRefID = 3;\nvar YXmlFragmentRefID = 4;\nvar YXmlHookRefID = 5;\nvar YXmlTextRefID = 6;\n/**\n * @private\n */\n\nvar ContentType = /*#__PURE__*/function () {\n  /**\n   * @param {AbstractType<YEvent>} type\n   */\n  function ContentType(type) {\n    _classCallCheck(this, ContentType);\n\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  _createClass(ContentType, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return 1;\n    }\n    /**\n     * @return {Array<any>}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return [this.type];\n    }\n    /**\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isCountable\",\n    value: function isCountable() {\n      return true;\n    }\n    /**\n     * @return {ContentType}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new ContentType(this.type._copy());\n    }\n    /**\n     * @param {number} offset\n     * @return {ContentType}\n     */\n\n  }, {\n    key: \"splice\",\n    value: function splice(offset) {\n      throw methodUnimplemented();\n    }\n    /**\n     * @param {ContentType} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      return false;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {Item} item\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, item) {\n      this.type._integrate(transaction.doc, item);\n    }\n    /**\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {\n      var item = this.type._start;\n\n      while (item !== null) {\n        if (!item.deleted) {\n          item.delete(transaction);\n        } else {\n          // Whis will be gc'd later and we want to merge it if possible\n          // We try to merge all deleted items after each transaction,\n          // but we have no knowledge about that this needs to be merged\n          // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n          transaction._mergeStructs.push(item);\n        }\n\n        item = item.right;\n      }\n\n      this.type._map.forEach(function (item) {\n        if (!item.deleted) {\n          item.delete(transaction);\n        } else {\n          // same as above\n          transaction._mergeStructs.push(item);\n        }\n      });\n\n      transaction.changed.delete(this.type);\n    }\n    /**\n     * @param {StructStore} store\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store) {\n      var item = this.type._start;\n\n      while (item !== null) {\n        item.gc(store, true);\n        item = item.right;\n      }\n\n      this.type._start = null;\n\n      this.type._map.forEach(\n      /** @param {Item | null} item */\n      function (item) {\n        while (item !== null) {\n          item.gc(store, true);\n          item = item.left;\n        }\n      });\n\n      this.type._map = new Map();\n    }\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      this.type._write(encoder);\n    }\n    /**\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRef\",\n    value: function getRef() {\n      return 7;\n    }\n  }]);\n\n  return ContentType;\n}();\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentType}\n */\n\n\nvar readContentType = function readContentType(decoder) {\n  return new ContentType(typeRefs[decoder.readTypeRef()](decoder));\n};\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */\n\n\nvar followRedone = function followRedone(store, id) {\n  /**\n   * @type {ID|null}\n   */\n  var nextID = id;\n  var diff = 0;\n  var item;\n\n  do {\n    if (diff > 0) {\n      nextID = createID(nextID.client, nextID.clock + diff);\n    }\n\n    item = getItem(store, nextID);\n    diff = nextID.clock - item.id.clock;\n    nextID = item.redone;\n  } while (nextID !== null && item instanceof Item);\n\n  return {\n    item: item,\n    diff: diff\n  };\n};\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */\n\n\nvar keepItem = function keepItem(item, keep) {\n  while (item !== null && item.keep !== keep) {\n    item.keep = keep;\n    item =\n    /** @type {AbstractType<any>} */\n    item.parent._item;\n  }\n};\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\n\n\nvar splitItem = function splitItem(transaction, leftItem, diff) {\n  // create rightItem\n  var _leftItem$id2 = leftItem.id,\n      client = _leftItem$id2.client,\n      clock = _leftItem$id2.clock;\n  var rightItem = new Item(createID(client, clock + diff), leftItem, createID(client, clock + diff - 1), leftItem.right, leftItem.rightOrigin, leftItem.parent, leftItem.parentSub, leftItem.content.splice(diff));\n\n  if (leftItem.deleted) {\n    rightItem.markDeleted();\n  }\n\n  if (leftItem.keep) {\n    rightItem.keep = true;\n  }\n\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff);\n  } // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n\n\n  leftItem.right = rightItem; // update right\n\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem;\n  } // right is more specific.\n\n\n  transaction._mergeStructs.push(rightItem); // update parent._map\n\n\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */\n    rightItem.parent._map.set(rightItem.parentSub, rightItem);\n  }\n\n  leftItem.length = diff;\n  return rightItem;\n};\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n *\n * @return {Item|null}\n *\n * @private\n */\n\n\nvar redoItem = function redoItem(transaction, item, redoitems) {\n  var doc = transaction.doc;\n  var store = doc.store;\n  var ownClientID = doc.clientID;\n  var redone = item.redone;\n\n  if (redone !== null) {\n    return getItemCleanStart(transaction, redone);\n  }\n\n  var parentItem =\n  /** @type {AbstractType<any>} */\n  item.parent._item;\n  /**\n   * @type {Item|null}\n   */\n\n  var left;\n  /**\n   * @type {Item|null}\n   */\n\n  var right;\n\n  if (item.parentSub === null) {\n    // Is an array item. Insert at the old position\n    left = item.left;\n    right = item;\n  } else {\n    // Is a map item. Insert as current value\n    left = item;\n\n    while (left.right !== null) {\n      left = left.right;\n\n      if (left.id.client !== ownClientID) {\n        // It is not possible to redo this item because it conflicts with a\n        // change from another client\n        return null;\n      }\n    }\n\n    if (left.right !== null) {\n      left =\n      /** @type {Item} */\n\n      /** @type {AbstractType<any>} */\n      item.parent._map.get(item.parentSub);\n    }\n\n    right = null;\n  } // make sure that parent is redone\n\n\n  if (parentItem !== null && parentItem.deleted === true && parentItem.redone === null) {\n    // try to undo parent if it will be undone anyway\n    if (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems) === null) {\n      return null;\n    }\n  }\n\n  if (parentItem !== null && parentItem.redone !== null) {\n    while (parentItem.redone !== null) {\n      parentItem = getItemCleanStart(transaction, parentItem.redone);\n    } // find next cloned_redo items\n\n\n    while (left !== null) {\n      /**\n       * @type {Item|null}\n       */\n      var leftTrace = left; // trace redone until parent matches\n\n      while (leftTrace !== null &&\n      /** @type {AbstractType<any>} */\n      leftTrace.parent._item !== parentItem) {\n        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone);\n      }\n\n      if (leftTrace !== null &&\n      /** @type {AbstractType<any>} */\n      leftTrace.parent._item === parentItem) {\n        left = leftTrace;\n        break;\n      }\n\n      left = left.left;\n    }\n\n    while (right !== null) {\n      /**\n       * @type {Item|null}\n       */\n      var rightTrace = right; // trace redone until parent matches\n\n      while (rightTrace !== null &&\n      /** @type {AbstractType<any>} */\n      rightTrace.parent._item !== parentItem) {\n        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone);\n      }\n\n      if (rightTrace !== null &&\n      /** @type {AbstractType<any>} */\n      rightTrace.parent._item === parentItem) {\n        right = rightTrace;\n        break;\n      }\n\n      right = right.right;\n    }\n  }\n\n  var nextClock = getState(store, ownClientID);\n  var nextId = createID(ownClientID, nextClock);\n  var redoneItem = new Item(nextId, left, left && left.lastId, right, right && right.id, parentItem === null ? item.parent :\n  /** @type {ContentType} */\n  parentItem.content.type, item.parentSub, item.content.copy());\n  item.redone = nextId;\n  keepItem(redoneItem, true);\n  redoneItem.integrate(transaction, 0);\n  return redoneItem;\n};\n/**\n * Abstract class that represents any content.\n */\n\n\nvar Item = /*#__PURE__*/function (_AbstractStruct2) {\n  _inherits(Item, _AbstractStruct2);\n\n  var _super20 = _createSuper(Item);\n\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  function Item(id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    var _this44;\n\n    _classCallCheck(this, Item);\n\n    _this44 = _super20.call(this, id, content.getLength());\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n\n    _this44.origin = origin;\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n\n    _this44.left = left;\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n\n    _this44.right = right;\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n\n    _this44.rightOrigin = rightOrigin;\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n\n    _this44.parent = parent;\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n\n    _this44.parentSub = parentSub;\n    /**\n     * If this type's effect is reundone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n\n    _this44.redone = null;\n    /**\n     * @type {AbstractContent}\n     */\n\n    _this44.content = content;\n    /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */\n\n    _this44.info = _this44.content.isCountable() ? BIT2 : 0;\n    return _this44;\n  }\n  /**\n   * This is used to mark the item as an indexed fast-search marker\n   *\n   * @type {boolean}\n   */\n\n\n  _createClass(Item, [{\n    key: \"marker\",\n    get: function get() {\n      return (this.info & BIT4) > 0;\n    }\n    /**\n     * If true, do not garbage collect this Item.\n     */\n    ,\n    set: function set(isMarked) {\n      if ((this.info & BIT4) > 0 !== isMarked) {\n        this.info ^= BIT4;\n      }\n    }\n  }, {\n    key: \"keep\",\n    get: function get() {\n      return (this.info & BIT1) > 0;\n    },\n    set: function set(doKeep) {\n      if (this.keep !== doKeep) {\n        this.info ^= BIT1;\n      }\n    }\n  }, {\n    key: \"countable\",\n    get: function get() {\n      return (this.info & BIT2) > 0;\n    }\n    /**\n     * Whether this item was deleted or not.\n     * @type {Boolean}\n     */\n\n  }, {\n    key: \"deleted\",\n    get: function get() {\n      return (this.info & BIT3) > 0;\n    },\n    set: function set(doDelete) {\n      if (this.deleted !== doDelete) {\n        this.info ^= BIT3;\n      }\n    }\n  }, {\n    key: \"markDeleted\",\n    value: function markDeleted() {\n      this.info |= BIT3;\n    }\n    /**\n     * Return the creator clientID of the missing op or define missing items and return null.\n     *\n     * @param {Transaction} transaction\n     * @param {StructStore} store\n     * @return {null | number}\n     */\n\n  }, {\n    key: \"getMissing\",\n    value: function getMissing(transaction, store) {\n      if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {\n        return this.origin.client;\n      }\n\n      if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {\n        return this.rightOrigin.client;\n      }\n\n      if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {\n        return this.parent.client;\n      } // We have all missing ids, now find the items\n\n\n      if (this.origin) {\n        this.left = getItemCleanEnd(transaction, store, this.origin);\n        this.origin = this.left.lastId;\n      }\n\n      if (this.rightOrigin) {\n        this.right = getItemCleanStart(transaction, this.rightOrigin);\n        this.rightOrigin = this.right.id;\n      }\n\n      if (this.left && this.left.constructor === GC || this.right && this.right.constructor === GC) {\n        this.parent = null;\n      } // only set parent if this shouldn't be garbage collected\n\n\n      if (!this.parent) {\n        if (this.left && this.left.constructor === Item) {\n          this.parent = this.left.parent;\n          this.parentSub = this.left.parentSub;\n        }\n\n        if (this.right && this.right.constructor === Item) {\n          this.parent = this.right.parent;\n          this.parentSub = this.right.parentSub;\n        }\n      } else if (this.parent.constructor === ID) {\n        var parentItem = getItem(store, this.parent);\n\n        if (parentItem.constructor === GC) {\n          this.parent = null;\n        } else {\n          this.parent =\n          /** @type {ContentType} */\n          parentItem.content.type;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, offset) {\n      if (offset > 0) {\n        this.id.clock += offset;\n        this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1));\n        this.origin = this.left.lastId;\n        this.content = this.content.splice(offset);\n        this.length -= offset;\n      }\n\n      if (this.parent) {\n        if (!this.left && (!this.right || this.right.left !== null) || this.left && this.left.right !== this.right) {\n          /**\n           * @type {Item|null}\n           */\n          var left = this.left;\n          /**\n           * @type {Item|null}\n           */\n\n          var o; // set o to the first conflicting item\n\n          if (left !== null) {\n            o = left.right;\n          } else if (this.parentSub !== null) {\n            o =\n            /** @type {AbstractType<any>} */\n            this.parent._map.get(this.parentSub) || null;\n\n            while (o !== null && o.left !== null) {\n              o = o.left;\n            }\n          } else {\n            o =\n            /** @type {AbstractType<any>} */\n            this.parent._start;\n          } // TODO: use something like DeleteSet here (a tree implementation would be best)\n          // @todo use global set definitions\n\n          /**\n           * @type {Set<Item>}\n           */\n\n\n          var conflictingItems = new Set();\n          /**\n           * @type {Set<Item>}\n           */\n\n          var itemsBeforeOrigin = new Set(); // Let c in conflictingItems, b in itemsBeforeOrigin\n          // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n          // Note that conflictingItems is a subset of itemsBeforeOrigin\n\n          while (o !== null && o !== this.right) {\n            itemsBeforeOrigin.add(o);\n            conflictingItems.add(o);\n\n            if (compareIDs(this.origin, o.origin)) {\n              // case 1\n              if (o.id.client < this.id.client) {\n                left = o;\n                conflictingItems.clear();\n              } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {\n                // this and o are conflicting and point to the same integration points. The id decides which item comes first.\n                // Since this is to the left of o, we can break here\n                break;\n              } // else, o might be integrated before an item that this conflicts with. If so, we will find it in the next iterations\n\n            } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) {\n              // use getItem instead of getItemCleanEnd because we don't want / need to split items.\n              // case 2\n              if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {\n                left = o;\n                conflictingItems.clear();\n              }\n            } else {\n              break;\n            }\n\n            o = o.right;\n          }\n\n          this.left = left;\n        } // reconnect left/right + update parent map/start if necessary\n\n\n        if (this.left !== null) {\n          var right = this.left.right;\n          this.right = right;\n          this.left.right = this;\n        } else {\n          var r;\n\n          if (this.parentSub !== null) {\n            r =\n            /** @type {AbstractType<any>} */\n            this.parent._map.get(this.parentSub) || null;\n\n            while (r !== null && r.left !== null) {\n              r = r.left;\n            }\n          } else {\n            r =\n            /** @type {AbstractType<any>} */\n            this.parent._start;\n            /** @type {AbstractType<any>} */\n\n            this.parent._start = this;\n          }\n\n          this.right = r;\n        }\n\n        if (this.right !== null) {\n          this.right.left = this;\n        } else if (this.parentSub !== null) {\n          // set as current parent value if right === null and this is parentSub\n\n          /** @type {AbstractType<any>} */\n          this.parent._map.set(this.parentSub, this);\n\n          if (this.left !== null) {\n            // this is the current attribute value of parent. delete right\n            this.left.delete(transaction);\n          }\n        } // adjust length of parent\n\n\n        if (this.parentSub === null && this.countable && !this.deleted) {\n          /** @type {AbstractType<any>} */\n          this.parent._length += this.length;\n        }\n\n        addStruct(transaction.doc.store, this);\n        this.content.integrate(transaction, this); // add parent to transaction.changed\n\n        addChangedTypeToTransaction(transaction,\n        /** @type {AbstractType<any>} */\n        this.parent, this.parentSub);\n\n        if (\n        /** @type {AbstractType<any>} */\n        this.parent._item !== null &&\n        /** @type {AbstractType<any>} */\n        this.parent._item.deleted || this.parentSub !== null && this.right !== null) {\n          // delete if parent is deleted or if this is not the current attribute value of parent\n          this.delete(transaction);\n        }\n      } else {\n        // parent is not defined. Integrate GC struct instead\n        new GC(this.id, this.length).integrate(transaction, 0);\n      }\n    }\n    /**\n     * Returns the next non-deleted item\n     */\n\n  }, {\n    key: \"next\",\n    get: function get() {\n      var n = this.right;\n\n      while (n !== null && n.deleted) {\n        n = n.right;\n      }\n\n      return n;\n    }\n    /**\n     * Returns the previous non-deleted item\n     */\n\n  }, {\n    key: \"prev\",\n    get: function get() {\n      var n = this.left;\n\n      while (n !== null && n.deleted) {\n        n = n.left;\n      }\n\n      return n;\n    }\n    /**\n     * Computes the last content address of this Item.\n     */\n\n  }, {\n    key: \"lastId\",\n    get: function get() {\n      // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n      return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1);\n    }\n    /**\n     * Try to merge two items\n     *\n     * @param {Item} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      if (this.constructor === right.constructor && compareIDs(right.origin, this.lastId) && this.right === right && compareIDs(this.rightOrigin, right.rightOrigin) && this.id.client === right.id.client && this.id.clock + this.length === right.id.clock && this.deleted === right.deleted && this.redone === null && right.redone === null && this.content.constructor === right.content.constructor && this.content.mergeWith(right.content)) {\n        if (right.keep) {\n          this.keep = true;\n        }\n\n        this.right = right.right;\n\n        if (this.right !== null) {\n          this.right.left = this;\n        }\n\n        this.length += right.length;\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Mark this Item as deleted.\n     *\n     * @param {Transaction} transaction\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(transaction) {\n      if (!this.deleted) {\n        var parent =\n        /** @type {AbstractType<any>} */\n        this.parent; // adjust the length of parent\n\n        if (this.countable && this.parentSub === null) {\n          parent._length -= this.length;\n        }\n\n        this.markDeleted();\n        addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length);\n        addChangedTypeToTransaction(transaction, parent, this.parentSub);\n        this.content.delete(transaction);\n      }\n    }\n    /**\n     * @param {StructStore} store\n     * @param {boolean} parentGCd\n     */\n\n  }, {\n    key: \"gc\",\n    value: function gc(store, parentGCd) {\n      if (!this.deleted) {\n        throw unexpectedCase();\n      }\n\n      this.content.gc(store);\n\n      if (parentGCd) {\n        replaceStruct(store, this, new GC(this.id, this.length));\n      } else {\n        this.content = new ContentDeleted(this.length);\n      }\n    }\n    /**\n     * Transform the properties of this type to binary and write it to an\n     * BinaryEncoder.\n     *\n     * This is called when this Item is sent to a remote peer.\n     *\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      var origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin;\n      var rightOrigin = this.rightOrigin;\n      var parentSub = this.parentSub;\n      var info = this.content.getRef() & BITS5 | (origin === null ? 0 : BIT8) | ( // origin is defined\n      rightOrigin === null ? 0 : BIT7) | ( // right origin is defined\n      parentSub === null ? 0 : BIT6); // parentSub is non-null\n\n      encoder.writeInfo(info);\n\n      if (origin !== null) {\n        encoder.writeLeftID(origin);\n      }\n\n      if (rightOrigin !== null) {\n        encoder.writeRightID(rightOrigin);\n      }\n\n      if (origin === null && rightOrigin === null) {\n        var parent =\n        /** @type {AbstractType<any>} */\n        this.parent;\n\n        if (parent._item !== undefined) {\n          var parentItem = parent._item;\n\n          if (parentItem === null) {\n            // parent type on y._map\n            // find the correct key\n            var ykey = findRootTypeKey(parent);\n            encoder.writeParentInfo(true); // write parentYKey\n\n            encoder.writeString(ykey);\n          } else {\n            encoder.writeParentInfo(false); // write parent id\n\n            encoder.writeLeftID(parentItem.id);\n          }\n        } else if (parent.constructor === String) {\n          // this edge case was added by differential updates\n          encoder.writeParentInfo(true); // write parentYKey\n\n          encoder.writeString(parent);\n        } else if (parent.constructor === ID) {\n          encoder.writeParentInfo(false); // write parent id\n\n          encoder.writeLeftID(parent);\n        } else {\n          unexpectedCase();\n        }\n\n        if (parentSub !== null) {\n          encoder.writeString(parentSub);\n        }\n      }\n\n      this.content.write(encoder, offset);\n    }\n  }]);\n\n  return Item;\n}(AbstractStruct);\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @param {number} info\n */\n\n\nvar readItemContent = function readItemContent(decoder, info) {\n  return contentRefs[info & BITS5](decoder);\n};\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractContent>}\n */\n\n\nvar contentRefs = [function () {\n  unexpectedCase();\n}, // GC is not ItemContent\nreadContentDeleted, // 1\nreadContentJSON, // 2\nreadContentBinary, // 3\nreadContentString, // 4\nreadContentEmbed, // 5\nreadContentFormat, // 6\nreadContentType, // 7\nreadContentAny, // 8\nreadContentDoc, // 9\nfunction () {\n  unexpectedCase();\n} // 10 - Skip is not ItemContent\n];\nvar structSkipRefNumber = 10;\n/**\n * @private\n */\n\nvar Skip = /*#__PURE__*/function (_AbstractStruct3) {\n  _inherits(Skip, _AbstractStruct3);\n\n  var _super21 = _createSuper(Skip);\n\n  function Skip() {\n    _classCallCheck(this, Skip);\n\n    return _super21.apply(this, arguments);\n  }\n\n  _createClass(Skip, [{\n    key: \"deleted\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {}\n    /**\n     * @param {Skip} right\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"mergeWith\",\n    value: function mergeWith(right) {\n      if (this.constructor !== right.constructor) {\n        return false;\n      }\n\n      this.length += right.length;\n      return true;\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(transaction, offset) {\n      // skip structs cannot be integrated\n      unexpectedCase();\n    }\n    /**\n     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n     * @param {number} offset\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(encoder, offset) {\n      encoder.writeInfo(structSkipRefNumber); // write as VarUint because Skips can't make use of predictable length-encoding\n\n      writeVarUint(encoder.restEncoder, this.length - offset);\n    }\n    /**\n     * @param {Transaction} transaction\n     * @param {StructStore} store\n     * @return {null | number}\n     */\n\n  }, {\n    key: \"getMissing\",\n    value: function getMissing(transaction, store) {\n      return null;\n    }\n  }]);\n\n  return Skip;\n}(AbstractStruct);\n\nexport { AbstractConnector, AbstractStruct, AbstractType, YArray as Array, ContentAny, ContentBinary, ContentDeleted, ContentEmbed, ContentFormat, ContentJSON, ContentString, ContentType, Doc, GC, ID, Item, YMap as Map, PermanentUserData, RelativePosition, Snapshot, YText as Text, Transaction, UndoManager, YXmlElement as XmlElement, YXmlFragment as XmlFragment, YXmlHook as XmlHook, YXmlText as XmlText, YArrayEvent, YEvent, YMapEvent, YTextEvent, YXmlEvent, applyUpdate, applyUpdateV2, compareIDs, compareRelativePositions, createAbsolutePositionFromRelativePosition, createDeleteSet, createDeleteSetFromStructStore, createDocFromSnapshot, createID, createRelativePositionFromJSON, createRelativePositionFromTypeIndex, createSnapshot, decodeRelativePosition, decodeSnapshot, decodeSnapshotV2, decodeStateVector, diffUpdate, diffUpdateV2, emptySnapshot, encodeRelativePosition, encodeSnapshot, encodeSnapshotV2, encodeStateAsUpdate, encodeStateAsUpdateV2, encodeStateVector, encodeStateVectorFromUpdate, encodeStateVectorFromUpdateV2, equalSnapshots, findRootTypeKey, getItem, getState, getTypeChildren, isDeleted, isParentOf, iterateDeletedStructs, logType, logUpdate, logUpdateV2, mergeUpdates, mergeUpdatesV2, parseUpdateMeta, parseUpdateMetaV2, readUpdate, readUpdateV2, relativePositionToJSON, snapshot, _transact as transact, tryGc, typeListToArraySnapshot, typeMapGetSnapshot };","map":{"version":3,"sources":["../src/utils/AbstractConnector.js","../src/utils/DeleteSet.js","../src/utils/Doc.js","../src/utils/UpdateDecoder.js","../src/utils/UpdateEncoder.js","../src/utils/encoding.js","../src/utils/EventHandler.js","../src/utils/ID.js","../src/utils/isParentOf.js","../src/utils/logging.js","../src/utils/PermanentUserData.js","../src/utils/RelativePosition.js","../src/utils/Snapshot.js","../src/utils/StructStore.js","../src/utils/Transaction.js","../src/utils/UndoManager.js","../src/utils/updates.js","../src/utils/YEvent.js","../src/types/AbstractType.js","../src/types/YArray.js","../src/types/YMap.js","../src/types/YText.js","../src/types/YXmlFragment.js","../src/types/YXmlElement.js","../src/types/YXmlEvent.js","../src/types/YXmlHook.js","../src/types/YXmlText.js","../src/structs/AbstractStruct.js","../src/structs/GC.js","../src/structs/ContentBinary.js","../src/structs/ContentDeleted.js","../src/structs/ContentDoc.js","../src/structs/ContentEmbed.js","../src/structs/ContentFormat.js","../src/structs/ContentJSON.js","../src/structs/ContentAny.js","../src/structs/ContentString.js","../src/structs/ContentType.js","../src/structs/Item.js","../src/structs/Skip.js"],"names":["math.floor","math.max","array.appendTo","map.setIfUndefined","encoding.writeVarUint","decoding.readVarUint","random.uint32","random.uuidv4","array.from","decoding.readUint8","decoding.readVarString","decoding.readAny","buffer.copyUint8Array","decoding.readVarUint8Array","decoding.IntDiffOptRleDecoder","decoding.UintOptRleDecoder","decoding.RleDecoder","decoding.StringDecoder","encoding.createEncoder","encoding.toUint8Array","encoding.writeUint8","encoding.writeVarString","encoding.writeAny","encoding.writeVarUint8Array","error.unexpectedCase","encoding.IntDiffOptRleEncoder","encoding.UintOptRleEncoder","encoding.RleEncoder","encoding.StringEncoder","encoding.writeUint8Array","map.create","binary.BITS5","binary.BIT7","binary.BIT8","binary.BIT6","decoding.createDecoder","f.callAll","encoding.writeVarInt","decoding.hasContent","decoding.readVarInt","set.create","map.any","math.min","logging.print","logging.ORANGE","logging.BOLD","logging.UNBOLD","logging.RED","time.getUnixTime","encoding.writeBinaryEncoder","array.last","math.abs","error.methodUnimplemented","error.create","iterator.iteratorFilter","iterator.iteratorMap","object.equalFlat","map.copy","binary.BIT2","binary.BIT4","binary.BIT1","binary.BIT3"],"mappings":"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","sourcesContent":["\nimport { Observable } from 'lib0/observable.js'\n\nimport {\n  Doc // eslint-disable-line\n} from '../internals.js'\n\n/**\n * This is an abstract interface that all Connectors should implement to keep them interchangeable.\n *\n * @note This interface is experimental and it is not advised to actually inherit this class.\n *       It just serves as typing information.\n *\n * @extends {Observable<any>}\n */\nexport class AbstractConnector extends Observable {\n  /**\n   * @param {Doc} ydoc\n   * @param {any} awareness\n   */\n  constructor (ydoc, awareness) {\n    super()\n    this.doc = ydoc\n    this.awareness = awareness\n  }\n}\n","\nimport {\n  findIndexSS,\n  getState,\n  splitItem,\n  iterateStructs,\n  UpdateEncoderV2,\n  DSDecoderV1, DSEncoderV1, DSDecoderV2, DSEncoderV2, Item, GC, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\n\nimport * as array from 'lib0/array.js'\nimport * as math from 'lib0/math.js'\nimport * as map from 'lib0/map.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\nexport class DeleteItem {\n  /**\n   * @param {number} clock\n   * @param {number} len\n   */\n  constructor (clock, len) {\n    /**\n     * @type {number}\n     */\n    this.clock = clock\n    /**\n     * @type {number}\n     */\n    this.len = len\n  }\n}\n\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\nexport class DeleteSet {\n  constructor () {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    this.clients = new Map()\n  }\n}\n\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nexport const iterateDeletedStructs = (transaction, ds, f) =>\n  ds.clients.forEach((deletes, clientid) => {\n    const structs = /** @type {Array<GC|Item>} */ (transaction.doc.store.clients.get(clientid))\n    for (let i = 0; i < deletes.length; i++) {\n      const del = deletes[i]\n      iterateStructs(transaction, structs, del.clock, del.len, f)\n    }\n  })\n\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\nexport const findIndexDS = (dis, clock) => {\n  let left = 0\n  let right = dis.length - 1\n  while (left <= right) {\n    const midindex = math.floor((left + right) / 2)\n    const mid = dis[midindex]\n    const midclock = mid.clock\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex\n      }\n      left = midindex + 1\n    } else {\n      right = midindex - 1\n    }\n  }\n  return null\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\nexport const isDeleted = (ds, id) => {\n  const dis = ds.clients.get(id.client)\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null\n}\n\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nexport const sortAndMergeDeleteSet = ds => {\n  ds.clients.forEach(dels => {\n    dels.sort((a, b) => a.clock - b.clock)\n    // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n    let i, j\n    for (i = 1, j = 1; i < dels.length; i++) {\n      const left = dels[j - 1]\n      const right = dels[i]\n      if (left.clock + left.len >= right.clock) {\n        left.len = math.max(left.len, right.clock + right.len - left.clock)\n      } else {\n        if (j < i) {\n          dels[j] = right\n        }\n        j++\n      }\n    }\n    dels.length = j\n  })\n}\n\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */\nexport const mergeDeleteSets = dss => {\n  const merged = new DeleteSet()\n  for (let dssI = 0; dssI < dss.length; dssI++) {\n    dss[dssI].clients.forEach((delsLeft, client) => {\n      if (!merged.clients.has(client)) {\n        // Write all missing keys from current ds and all following.\n        // If merged already contains `client` current ds has already been added.\n        /**\n         * @type {Array<DeleteItem>}\n         */\n        const dels = delsLeft.slice()\n        for (let i = dssI + 1; i < dss.length; i++) {\n          array.appendTo(dels, dss[i].clients.get(client) || [])\n        }\n        merged.clients.set(client, dels)\n      }\n    })\n  }\n  sortAndMergeDeleteSet(merged)\n  return merged\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {number} client\n * @param {number} clock\n * @param {number} length\n *\n * @private\n * @function\n */\nexport const addToDeleteSet = (ds, client, clock, length) => {\n  map.setIfUndefined(ds.clients, client, () => []).push(new DeleteItem(clock, length))\n}\n\nexport const createDeleteSet = () => new DeleteSet()\n\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */\nexport const createDeleteSetFromStructStore = ss => {\n  const ds = createDeleteSet()\n  ss.clients.forEach((structs, client) => {\n    /**\n     * @type {Array<DeleteItem>}\n     */\n    const dsitems = []\n    for (let i = 0; i < structs.length; i++) {\n      const struct = structs[i]\n      if (struct.deleted) {\n        const clock = struct.id.clock\n        let len = struct.length\n        if (i + 1 < structs.length) {\n          for (let next = structs[i + 1]; i + 1 < structs.length && next.id.clock === clock + len && next.deleted; next = structs[++i + 1]) {\n            len += next.length\n          }\n        }\n        dsitems.push(new DeleteItem(clock, len))\n      }\n    }\n    if (dsitems.length > 0) {\n      ds.clients.set(client, dsitems)\n    }\n  })\n  return ds\n}\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nexport const writeDeleteSet = (encoder, ds) => {\n  encoding.writeVarUint(encoder.restEncoder, ds.clients.size)\n  ds.clients.forEach((dsitems, client) => {\n    encoder.resetDsCurVal()\n    encoding.writeVarUint(encoder.restEncoder, client)\n    const len = dsitems.length\n    encoding.writeVarUint(encoder.restEncoder, len)\n    for (let i = 0; i < len; i++) {\n      const item = dsitems[i]\n      encoder.writeDsClock(item.clock)\n      encoder.writeDsLen(item.len)\n    }\n  })\n}\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */\nexport const readDeleteSet = decoder => {\n  const ds = new DeleteSet()\n  const numClients = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal()\n    const client = decoding.readVarUint(decoder.restDecoder)\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder)\n    if (numberOfDeletes > 0) {\n      const dsField = map.setIfUndefined(ds.clients, client, () => [])\n      for (let i = 0; i < numberOfDeletes; i++) {\n        dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()))\n      }\n    }\n  }\n  return ds\n}\n\n/**\n * @todo YDecoder also contains references to String and other Decoders. Would make sense to exchange YDecoder.toUint8Array for YDecoder.DsToUint8Array()..\n */\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @return {Uint8Array|null} Returns a v2 update containing all deletes that couldn't be applied yet; or null if all deletes were applied successfully.\n *\n * @private\n * @function\n */\nexport const readAndApplyDeleteSet = (decoder, transaction, store) => {\n  const unappliedDS = new DeleteSet()\n  const numClients = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal()\n    const client = decoding.readVarUint(decoder.restDecoder)\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder)\n    const structs = store.clients.get(client) || []\n    const state = getState(store, client)\n    for (let i = 0; i < numberOfDeletes; i++) {\n      const clock = decoder.readDsClock()\n      const clockEnd = clock + decoder.readDsLen()\n      if (clock < state) {\n        if (state < clockEnd) {\n          addToDeleteSet(unappliedDS, client, state, clockEnd - state)\n        }\n        let index = findIndexSS(structs, clock)\n        /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */\n        // @ts-ignore\n        let struct = structs[index]\n        // split the first item if necessary\n        if (!struct.deleted && struct.id.clock < clock) {\n          structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock))\n          index++ // increase we now want to use the next struct\n        }\n        while (index < structs.length) {\n          // @ts-ignore\n          struct = structs[index++]\n          if (struct.id.clock < clockEnd) {\n            if (!struct.deleted) {\n              if (clockEnd < struct.id.clock + struct.length) {\n                structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock))\n              }\n              struct.delete(transaction)\n            }\n          } else {\n            break\n          }\n        }\n      } else {\n        addToDeleteSet(unappliedDS, client, clock, clockEnd - clock)\n      }\n    }\n  }\n  if (unappliedDS.clients.size > 0) {\n    const ds = new UpdateEncoderV2()\n    encoding.writeVarUint(ds.restEncoder, 0) // encode 0 structs\n    writeDeleteSet(ds, unappliedDS)\n    return ds.toUint8Array()\n  }\n  return null\n}\n","/**\n * @module Y\n */\n\nimport {\n  StructStore,\n  AbstractType,\n  YArray,\n  YText,\n  YMap,\n  YXmlFragment,\n  transact,\n  ContentDoc, Item, Transaction, YEvent // eslint-disable-line\n} from '../internals.js'\n\nimport { Observable } from 'lib0/observable.js'\nimport * as random from 'lib0/random.js'\nimport * as map from 'lib0/map.js'\nimport * as array from 'lib0/array.js'\n\nexport const generateNewClientId = random.uint32\n\n/**\n * @typedef {Object} DocOpts\n * @property {boolean} [DocOpts.gc=true] Disable garbage collection (default: gc=true)\n * @property {function(Item):boolean} [DocOpts.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n * @property {string} [DocOpts.guid] Define a globally unique identifier for this document\n * @property {any} [DocOpts.meta] Any kind of meta information you want to associate with this document. If this is a subdocument, remote peers will store the meta information as well.\n * @property {boolean} [DocOpts.autoLoad] If a subdocument, automatically load document. If this is a subdocument, remote peers will load the document as well automatically.\n */\n\n/**\n * A Yjs instance handles the state of shared data.\n * @extends Observable<string>\n */\nexport class Doc extends Observable {\n  /**\n   * @param {DocOpts} [opts] configuration\n   */\n  constructor ({ guid = random.uuidv4(), gc = true, gcFilter = () => true, meta = null, autoLoad = false } = {}) {\n    super()\n    this.gc = gc\n    this.gcFilter = gcFilter\n    this.clientID = generateNewClientId()\n    this.guid = guid\n    /**\n     * @type {Map<string, AbstractType<YEvent>>}\n     */\n    this.share = new Map()\n    this.store = new StructStore()\n    /**\n     * @type {Transaction | null}\n     */\n    this._transaction = null\n    /**\n     * @type {Array<Transaction>}\n     */\n    this._transactionCleanups = []\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocs = new Set()\n    /**\n     * If this document is a subdocument - a document integrated into another document - then _item is defined.\n     * @type {Item?}\n     */\n    this._item = null\n    this.shouldLoad = autoLoad\n    this.autoLoad = autoLoad\n    this.meta = meta\n  }\n\n  /**\n   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).\n   *\n   * `load()` might be used in the future to request any provider to load the most current data.\n   *\n   * It is safe to call `load()` multiple times.\n   */\n  load () {\n    const item = this._item\n    if (item !== null && !this.shouldLoad) {\n      transact(/** @type {any} */ (item.parent).doc, transaction => {\n        transaction.subdocsLoaded.add(this)\n      }, null, true)\n    }\n    this.shouldLoad = true\n  }\n\n  getSubdocs () {\n    return this.subdocs\n  }\n\n  getSubdocGuids () {\n    return new Set(Array.from(this.subdocs).map(doc => doc.guid))\n  }\n\n  /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @param {function(Transaction):void} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   *\n   * @public\n   */\n  transact (f, origin = null) {\n    transact(this, f, origin)\n  }\n\n  /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `y.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `y.define(name, Y.Array) === y.define(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `y.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Yjs instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @example\n   *   const y = new Y(..)\n   *   const appState = {\n   *     document: y.getText('document')\n   *     comments: y.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {AbstractType<any>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */\n  get (name, TypeConstructor = AbstractType) {\n    const type = map.setIfUndefined(this.share, name, () => {\n      // @ts-ignore\n      const t = new TypeConstructor()\n      t._integrate(this, null)\n      return t\n    })\n    const Constr = type.constructor\n    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n      if (Constr === AbstractType) {\n        // @ts-ignore\n        const t = new TypeConstructor()\n        t._map = type._map\n        type._map.forEach(/** @param {Item?} n */ n => {\n          for (; n !== null; n = n.left) {\n            // @ts-ignore\n            n.parent = t\n          }\n        })\n        t._start = type._start\n        for (let n = t._start; n !== null; n = n.right) {\n          n.parent = t\n        }\n        t._length = type._length\n        this.share.set(name, t)\n        t._integrate(this, null)\n        return t\n      } else {\n        throw new Error(`Type with the name ${name} has already been defined with a different constructor`)\n      }\n    }\n    return type\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YArray<T>}\n   *\n   * @public\n   */\n  getArray (name = '') {\n    // @ts-ignore\n    return this.get(name, YArray)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YText}\n   *\n   * @public\n   */\n  getText (name = '') {\n    // @ts-ignore\n    return this.get(name, YText)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YMap<any>}\n   *\n   * @public\n   */\n  getMap (name = '') {\n    // @ts-ignore\n    return this.get(name, YMap)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlFragment}\n   *\n   * @public\n   */\n  getXmlFragment (name = '') {\n    // @ts-ignore\n    return this.get(name, YXmlFragment)\n  }\n\n  /**\n   * Converts the entire document into a js object, recursively traversing each yjs type\n   * Doesn't log types that have not been defined (using ydoc.getType(..)).\n   *\n   * @deprecated Do not use this method and rather call toJSON directly on the shared types.\n   *\n   * @return {Object<string, any>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string, any>}\n     */\n    const doc = {}\n\n    this.share.forEach((value, key) => {\n      doc[key] = value.toJSON()\n    })\n\n    return doc\n  }\n\n  /**\n   * Emit `destroy` event and unregister all event handlers.\n   */\n  destroy () {\n    array.from(this.subdocs).forEach(subdoc => subdoc.destroy())\n    const item = this._item\n    if (item !== null) {\n      this._item = null\n      const content = /** @type {ContentDoc} */ (item.content)\n      if (item.deleted) {\n        // @ts-ignore\n        content.doc = null\n      } else {\n        content.doc = new Doc({ guid: this.guid, ...content.opts })\n        content.doc._item = item\n      }\n      transact(/** @type {any} */ (item).parent.doc, transaction => {\n        if (!item.deleted) {\n          transaction.subdocsAdded.add(content.doc)\n        }\n        transaction.subdocsRemoved.add(this)\n      }, null, true)\n    }\n    this.emit('destroyed', [true])\n    this.emit('destroy', [this])\n    super.destroy()\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function(...any):any} f\n   */\n  on (eventName, f) {\n    super.on(eventName, f)\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function} f\n   */\n  off (eventName, f) {\n    super.off(eventName, f)\n  }\n}\n","import * as buffer from 'lib0/buffer.js'\nimport * as decoding from 'lib0/decoding.js'\nimport {\n  ID, createID\n} from '../internals.js'\n\nexport class DSDecoderV1 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    this.restDecoder = decoder\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n}\n\nexport class UpdateDecoderV1 extends DSDecoderV1 {\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return decoding.readUint8(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return decoding.readVarString(this.restDecoder)\n  }\n\n  /**\n   * @return {boolean} isKey\n   */\n  readParentInfo () {\n    return decoding.readVarUint(this.restDecoder) === 1\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number} len\n   */\n  readLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return buffer.copyUint8Array(decoding.readVarUint8Array(this.restDecoder))\n  }\n\n  /**\n   * Legacy implementation uses JSON parse. We use any-decoding in v2.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return JSON.parse(decoding.readVarString(this.restDecoder))\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    return decoding.readVarString(this.restDecoder)\n  }\n}\n\nexport class DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    /**\n     * @private\n     */\n    this.dsCurrVal = 0\n    this.restDecoder = decoder\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    this.dsCurrVal += decoding.readVarUint(this.restDecoder)\n    return this.dsCurrVal\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    const diff = decoding.readVarUint(this.restDecoder) + 1\n    this.dsCurrVal += diff\n    return diff\n  }\n}\n\nexport class UpdateDecoderV2 extends DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    super(decoder)\n    /**\n     * List of cached keys. If the keys[id] does not exist, we read a new key\n     * from stringEncoder and push it to keys.\n     *\n     * @type {Array<string>}\n     */\n    this.keys = []\n    decoding.readVarUint(decoder) // read feature flag - currently unused\n    this.keyClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.clientDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.leftClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.rightClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.infoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8)\n    this.stringDecoder = new decoding.StringDecoder(decoding.readVarUint8Array(decoder))\n    this.parentInfoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8)\n    this.typeRefDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.lenDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))\n  }\n\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return new ID(this.clientDecoder.read(), this.leftClockDecoder.read())\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return new ID(this.clientDecoder.read(), this.rightClockDecoder.read())\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return this.clientDecoder.read()\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return /** @type {number} */ (this.infoDecoder.read())\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return this.stringDecoder.read()\n  }\n\n  /**\n   * @return {boolean}\n   */\n  readParentInfo () {\n    return this.parentInfoDecoder.read() === 1\n  }\n\n  /**\n   * @return {number} An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return this.typeRefDecoder.read()\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number}\n   */\n  readLen () {\n    return this.lenDecoder.read()\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return decoding.readVarUint8Array(this.restDecoder)\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    const keyClock = this.keyClockDecoder.read()\n    if (keyClock < this.keys.length) {\n      return this.keys[keyClock]\n    } else {\n      const key = this.stringDecoder.read()\n      this.keys.push(key)\n      return key\n    }\n  }\n}\n","\nimport * as error from 'lib0/error.js'\nimport * as encoding from 'lib0/encoding.js'\n\nimport {\n  ID // eslint-disable-line\n} from '../internals.js'\n\nexport class DSEncoderV1 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder()\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    encoding.writeVarUint(this.restEncoder, clock)\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    encoding.writeVarUint(this.restEncoder, len)\n  }\n}\n\nexport class UpdateEncoderV1 extends DSEncoderV1 {\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client)\n    encoding.writeVarUint(this.restEncoder, id.clock)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client)\n    encoding.writeVarUint(this.restEncoder, id.clock)\n  }\n\n  /**\n   * Use writeClient and writeClock instead of writeID if possible.\n   * @param {number} client\n   */\n  writeClient (client) {\n    encoding.writeVarUint(this.restEncoder, client)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    encoding.writeUint8(this.restEncoder, info)\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    encoding.writeVarString(this.restEncoder, s)\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    encoding.writeVarUint(this.restEncoder, isYKey ? 1 : 0)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    encoding.writeVarUint(this.restEncoder, info)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    encoding.writeVarUint(this.restEncoder, len)\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf)\n  }\n\n  /**\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeVarString(this.restEncoder, JSON.stringify(embed))\n  }\n\n  /**\n   * @param {string} key\n   */\n  writeKey (key) {\n    encoding.writeVarString(this.restEncoder, key)\n  }\n}\n\nexport class DSEncoderV2 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder() // encodes all the rest / non-optimized\n    this.dsCurrVal = 0\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    const diff = clock - this.dsCurrVal\n    this.dsCurrVal = clock\n    encoding.writeVarUint(this.restEncoder, diff)\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    if (len === 0) {\n      error.unexpectedCase()\n    }\n    encoding.writeVarUint(this.restEncoder, len - 1)\n    this.dsCurrVal += len\n  }\n}\n\nexport class UpdateEncoderV2 extends DSEncoderV2 {\n  constructor () {\n    super()\n    /**\n     * @type {Map<string,number>}\n     */\n    this.keyMap = new Map()\n    /**\n     * Refers to the next uniqe key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */\n    this.keyClock = 0\n    this.keyClockEncoder = new encoding.IntDiffOptRleEncoder()\n    this.clientEncoder = new encoding.UintOptRleEncoder()\n    this.leftClockEncoder = new encoding.IntDiffOptRleEncoder()\n    this.rightClockEncoder = new encoding.IntDiffOptRleEncoder()\n    this.infoEncoder = new encoding.RleEncoder(encoding.writeUint8)\n    this.stringEncoder = new encoding.StringEncoder()\n    this.parentInfoEncoder = new encoding.RleEncoder(encoding.writeUint8)\n    this.typeRefEncoder = new encoding.UintOptRleEncoder()\n    this.lenEncoder = new encoding.UintOptRleEncoder()\n  }\n\n  toUint8Array () {\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, 0) // this is a feature flag that we might use in the future\n    encoding.writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.clientEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.infoEncoder))\n    encoding.writeVarUint8Array(encoder, this.stringEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.parentInfoEncoder))\n    encoding.writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.lenEncoder.toUint8Array())\n    // @note The rest encoder is appended! (note the missing var)\n    encoding.writeUint8Array(encoder, encoding.toUint8Array(this.restEncoder))\n    return encoding.toUint8Array(encoder)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    this.clientEncoder.write(id.client)\n    this.leftClockEncoder.write(id.clock)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    this.clientEncoder.write(id.client)\n    this.rightClockEncoder.write(id.clock)\n  }\n\n  /**\n   * @param {number} client\n   */\n  writeClient (client) {\n    this.clientEncoder.write(client)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    this.infoEncoder.write(info)\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    this.stringEncoder.write(s)\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    this.parentInfoEncoder.write(isYKey ? 1 : 0)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    this.typeRefEncoder.write(info)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    this.lenEncoder.write(len)\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf)\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeAny(this.restEncoder, embed)\n  }\n\n  /**\n   * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n   * occur very often. For a 3d application, the key `position` might occur very often.\n   *\n   * We cache these keys in a Map and refer to them via a unique number.\n   *\n   * @param {string} key\n   */\n  writeKey (key) {\n    const clock = this.keyMap.get(key)\n    if (clock === undefined) {\n      this.keyClockEncoder.write(this.keyClock++)\n      this.stringEncoder.write(key)\n    } else {\n      this.keyClockEncoder.write(this.keyClock++)\n    }\n  }\n}\n","\n/**\n * @module encoding\n */\n/*\n * We use the first five bits in the info flag for determining the type of the struct.\n *\n * 0: GC\n * 1: Item with Deleted content\n * 2: Item with JSON content\n * 3: Item with Binary content\n * 4: Item with String content\n * 5: Item with Embed content (for richtext content)\n * 6: Item with Format content (a formatting marker for richtext content)\n * 7: Item with Type\n */\n\nimport {\n  findIndexSS,\n  getState,\n  createID,\n  getStateVector,\n  readAndApplyDeleteSet,\n  writeDeleteSet,\n  createDeleteSetFromStructStore,\n  transact,\n  readItemContent,\n  UpdateDecoderV1,\n  UpdateDecoderV2,\n  UpdateEncoderV1,\n  UpdateEncoderV2,\n  DSEncoderV2,\n  DSDecoderV1,\n  DSEncoderV1,\n  mergeUpdatesV2,\n  Skip,\n  diffUpdateV2,\n  DSDecoderV2, Doc, Transaction, GC, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as binary from 'lib0/binary.js'\nimport * as map from 'lib0/map.js'\nimport * as math from 'lib0/math.js'\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\nconst writeStructs = (encoder, structs, client, clock) => {\n  // write first id\n  clock = math.max(clock, structs[0].id.clock) // make sure the first id exists\n  const startNewStructs = findIndexSS(structs, clock)\n  // write # encoded structs\n  encoding.writeVarUint(encoder.restEncoder, structs.length - startNewStructs)\n  encoder.writeClient(client)\n  encoding.writeVarUint(encoder.restEncoder, clock)\n  const firstStruct = structs[startNewStructs]\n  // write first struct with an offset\n  firstStruct.write(encoder, clock - firstStruct.id.clock)\n  for (let i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0)\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\nexport const writeClientsStructs = (encoder, store, _sm) => {\n  // we filter all valid _sm entries into sm\n  const sm = new Map()\n  _sm.forEach((clock, client) => {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock)\n    }\n  })\n  getStateVector(store).forEach((clock, client) => {\n    if (!_sm.has(client)) {\n      sm.set(client, 0)\n    }\n  })\n  // write # states that were updated\n  encoding.writeVarUint(encoder.restEncoder, sm.size)\n  // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n  Array.from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    // @ts-ignore\n    writeStructs(encoder, store.clients.get(client), client, clock)\n  })\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder The decoder object to read data from.\n * @param {Doc} doc\n * @return {Map<number, { i: number, refs: Array<Item | GC> }>}\n *\n * @private\n * @function\n */\nexport const readClientsStructRefs = (decoder, doc) => {\n  /**\n   * @type {Map<number, { i: number, refs: Array<Item | GC> }>}\n   */\n  const clientRefs = map.create()\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder)\n    /**\n     * @type {Array<GC|Item>}\n     */\n    const refs = new Array(numberOfStructs)\n    const client = decoder.readClient()\n    let clock = decoding.readVarUint(decoder.restDecoder)\n    // const start = performance.now()\n    clientRefs.set(client, { i: 0, refs })\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo()\n      switch (binary.BITS5 & info) {\n        case 0: { // GC\n          const len = decoder.readLen()\n          refs[i] = new GC(createID(client, clock), len)\n          clock += len\n          break\n        }\n        case 10: { // Skip Struct (nothing to apply)\n          // @todo we could reduce the amount of checks by adding Skip struct to clientRefs so we know that something is missing.\n          const len = decoding.readVarUint(decoder.restDecoder)\n          refs[i] = new Skip(createID(client, clock), len)\n          clock += len\n          break\n        }\n        default: { // Item with content\n          /**\n           * The optimized implementation doesn't use any variables because inlining variables is faster.\n           * Below a non-optimized version is shown that implements the basic algorithm with\n           * a few comments\n           */\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const struct = new Item(\n            createID(client, clock),\n            null, // leftd\n            (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n            null, // right\n            (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n            cantCopyParentInfo ? (decoder.readParentInfo() ? doc.get(decoder.readString()) : decoder.readLeftID()) : null, // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          /* A non-optimized implementation of the above algorithm:\n\n          // The item that was originally to the left of this item.\n          const origin = (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null\n          // The item that was originally to the right of this item.\n          const rightOrigin = (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          const hasParentYKey = cantCopyParentInfo ? decoder.readParentInfo() : false\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const parentYKey = cantCopyParentInfo && hasParentYKey ? decoder.readString() : null\n\n          const struct = new Item(\n            createID(client, clock),\n            null, // leftd\n            origin, // origin\n            null, // right\n            rightOrigin, // right origin\n            cantCopyParentInfo && !hasParentYKey ? decoder.readLeftID() : (parentYKey !== null ? doc.get(parentYKey) : null), // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          */\n          refs[i] = struct\n          clock += struct.length\n        }\n      }\n    }\n    // console.log('time to read: ', performance.now() - start) // @todo remove\n  }\n  return clientRefs\n}\n\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {Map<number, { i: number, refs: (GC | Item)[] }>} clientsStructRefs\n * @return { null | { update: Uint8Array, missing: Map<number,number> } }\n *\n * @private\n * @function\n */\nconst integrateStructs = (transaction, store, clientsStructRefs) => {\n  /**\n   * @type {Array<Item | GC>}\n   */\n  const stack = []\n  // sort them so that we take the higher id first, in case of conflicts the lower id will probably not conflict with the id from the higher user.\n  let clientsStructRefsIds = Array.from(clientsStructRefs.keys()).sort((a, b) => a - b)\n  if (clientsStructRefsIds.length === 0) {\n    return null\n  }\n  const getNextStructTarget = () => {\n    if (clientsStructRefsIds.length === 0) {\n      return null\n    }\n    let nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]))\n    while (nextStructsTarget.refs.length === nextStructsTarget.i) {\n      clientsStructRefsIds.pop()\n      if (clientsStructRefsIds.length > 0) {\n        nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]))\n      } else {\n        return null\n      }\n    }\n    return nextStructsTarget\n  }\n  let curStructsTarget = getNextStructTarget()\n  if (curStructsTarget === null && stack.length === 0) {\n    return null\n  }\n\n  /**\n   * @type {StructStore}\n   */\n  const restStructs = new StructStore()\n  const missingSV = new Map()\n  /**\n   * @param {number} client\n   * @param {number} clock\n   */\n  const updateMissingSv = (client, clock) => {\n    const mclock = missingSV.get(client)\n    if (mclock == null || mclock > clock) {\n      missingSV.set(client, clock)\n    }\n  }\n  /**\n   * @type {GC|Item}\n   */\n  let stackHead = /** @type {any} */ (curStructsTarget).refs[/** @type {any} */ (curStructsTarget).i++]\n  // caching the state because it is used very often\n  const state = new Map()\n\n  const addStackToRestSS = () => {\n    for (const item of stack) {\n      const client = item.id.client\n      const unapplicableItems = clientsStructRefs.get(client)\n      if (unapplicableItems) {\n        // decrement because we weren't able to apply previous operation\n        unapplicableItems.i--\n        restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i))\n        clientsStructRefs.delete(client)\n        unapplicableItems.i = 0\n        unapplicableItems.refs = []\n      } else {\n        // item was the last item on clientsStructRefs and the field was already cleared. Add item to restStructs and continue\n        restStructs.clients.set(client, [item])\n      }\n      // remove client from clientsStructRefsIds to prevent users from applying the same update again\n      clientsStructRefsIds = clientsStructRefsIds.filter(c => c !== client)\n    }\n    stack.length = 0\n  }\n\n  // iterate over all struct readers until we are done\n  while (true) {\n    if (stackHead.constructor !== Skip) {\n      const localClock = map.setIfUndefined(state, stackHead.id.client, () => getState(store, stackHead.id.client))\n      const offset = localClock - stackHead.id.clock\n      if (offset < 0) {\n        // update from the same client is missing\n        stack.push(stackHead)\n        updateMissingSv(stackHead.id.client, stackHead.id.clock - 1)\n        // hid a dead wall, add all items from stack to restSS\n        addStackToRestSS()\n      } else {\n        const missing = stackHead.getMissing(transaction, store)\n        if (missing !== null) {\n          stack.push(stackHead)\n          // get the struct reader that has the missing struct\n          /**\n           * @type {{ refs: Array<GC|Item>, i: number }}\n           */\n          const structRefs = clientsStructRefs.get(/** @type {number} */ (missing)) || { refs: [], i: 0 }\n          if (structRefs.refs.length === structRefs.i) {\n            // This update message causally depends on another update message that doesn't exist yet\n            updateMissingSv(/** @type {number} */ (missing), getState(store, missing))\n            addStackToRestSS()\n          } else {\n            stackHead = structRefs.refs[structRefs.i++]\n            continue\n          }\n        } else if (offset === 0 || offset < stackHead.length) {\n          // all fine, apply the stackhead\n          stackHead.integrate(transaction, offset)\n          state.set(stackHead.id.client, stackHead.id.clock + stackHead.length)\n        }\n      }\n    }\n    // iterate to next stackHead\n    if (stack.length > 0) {\n      stackHead = /** @type {GC|Item} */ (stack.pop())\n    } else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) {\n      stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++])\n    } else {\n      curStructsTarget = getNextStructTarget()\n      if (curStructsTarget === null) {\n        // we are done!\n        break\n      } else {\n        stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++])\n      }\n    }\n  }\n  if (restStructs.clients.size > 0) {\n    const encoder = new UpdateEncoderV2()\n    writeClientsStructs(encoder, restStructs, new Map())\n    // write empty deleteset\n    // writeDeleteSet(encoder, new DeleteSet())\n    encoding.writeVarUint(encoder.restEncoder, 0) // => no need for an extra function call, just write 0 deletes\n    return { missing: missingSV, update: encoder.toUint8Array() }\n  }\n  return null\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nexport const writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState)\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {UpdateDecoderV1 | UpdateDecoderV2} [structDecoder]\n *\n * @function\n */\nexport const readUpdateV2 = (decoder, ydoc, transactionOrigin, structDecoder = new UpdateDecoderV2(decoder)) =>\n  transact(ydoc, transaction => {\n    let retry = false\n    const doc = transaction.doc\n    const store = doc.store\n    // let start = performance.now()\n    const ss = readClientsStructRefs(structDecoder, doc)\n    // console.log('time to read structs: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    // console.log('time to merge: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const restStructs = integrateStructs(transaction, store, ss)\n    const pending = store.pendingStructs\n    if (pending) {\n      // check if we can apply something\n      for (const [client, clock] of pending.missing) {\n        if (clock < getState(store, client)) {\n          retry = true\n          break\n        }\n      }\n      if (restStructs) {\n        // merge restStructs into store.pending\n        for (const [client, clock] of restStructs.missing) {\n          const mclock = pending.missing.get(client)\n          if (mclock == null || mclock > clock) {\n            pending.missing.set(client, clock)\n          }\n        }\n        pending.update = mergeUpdatesV2([pending.update, restStructs.update])\n      }\n    } else {\n      store.pendingStructs = restStructs\n    }\n    // console.log('time to integrate: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const dsRest = readAndApplyDeleteSet(structDecoder, transaction, store)\n    if (store.pendingDs) {\n      // @todo we could make a lower-bound state-vector check as we do above\n      const pendingDSUpdate = new UpdateDecoderV2(decoding.createDecoder(store.pendingDs))\n      decoding.readVarUint(pendingDSUpdate.restDecoder) // read 0 structs, because we only encode deletes in pendingdsupdate\n      const dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store)\n      if (dsRest && dsRest2) {\n        // case 1: ds1 != null && ds2 != null\n        store.pendingDs = mergeUpdatesV2([dsRest, dsRest2])\n      } else {\n        // case 2: ds1 != null\n        // case 3: ds2 != null\n        // case 4: ds1 == null && ds2 == null\n        store.pendingDs = dsRest || dsRest2\n      }\n    } else {\n      // Either dsRest == null && pendingDs == null OR dsRest != null\n      store.pendingDs = dsRest\n    }\n    // console.log('time to cleanup: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n\n    // console.log('time to resume delete readers: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    if (retry) {\n      const update = /** @type {{update: Uint8Array}} */ (store.pendingStructs).update\n      store.pendingStructs = null\n      applyUpdateV2(transaction.doc, update)\n    }\n  }, transactionOrigin, false)\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nexport const readUpdate = (decoder, ydoc, transactionOrigin) => readUpdateV2(decoder, ydoc, transactionOrigin, new UpdateDecoderV1(decoder))\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n *\n * @function\n */\nexport const applyUpdateV2 = (ydoc, update, transactionOrigin, YDecoder = UpdateDecoderV2) => {\n  const decoder = decoding.createDecoder(update)\n  readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder))\n}\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nexport const applyUpdate = (ydoc, update, transactionOrigin) => applyUpdateV2(ydoc, update, transactionOrigin, UpdateDecoderV1)\n\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */\nexport const writeStateAsUpdate = (encoder, doc, targetStateVector = new Map()) => {\n  writeClientsStructs(encoder, doc.store, targetStateVector)\n  writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store))\n}\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @param {UpdateEncoderV1 | UpdateEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateAsUpdateV2 = (doc, encodedTargetStateVector = new Uint8Array([0]), encoder = new UpdateEncoderV2()) => {\n  const targetStateVector = decodeStateVector(encodedTargetStateVector)\n  writeStateAsUpdate(encoder, doc, targetStateVector)\n  const updates = [encoder.toUint8Array()]\n  // also add the pending updates (if there are any)\n  // @todo support diffirent encoders\n  if (encoder.constructor === UpdateEncoderV2) {\n    if (doc.store.pendingDs) {\n      updates.push(doc.store.pendingDs)\n    }\n    if (doc.store.pendingStructs) {\n      updates.push(diffUpdateV2(doc.store.pendingStructs.update, encodedTargetStateVector))\n    }\n    if (updates.length > 1) {\n      return mergeUpdatesV2(updates)\n    }\n  }\n  return updates[0]\n}\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateAsUpdate = (doc, encodedTargetStateVector) => encodeStateAsUpdateV2(doc, encodedTargetStateVector, new UpdateEncoderV1())\n\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nexport const readStateVector = decoder => {\n  const ss = new Map()\n  const ssLength = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < ssLength; i++) {\n    const client = decoding.readVarUint(decoder.restDecoder)\n    const clock = decoding.readVarUint(decoder.restDecoder)\n    ss.set(client, clock)\n  }\n  return ss\n}\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n// export const decodeStateVectorV2 = decodedState => readStateVector(new DSDecoderV2(decoding.createDecoder(decodedState)))\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nexport const decodeStateVector = decodedState => readStateVector(new DSDecoderV1(decoding.createDecoder(decodedState)))\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Map<number,number>} sv\n * @function\n */\nexport const writeStateVector = (encoder, sv) => {\n  encoding.writeVarUint(encoder.restEncoder, sv.size)\n  sv.forEach((clock, client) => {\n    encoding.writeVarUint(encoder.restEncoder, client) // @todo use a special client decoder that is based on mapping\n    encoding.writeVarUint(encoder.restEncoder, clock)\n  })\n  return encoder\n}\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Doc} doc\n *\n * @function\n */\nexport const writeDocumentStateVector = (encoder, doc) => writeStateVector(encoder, getStateVector(doc.store))\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateVectorV2 = (doc, encoder = new DSEncoderV2()) => {\n  if (doc instanceof Map) {\n    writeStateVector(encoder, doc)\n  } else {\n    writeDocumentStateVector(encoder, doc)\n  }\n  return encoder.toUint8Array()\n}\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateVector = doc => encodeStateVectorV2(doc, new DSEncoderV1())\n","import * as f from 'lib0/function.js'\n\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\nexport class EventHandler {\n  constructor () {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    this.l = []\n  }\n}\n\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\nexport const createEventHandler = () => new EventHandler()\n\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\nexport const addEventHandlerListener = (eventHandler, f) =>\n  eventHandler.l.push(f)\n\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\nexport const removeEventHandlerListener = (eventHandler, f) => {\n  const l = eventHandler.l\n  const len = l.length\n  eventHandler.l = l.filter(g => f !== g)\n  if (len === eventHandler.l.length) {\n    console.error('[yjs] Tried to remove event handler that doesn\\'t exist.')\n  }\n}\n\n/**\n * Removes all event listeners.\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n *\n * @private\n * @function\n */\nexport const removeAllEventHandlerListeners = eventHandler => {\n  eventHandler.l.length = 0\n}\n\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\nexport const callEventHandlerListeners = (eventHandler, arg0, arg1) =>\n  f.callAll(eventHandler.l, [arg0, arg1])\n","\nimport { AbstractType } from '../internals.js' // eslint-disable-line\n\nimport * as decoding from 'lib0/decoding.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as error from 'lib0/error.js'\n\nexport class ID {\n  /**\n   * @param {number} client client id\n   * @param {number} clock unique per client id, continuous number\n   */\n  constructor (client, clock) {\n    /**\n     * Client id\n     * @type {number}\n     */\n    this.client = client\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n    this.clock = clock\n  }\n}\n\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\nexport const compareIDs = (a, b) => a === b || (a !== null && b !== null && a.client === b.client && a.clock === b.clock)\n\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\nexport const createID = (client, clock) => new ID(client, clock)\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */\nexport const writeID = (encoder, id) => {\n  encoding.writeVarUint(encoder, id.client)\n  encoding.writeVarUint(encoder, id.clock)\n}\n\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */\nexport const readID = decoder =>\n  createID(decoding.readVarUint(decoder), decoding.readVarUint(decoder))\n\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\nexport const findRootTypeKey = type => {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  for (const [key, value] of type.doc.share.entries()) {\n    if (value === type) {\n      return key\n    }\n  }\n  throw error.unexpectedCase()\n}\n","\nimport { AbstractType, Item } from '../internals.js' // eslint-disable-line\n\n/**\n * Check if `parent` is a parent of `child`.\n *\n * @param {AbstractType<any>} parent\n * @param {Item|null} child\n * @return {Boolean} Whether `parent` is a parent of `child`.\n *\n * @private\n * @function\n */\nexport const isParentOf = (parent, child) => {\n  while (child !== null) {\n    if (child.parent === parent) {\n      return true\n    }\n    child = /** @type {AbstractType<any>} */ (child.parent)._item\n  }\n  return false\n}\n","\nimport {\n  AbstractType // eslint-disable-line\n} from '../internals.js'\n\n/**\n * Convenient helper to log type information.\n *\n * Do not use in productive systems as the output can be immense!\n *\n * @param {AbstractType<any>} type\n */\nexport const logType = type => {\n  const res = []\n  let n = type._start\n  while (n) {\n    res.push(n)\n    n = n.right\n  }\n  console.log('Children: ', res)\n  console.log('Children content: ', res.filter(m => !m.deleted).map(m => m.content))\n}\n","\nimport {\n  YArray,\n  YMap,\n  readDeleteSet,\n  writeDeleteSet,\n  createDeleteSet,\n  DSEncoderV1, DSDecoderV1, ID, DeleteSet, YArrayEvent, Transaction, Doc // eslint-disable-line\n} from '../internals.js'\n\nimport * as decoding from 'lib0/decoding.js'\n\nimport { mergeDeleteSets, isDeleted } from './DeleteSet.js'\n\nexport class PermanentUserData {\n  /**\n   * @param {Doc} doc\n   * @param {YMap<any>} [storeType]\n   */\n  constructor (doc, storeType = doc.getMap('users')) {\n    /**\n     * @type {Map<string,DeleteSet>}\n     */\n    const dss = new Map()\n    this.yusers = storeType\n    this.doc = doc\n    /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */\n    this.clients = new Map()\n    this.dss = dss\n    /**\n     * @param {YMap<any>} user\n     * @param {string} userDescription\n     */\n    const initUser = (user, userDescription) => {\n      /**\n       * @type {YArray<Uint8Array>}\n       */\n      const ds = user.get('ds')\n      const ids = user.get('ids')\n      const addClientId = /** @param {number} clientid */ clientid => this.clients.set(clientid, userDescription)\n      ds.observe(/** @param {YArrayEvent<any>} event */ event => {\n        event.changes.added.forEach(item => {\n          item.content.getContent().forEach(encodedDs => {\n            if (encodedDs instanceof Uint8Array) {\n              this.dss.set(userDescription, mergeDeleteSets([this.dss.get(userDescription) || createDeleteSet(), readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs)))]))\n            }\n          })\n        })\n      })\n      this.dss.set(userDescription, mergeDeleteSets(ds.map(encodedDs => readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs))))))\n      ids.observe(/** @param {YArrayEvent<any>} event */ event =>\n        event.changes.added.forEach(item => item.content.getContent().forEach(addClientId))\n      )\n      ids.forEach(addClientId)\n    }\n    // observe users\n    storeType.observe(event => {\n      event.keysChanged.forEach(userDescription =>\n        initUser(storeType.get(userDescription), userDescription)\n      )\n    })\n    // add intial data\n    storeType.forEach(initUser)\n  }\n\n  /**\n   * @param {Doc} doc\n   * @param {number} clientid\n   * @param {string} userDescription\n   * @param {Object} [conf]\n   * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n   */\n  setUserMapping (doc, clientid, userDescription, { filter = () => true } = {}) {\n    const users = this.yusers\n    let user = users.get(userDescription)\n    if (!user) {\n      user = new YMap()\n      user.set('ids', new YArray())\n      user.set('ds', new YArray())\n      users.set(userDescription, user)\n    }\n    user.get('ids').push([clientid])\n    users.observe(event => {\n      setTimeout(() => {\n        const userOverwrite = users.get(userDescription)\n        if (userOverwrite !== user) {\n          // user was overwritten, port all data over to the next user object\n          // @todo Experiment with Y.Sets here\n          user = userOverwrite\n          // @todo iterate over old type\n          this.clients.forEach((_userDescription, clientid) => {\n            if (userDescription === _userDescription) {\n              user.get('ids').push([clientid])\n            }\n          })\n          const encoder = new DSEncoderV1()\n          const ds = this.dss.get(userDescription)\n          if (ds) {\n            writeDeleteSet(encoder, ds)\n            user.get('ds').push([encoder.toUint8Array()])\n          }\n        }\n      }, 0)\n    })\n    doc.on('afterTransaction', /** @param {Transaction} transaction */ transaction => {\n      setTimeout(() => {\n        const yds = user.get('ds')\n        const ds = transaction.deleteSet\n        if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {\n          const encoder = new DSEncoderV1()\n          writeDeleteSet(encoder, ds)\n          yds.push([encoder.toUint8Array()])\n        }\n      })\n    })\n  }\n\n  /**\n   * @param {number} clientid\n   * @return {any}\n   */\n  getUserByClientId (clientid) {\n    return this.clients.get(clientid) || null\n  }\n\n  /**\n   * @param {ID} id\n   * @return {string | null}\n   */\n  getUserByDeletedId (id) {\n    for (const [userDescription, ds] of this.dss.entries()) {\n      if (isDeleted(ds, id)) {\n        return userDescription\n      }\n    }\n    return null\n  }\n}\n","\nimport {\n  writeID,\n  readID,\n  compareIDs,\n  getState,\n  findRootTypeKey,\n  Item,\n  createID,\n  ContentType,\n  followRedone,\n  ID, Doc, AbstractType // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as error from 'lib0/error.js'\n\n/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */\nexport class RelativePosition {\n  /**\n   * @param {ID|null} type\n   * @param {string|null} tname\n   * @param {ID|null} item\n   * @param {number} assoc\n   */\n  constructor (type, tname, item, assoc = 0) {\n    /**\n     * @type {ID|null}\n     */\n    this.type = type\n    /**\n     * @type {string|null}\n     */\n    this.tname = tname\n    /**\n     * @type {ID | null}\n     */\n    this.item = item\n    /**\n     * A relative position is associated to a specific character. By default\n     * assoc >= 0, the relative position is associated to the character\n     * after the meant position.\n     * I.e. position 1 in 'ab' is associated to character 'b'.\n     *\n     * If assoc < 0, then the relative position is associated to the caharacter\n     * before the meant position.\n     *\n     * @type {number}\n     */\n    this.assoc = assoc\n  }\n}\n\n/**\n * @param {RelativePosition} rpos\n * @return {any}\n */\nexport const relativePositionToJSON = rpos => {\n  const json = {}\n  if (rpos.type) {\n    json.type = rpos.type\n  }\n  if (rpos.tname) {\n    json.tname = rpos.tname\n  }\n  if (rpos.item) {\n    json.item = rpos.item\n  }\n  if (rpos.assoc != null) {\n    json.assoc = rpos.assoc\n  }\n  return json\n}\n\n/**\n * @param {any} json\n * @return {RelativePosition}\n *\n * @function\n */\nexport const createRelativePositionFromJSON = json => new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname || null, json.item == null ? null : createID(json.item.client, json.item.clock), json.assoc == null ? 0 : json.assoc)\n\nexport class AbsolutePosition {\n  /**\n   * @param {AbstractType<any>} type\n   * @param {number} index\n   * @param {number} [assoc]\n   */\n  constructor (type, index, assoc = 0) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type\n    /**\n     * @type {number}\n     */\n    this.index = index\n    this.assoc = assoc\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @param {number} [assoc]\n *\n * @function\n */\nexport const createAbsolutePosition = (type, index, assoc = 0) => new AbsolutePosition(type, index, assoc)\n\n/**\n * @param {AbstractType<any>} type\n * @param {ID|null} item\n * @param {number} [assoc]\n *\n * @function\n */\nexport const createRelativePosition = (type, item, assoc) => {\n  let typeid = null\n  let tname = null\n  if (type._item === null) {\n    tname = findRootTypeKey(type)\n  } else {\n    typeid = createID(type._item.id.client, type._item.id.clock)\n  }\n  return new RelativePosition(typeid, tname, item, assoc)\n}\n\n/**\n * Create a relativePosition based on a absolute position.\n *\n * @param {AbstractType<any>} type The base type (e.g. YText or YArray).\n * @param {number} index The absolute position.\n * @param {number} [assoc]\n * @return {RelativePosition}\n *\n * @function\n */\nexport const createRelativePositionFromTypeIndex = (type, index, assoc = 0) => {\n  let t = type._start\n  if (assoc < 0) {\n    // associated to the left character or the beginning of a type, increment index if possible.\n    if (index === 0) {\n      return createRelativePosition(type, null, assoc)\n    }\n    index--\n  }\n  while (t !== null) {\n    if (!t.deleted && t.countable) {\n      if (t.length > index) {\n        // case 1: found position somewhere in the linked list\n        return createRelativePosition(type, createID(t.id.client, t.id.clock + index), assoc)\n      }\n      index -= t.length\n    }\n    if (t.right === null && assoc < 0) {\n      // left-associated position, return last available id\n      return createRelativePosition(type, t.lastId, assoc)\n    }\n    t = t.right\n  }\n  return createRelativePosition(type, null, assoc)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {RelativePosition} rpos\n *\n * @function\n */\nexport const writeRelativePosition = (encoder, rpos) => {\n  const { type, tname, item, assoc } = rpos\n  if (item !== null) {\n    encoding.writeVarUint(encoder, 0)\n    writeID(encoder, item)\n  } else if (tname !== null) {\n    // case 2: found position at the end of the list and type is stored in y.share\n    encoding.writeUint8(encoder, 1)\n    encoding.writeVarString(encoder, tname)\n  } else if (type !== null) {\n    // case 3: found position at the end of the list and type is attached to an item\n    encoding.writeUint8(encoder, 2)\n    writeID(encoder, type)\n  } else {\n    throw error.unexpectedCase()\n  }\n  encoding.writeVarInt(encoder, assoc)\n  return encoder\n}\n\n/**\n * @param {RelativePosition} rpos\n * @return {Uint8Array}\n */\nexport const encodeRelativePosition = rpos => {\n  const encoder = encoding.createEncoder()\n  writeRelativePosition(encoder, rpos)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {RelativePosition}\n *\n * @function\n */\nexport const readRelativePosition = decoder => {\n  let type = null\n  let tname = null\n  let itemID = null\n  switch (decoding.readVarUint(decoder)) {\n    case 0:\n      // case 1: found position somewhere in the linked list\n      itemID = readID(decoder)\n      break\n    case 1:\n      // case 2: found position at the end of the list and type is stored in y.share\n      tname = decoding.readVarString(decoder)\n      break\n    case 2: {\n      // case 3: found position at the end of the list and type is attached to an item\n      type = readID(decoder)\n    }\n  }\n  const assoc = decoding.hasContent(decoder) ? decoding.readVarInt(decoder) : 0\n  return new RelativePosition(type, tname, itemID, assoc)\n}\n\n/**\n * @param {Uint8Array} uint8Array\n * @return {RelativePosition}\n */\nexport const decodeRelativePosition = uint8Array => readRelativePosition(decoding.createDecoder(uint8Array))\n\n/**\n * @param {RelativePosition} rpos\n * @param {Doc} doc\n * @return {AbsolutePosition|null}\n *\n * @function\n */\nexport const createAbsolutePositionFromRelativePosition = (rpos, doc) => {\n  const store = doc.store\n  const rightID = rpos.item\n  const typeID = rpos.type\n  const tname = rpos.tname\n  const assoc = rpos.assoc\n  let type = null\n  let index = 0\n  if (rightID !== null) {\n    if (getState(store, rightID.client) <= rightID.clock) {\n      return null\n    }\n    const res = followRedone(store, rightID)\n    const right = res.item\n    if (!(right instanceof Item)) {\n      return null\n    }\n    type = /** @type {AbstractType<any>} */ (right.parent)\n    if (type._item === null || !type._item.deleted) {\n      index = (right.deleted || !right.countable) ? 0 : (res.diff + (assoc >= 0 ? 0 : 1)) // adjust position based on left association if necessary\n      let n = right.left\n      while (n !== null) {\n        if (!n.deleted && n.countable) {\n          index += n.length\n        }\n        n = n.left\n      }\n    }\n  } else {\n    if (tname !== null) {\n      type = doc.get(tname)\n    } else if (typeID !== null) {\n      if (getState(store, typeID.client) <= typeID.clock) {\n        // type does not exist yet\n        return null\n      }\n      const { item } = followRedone(store, typeID)\n      if (item instanceof Item && item.content instanceof ContentType) {\n        type = item.content.type\n      } else {\n        // struct is garbage collected\n        return null\n      }\n    } else {\n      throw error.unexpectedCase()\n    }\n    if (assoc >= 0) {\n      index = type._length\n    } else {\n      index = 0\n    }\n  }\n  return createAbsolutePosition(type, index, rpos.assoc)\n}\n\n/**\n * @param {RelativePosition|null} a\n * @param {RelativePosition|null} b\n * @return {boolean}\n *\n * @function\n */\nexport const compareRelativePositions = (a, b) => a === b || (\n  a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type) && a.assoc === b.assoc\n)\n","\nimport {\n  isDeleted,\n  createDeleteSetFromStructStore,\n  getStateVector,\n  getItemCleanStart,\n  iterateDeletedStructs,\n  writeDeleteSet,\n  writeStateVector,\n  readDeleteSet,\n  readStateVector,\n  createDeleteSet,\n  createID,\n  getState,\n  findIndexSS,\n  UpdateEncoderV2,\n  applyUpdateV2,\n  DSEncoderV1, DSEncoderV2, DSDecoderV1, DSDecoderV2, Transaction, Doc, DeleteSet, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map.js'\nimport * as set from 'lib0/set.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as encoding from 'lib0/encoding.js'\n\nexport class Snapshot {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} sv state map\n   */\n  constructor (ds, sv) {\n    /**\n     * @type {DeleteSet}\n     */\n    this.ds = ds\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */\n    this.sv = sv\n  }\n}\n\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */\nexport const equalSnapshots = (snap1, snap2) => {\n  const ds1 = snap1.ds.clients\n  const ds2 = snap2.ds.clients\n  const sv1 = snap1.sv\n  const sv2 = snap2.sv\n  if (sv1.size !== sv2.size || ds1.size !== ds2.size) {\n    return false\n  }\n  for (const [key, value] of sv1.entries()) {\n    if (sv2.get(key) !== value) {\n      return false\n    }\n  }\n  for (const [client, dsitems1] of ds1.entries()) {\n    const dsitems2 = ds2.get(client) || []\n    if (dsitems1.length !== dsitems2.length) {\n      return false\n    }\n    for (let i = 0; i < dsitems1.length; i++) {\n      const dsitem1 = dsitems1[i]\n      const dsitem2 = dsitems2[i]\n      if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n/**\n * @param {Snapshot} snapshot\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n */\nexport const encodeSnapshotV2 = (snapshot, encoder = new DSEncoderV2()) => {\n  writeDeleteSet(encoder, snapshot.ds)\n  writeStateVector(encoder, snapshot.sv)\n  return encoder.toUint8Array()\n}\n\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */\nexport const encodeSnapshot = snapshot => encodeSnapshotV2(snapshot, new DSEncoderV1())\n\n/**\n * @param {Uint8Array} buf\n * @param {DSDecoderV1 | DSDecoderV2} [decoder]\n * @return {Snapshot}\n */\nexport const decodeSnapshotV2 = (buf, decoder = new DSDecoderV2(decoding.createDecoder(buf))) => {\n  return new Snapshot(readDeleteSet(decoder), readStateVector(decoder))\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */\nexport const decodeSnapshot = buf => decodeSnapshotV2(buf, new DSDecoderV1(decoding.createDecoder(buf)))\n\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */\nexport const createSnapshot = (ds, sm) => new Snapshot(ds, sm)\n\nexport const emptySnapshot = createSnapshot(createDeleteSet(), new Map())\n\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */\nexport const snapshot = doc => createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store))\n\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\nexport const isVisible = (item, snapshot) => snapshot === undefined ? !item.deleted : (\n  snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id)\n)\n\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\nexport const splitSnapshotAffectedStructs = (transaction, snapshot) => {\n  const meta = map.setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, set.create)\n  const store = transaction.doc.store\n  // check if we already split for this snapshot\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach((clock, client) => {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock))\n      }\n    })\n    iterateDeletedStructs(transaction, snapshot.ds, item => {})\n    meta.add(snapshot)\n  }\n}\n\n/**\n * @param {Doc} originDoc\n * @param {Snapshot} snapshot\n * @param {Doc} [newDoc] Optionally, you may define the Yjs document that receives the data from originDoc\n * @return {Doc}\n */\nexport const createDocFromSnapshot = (originDoc, snapshot, newDoc = new Doc()) => {\n  if (originDoc.gc) {\n    // we should not try to restore a GC-ed document, because some of the restored items might have their content deleted\n    throw new Error('originDoc must not be garbage collected')\n  }\n  const { sv, ds } = snapshot\n\n  const encoder = new UpdateEncoderV2()\n  originDoc.transact(transaction => {\n    let size = 0\n    sv.forEach(clock => {\n      if (clock > 0) {\n        size++\n      }\n    })\n    encoding.writeVarUint(encoder.restEncoder, size)\n    // splitting the structs before writing them to the encoder\n    for (const [client, clock] of sv) {\n      if (clock === 0) {\n        continue\n      }\n      if (clock < getState(originDoc.store, client)) {\n        getItemCleanStart(transaction, createID(client, clock))\n      }\n      const structs = originDoc.store.clients.get(client) || []\n      const lastStructIndex = findIndexSS(structs, clock - 1)\n      // write # encoded structs\n      encoding.writeVarUint(encoder.restEncoder, lastStructIndex + 1)\n      encoder.writeClient(client)\n      // first clock written is 0\n      encoding.writeVarUint(encoder.restEncoder, 0)\n      for (let i = 0; i <= lastStructIndex; i++) {\n        structs[i].write(encoder, 0)\n      }\n    }\n    writeDeleteSet(encoder, ds)\n  })\n\n  applyUpdateV2(newDoc, encoder.toUint8Array(), 'snapshot')\n  return newDoc\n}\n","\nimport {\n  GC,\n  splitItem,\n  Transaction, ID, Item, DSDecoderV2 // eslint-disable-line\n} from '../internals.js'\n\nimport * as math from 'lib0/math.js'\nimport * as error from 'lib0/error.js'\n\nexport class StructStore {\n  constructor () {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    this.clients = new Map()\n    /**\n     * @type {null | { missing: Map<number, number>, update: Uint8Array }}\n     */\n    this.pendingStructs = null\n    /**\n     * @type {null | Uint8Array}\n     */\n    this.pendingDs = null\n  }\n}\n\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\nexport const getStateVector = store => {\n  const sm = new Map()\n  store.clients.forEach((structs, client) => {\n    const struct = structs[structs.length - 1]\n    sm.set(client, struct.id.clock + struct.length)\n  })\n  return sm\n}\n\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\nexport const getState = (store, client) => {\n  const structs = store.clients.get(client)\n  if (structs === undefined) {\n    return 0\n  }\n  const lastStruct = structs[structs.length - 1]\n  return lastStruct.id.clock + lastStruct.length\n}\n\n/**\n * @param {StructStore} store\n *\n * @private\n * @function\n */\nexport const integretyCheck = store => {\n  store.clients.forEach(structs => {\n    for (let i = 1; i < structs.length; i++) {\n      const l = structs[i - 1]\n      const r = structs[i]\n      if (l.id.clock + l.length !== r.id.clock) {\n        throw new Error('StructStore failed integrety check')\n      }\n    }\n  })\n}\n\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\nexport const addStruct = (store, struct) => {\n  let structs = store.clients.get(struct.id.client)\n  if (structs === undefined) {\n    structs = []\n    store.clients.set(struct.id.client, structs)\n  } else {\n    const lastStruct = structs[structs.length - 1]\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw error.unexpectedCase()\n    }\n  }\n  structs.push(struct)\n}\n\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\nexport const findIndexSS = (structs, clock) => {\n  let left = 0\n  let right = structs.length - 1\n  let mid = structs[right]\n  let midclock = mid.id.clock\n  if (midclock === clock) {\n    return right\n  }\n  // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n  let midindex = math.floor((clock / (midclock + mid.length - 1)) * right) // pivoting the search\n  while (left <= right) {\n    mid = structs[midindex]\n    midclock = mid.id.clock\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex\n      }\n      left = midindex + 1\n    } else {\n      right = midindex - 1\n    }\n    midindex = math.floor((left + right) / 2)\n  }\n  // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n  throw error.unexpectedCase()\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\nexport const find = (store, id) => {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client)\n  return structs[findIndexSS(structs, id.clock)]\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\nexport const getItem = /** @type {function(StructStore,ID):Item} */ (find)\n\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\nexport const findIndexCleanStart = (transaction, structs, clock) => {\n  const index = findIndexSS(structs, clock)\n  const struct = structs[index]\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock))\n    return index + 1\n  }\n  return index\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nexport const getItemCleanStart = (transaction, id) => {\n  const structs = /** @type {Array<Item>} */ (transaction.doc.store.clients.get(id.client))\n  return structs[findIndexCleanStart(transaction, structs, id.clock)]\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nexport const getItemCleanEnd = (transaction, store, id) => {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client)\n  const index = findIndexSS(structs, id.clock)\n  const struct = structs[index]\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1))\n  }\n  return struct\n}\n\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\nexport const replaceStruct = (store, struct, newStruct) => {\n  const structs = /** @type {Array<GC|Item>} */ (store.clients.get(struct.id.client))\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct\n}\n\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nexport const iterateStructs = (transaction, structs, clockStart, len, f) => {\n  if (len === 0) {\n    return\n  }\n  const clockEnd = clockStart + len\n  let index = findIndexCleanStart(transaction, structs, clockStart)\n  let struct\n  do {\n    struct = structs[index++]\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd)\n    }\n    f(struct)\n  } while (index < structs.length && structs[index].id.clock < clockEnd)\n}\n","\nimport {\n  getState,\n  writeStructsFromTransaction,\n  writeDeleteSet,\n  DeleteSet,\n  sortAndMergeDeleteSet,\n  getStateVector,\n  findIndexSS,\n  callEventHandlerListeners,\n  Item,\n  generateNewClientId,\n  createID,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, GC, StructStore, AbstractType, AbstractStruct, YEvent, Doc // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map.js'\nimport * as math from 'lib0/math.js'\nimport * as set from 'lib0/set.js'\nimport * as logging from 'lib0/logging.js'\nimport { callAll } from 'lib0/function.js'\n\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const map = y.define('map', YMap)\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * y.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\nexport class Transaction {\n  /**\n   * @param {Doc} doc\n   * @param {any} origin\n   * @param {boolean} local\n   */\n  constructor (doc, origin, local) {\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    this.doc = doc\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n    this.deleteSet = new DeleteSet()\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n    this.beforeState = getStateVector(doc.store)\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n    this.afterState = new Map()\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent>,Set<String|null>>}\n     */\n    this.changed = new Map()\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent>,Array<YEvent>>}\n     */\n    this.changedParentTypes = new Map()\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n    this._mergeStructs = []\n    /**\n     * @type {any}\n     */\n    this.origin = origin\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n    this.meta = new Map()\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n    this.local = local\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsAdded = new Set()\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsRemoved = new Set()\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsLoaded = new Set()\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n * @return {boolean} Whether data was written.\n */\nexport const writeUpdateMessageFromTransaction = (encoder, transaction) => {\n  if (transaction.deleteSet.clients.size === 0 && !map.any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {\n    return false\n  }\n  sortAndMergeDeleteSet(transaction.deleteSet)\n  writeStructsFromTransaction(encoder, transaction)\n  writeDeleteSet(encoder, transaction.deleteSet)\n  return true\n}\n\n/**\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nexport const nextID = transaction => {\n  const y = transaction.doc\n  return createID(y.clientID, getState(y.store, y.clientID))\n}\n\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent>} type\n * @param {string|null} parentSub\n */\nexport const addChangedTypeToTransaction = (transaction, type, parentSub) => {\n  const item = type._item\n  if (item === null || (item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted)) {\n    map.setIfUndefined(transaction.changed, type, set.create).add(parentSub)\n  }\n}\n\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n */\nconst tryToMergeWithLeft = (structs, pos) => {\n  const left = structs[pos - 1]\n  const right = structs[pos]\n  if (left.deleted === right.deleted && left.constructor === right.constructor) {\n    if (left.mergeWith(right)) {\n      structs.splice(pos, 1)\n      if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */ (right.parent)._map.get(right.parentSub) === right) {\n        /** @type {AbstractType<any>} */ (right.parent)._map.set(right.parentSub, /** @type {Item} */ (left))\n      }\n    }\n  }\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGcDeleteSet = (ds, store, gcFilter) => {\n  for (const [client, deleteItems] of ds.clients.entries()) {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di]\n      const endDeleteItemClock = deleteItem.clock + deleteItem.len\n      for (\n        let si = findIndexSS(structs, deleteItem.clock), struct = structs[si];\n        si < structs.length && struct.id.clock < endDeleteItemClock;\n        struct = structs[++si]\n      ) {\n        const struct = structs[si]\n        if (deleteItem.clock + deleteItem.len <= struct.id.clock) {\n          break\n        }\n        if (struct instanceof Item && struct.deleted && !struct.keep && gcFilter(struct)) {\n          struct.gc(store, false)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\nconst tryMergeDeleteSet = (ds, store) => {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiecy and so we don't miss any merge targets\n  ds.clients.forEach((deleteItems, client) => {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di]\n      // start with merging the item next to the last deleted item\n      const mostRightIndexToCheck = math.min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1))\n      for (\n        let si = mostRightIndexToCheck, struct = structs[si];\n        si > 0 && struct.id.clock >= deleteItem.clock;\n        struct = structs[--si]\n      ) {\n        tryToMergeWithLeft(structs, si)\n      }\n    }\n  })\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nexport const tryGc = (ds, store, gcFilter) => {\n  tryGcDeleteSet(ds, store, gcFilter)\n  tryMergeDeleteSet(ds, store)\n}\n\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\nconst cleanupTransactions = (transactionCleanups, i) => {\n  if (i < transactionCleanups.length) {\n    const transaction = transactionCleanups[i]\n    const doc = transaction.doc\n    const store = doc.store\n    const ds = transaction.deleteSet\n    const mergeStructs = transaction._mergeStructs\n    try {\n      sortAndMergeDeleteSet(ds)\n      transaction.afterState = getStateVector(transaction.doc.store)\n      doc._transaction = null\n      doc.emit('beforeObserverCalls', [transaction, doc])\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n      const fs = []\n      // observe events on changed types\n      transaction.changed.forEach((subs, itemtype) =>\n        fs.push(() => {\n          if (itemtype._item === null || !itemtype._item.deleted) {\n            itemtype._callObserver(transaction, subs)\n          }\n        })\n      )\n      fs.push(() => {\n        // deep observe events\n        transaction.changedParentTypes.forEach((events, type) =>\n          fs.push(() => {\n            // We need to think about the possibility that the user transforms the\n            // Y.Doc in the event.\n            if (type._item === null || !type._item.deleted) {\n              events = events\n                .filter(event =>\n                  event.target._item === null || !event.target._item.deleted\n                )\n              events\n                .forEach(event => {\n                  event.currentTarget = type\n                })\n              // sort events by path length so that top-level events are fired first.\n              events\n                .sort((event1, event2) => event1.path.length - event2.path.length)\n              // We don't need to check for events.length\n              // because we know it has at least one element\n              callEventHandlerListeners(type._dEH, events, transaction)\n            }\n          })\n        )\n        fs.push(() => doc.emit('afterTransaction', [transaction, doc]))\n      })\n      callAll(fs, [])\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (doc.gc) {\n        tryGcDeleteSet(ds, store, doc.gcFilter)\n      }\n      tryMergeDeleteSet(ds, store)\n\n      // on all affected store.clients props, try to merge\n      transaction.afterState.forEach((clock, client) => {\n        const beforeClock = transaction.beforeState.get(client) || 0\n        if (beforeClock !== clock) {\n          const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n          // we iterate from right to left so we can safely remove entries\n          const firstChangePos = math.max(findIndexSS(structs, beforeClock), 1)\n          for (let i = structs.length - 1; i >= firstChangePos; i--) {\n            tryToMergeWithLeft(structs, i)\n          }\n        }\n      })\n      // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n      for (let i = 0; i < mergeStructs.length; i++) {\n        const { client, clock } = mergeStructs[i].id\n        const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n        const replacedStructPos = findIndexSS(structs, clock)\n        if (replacedStructPos + 1 < structs.length) {\n          tryToMergeWithLeft(structs, replacedStructPos + 1)\n        }\n        if (replacedStructPos > 0) {\n          tryToMergeWithLeft(structs, replacedStructPos)\n        }\n      }\n      if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n        doc.clientID = generateNewClientId()\n        logging.print(logging.ORANGE, logging.BOLD, '[yjs] ', logging.UNBOLD, logging.RED, 'Changed the client-id because another client seems to be using it.')\n      }\n      // @todo Merge all the transactions into one and provide send the data as a single update message\n      doc.emit('afterTransactionCleanup', [transaction, doc])\n      if (doc._observers.has('update')) {\n        const encoder = new UpdateEncoderV1()\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction)\n        if (hasContent) {\n          doc.emit('update', [encoder.toUint8Array(), transaction.origin, doc, transaction])\n        }\n      }\n      if (doc._observers.has('updateV2')) {\n        const encoder = new UpdateEncoderV2()\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction)\n        if (hasContent) {\n          doc.emit('updateV2', [encoder.toUint8Array(), transaction.origin, doc, transaction])\n        }\n      }\n      transaction.subdocsAdded.forEach(subdoc => doc.subdocs.add(subdoc))\n      transaction.subdocsRemoved.forEach(subdoc => doc.subdocs.delete(subdoc))\n\n      doc.emit('subdocs', [{ loaded: transaction.subdocsLoaded, added: transaction.subdocsAdded, removed: transaction.subdocsRemoved }])\n      transaction.subdocsRemoved.forEach(subdoc => subdoc.destroy())\n\n      if (transactionCleanups.length <= i + 1) {\n        doc._transactionCleanups = []\n        doc.emit('afterAllTransactions', [doc, transactionCleanups])\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1)\n      }\n    }\n  }\n}\n\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @param {Doc} doc\n * @param {function(Transaction):void} f\n * @param {any} [origin=true]\n *\n * @function\n */\nexport const transact = (doc, f, origin = null, local = true) => {\n  const transactionCleanups = doc._transactionCleanups\n  let initialCall = false\n  if (doc._transaction === null) {\n    initialCall = true\n    doc._transaction = new Transaction(doc, origin, local)\n    transactionCleanups.push(doc._transaction)\n    if (transactionCleanups.length === 1) {\n      doc.emit('beforeAllTransactions', [doc])\n    }\n    doc.emit('beforeTransaction', [doc._transaction, doc])\n  }\n  try {\n    f(doc._transaction)\n  } finally {\n    if (initialCall && transactionCleanups[0] === doc._transaction) {\n      // The first transaction ended, now process observer calls.\n      // Observer call may create new transactions for which we need to call the observers and do cleanup.\n      // We don't want to nest these calls, so we execute these calls one after\n      // another.\n      // Also we need to ensure that all cleanups are called, even if the\n      // observes throw errors.\n      // This file is full of hacky try {} finally {} blocks to ensure that an\n      // event can throw errors and also that the cleanup is called.\n      cleanupTransactions(transactionCleanups, 0)\n    }\n  }\n}\n","import {\n  mergeDeleteSets,\n  iterateDeletedStructs,\n  keepItem,\n  transact,\n  createID,\n  redoItem,\n  isParentOf,\n  followRedone,\n  getItemCleanStart,\n  isDeleted,\n  addToDeleteSet,\n  Transaction, Doc, Item, GC, DeleteSet, AbstractType, YEvent // eslint-disable-line\n} from '../internals.js'\n\nimport * as time from 'lib0/time.js'\nimport { Observable } from 'lib0/observable.js'\n\nclass StackItem {\n  /**\n   * @param {DeleteSet} deletions\n   * @param {DeleteSet} insertions\n   */\n  constructor (deletions, insertions) {\n    this.insertions = insertions\n    this.deletions = deletions\n    /**\n     * Use this to save and restore metadata like selection range\n     */\n    this.meta = new Map()\n  }\n}\n\n/**\n * @param {UndoManager} undoManager\n * @param {Array<StackItem>} stack\n * @param {string} eventType\n * @return {StackItem?}\n */\nconst popStackItem = (undoManager, stack, eventType) => {\n  /**\n   * Whether a change happened\n   * @type {StackItem?}\n   */\n  let result = null\n  /**\n   * Keep a reference to the transaction so we can fire the event with the changedParentTypes\n   * @type {any}\n   */\n  let _tr = null\n  const doc = undoManager.doc\n  const scope = undoManager.scope\n  transact(doc, transaction => {\n    while (stack.length > 0 && result === null) {\n      const store = doc.store\n      const stackItem = /** @type {StackItem} */ (stack.pop())\n      /**\n       * @type {Set<Item>}\n       */\n      const itemsToRedo = new Set()\n      /**\n       * @type {Array<Item>}\n       */\n      const itemsToDelete = []\n      let performedChange = false\n      iterateDeletedStructs(transaction, stackItem.insertions, struct => {\n        if (struct instanceof Item) {\n          if (struct.redone !== null) {\n            let { item, diff } = followRedone(store, struct.id)\n            if (diff > 0) {\n              item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff))\n            }\n            struct = item\n          }\n          if (!struct.deleted && scope.some(type => isParentOf(type, /** @type {Item} */ (struct)))) {\n            itemsToDelete.push(struct)\n          }\n        }\n      })\n      iterateDeletedStructs(transaction, stackItem.deletions, struct => {\n        if (\n          struct instanceof Item &&\n          scope.some(type => isParentOf(type, struct)) &&\n          // Never redo structs in stackItem.insertions because they were created and deleted in the same capture interval.\n          !isDeleted(stackItem.insertions, struct.id)\n        ) {\n          itemsToRedo.add(struct)\n        }\n      })\n      itemsToRedo.forEach(struct => {\n        performedChange = redoItem(transaction, struct, itemsToRedo) !== null || performedChange\n      })\n      // We want to delete in reverse order so that children are deleted before\n      // parents, so we have more information available when items are filtered.\n      for (let i = itemsToDelete.length - 1; i >= 0; i--) {\n        const item = itemsToDelete[i]\n        if (undoManager.deleteFilter(item)) {\n          item.delete(transaction)\n          performedChange = true\n        }\n      }\n      result = stackItem\n    }\n    transaction.changed.forEach((subProps, type) => {\n      // destroy search marker if necessary\n      if (subProps.has(null) && type._searchMarker) {\n        type._searchMarker.length = 0\n      }\n    })\n    _tr = transaction\n  }, undoManager)\n  if (result != null) {\n    const changedParentTypes = _tr.changedParentTypes\n    undoManager.emit('stack-item-popped', [{ stackItem: result, type: eventType, changedParentTypes }, undoManager])\n  }\n  return result\n}\n\n/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter whan an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n */\n\n/**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {Observable<'stack-item-added'|'stack-item-popped'>}\n */\nexport class UndoManager extends Observable {\n  /**\n   * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types\n   * @param {UndoManagerOptions} options\n   */\n  constructor (typeScope, { captureTimeout = 500, deleteFilter = () => true, trackedOrigins = new Set([null]) } = {}) {\n    super()\n    this.scope = typeScope instanceof Array ? typeScope : [typeScope]\n    this.deleteFilter = deleteFilter\n    trackedOrigins.add(this)\n    this.trackedOrigins = trackedOrigins\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.undoStack = []\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.redoStack = []\n    /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */\n    this.undoing = false\n    this.redoing = false\n    this.doc = /** @type {Doc} */ (this.scope[0].doc)\n    this.lastChange = 0\n    this.doc.on('afterTransaction', /** @param {Transaction} transaction */ transaction => {\n      // Only track certain transactions\n      if (!this.scope.some(type => transaction.changedParentTypes.has(type)) || (!this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !this.trackedOrigins.has(transaction.origin.constructor)))) {\n        return\n      }\n      const undoing = this.undoing\n      const redoing = this.redoing\n      const stack = undoing ? this.redoStack : this.undoStack\n      if (undoing) {\n        this.stopCapturing() // next undo should not be appended to last stack item\n      } else if (!redoing) {\n        // neither undoing nor redoing: delete redoStack\n        this.redoStack = []\n      }\n      const insertions = new DeleteSet()\n      transaction.afterState.forEach((endClock, client) => {\n        const startClock = transaction.beforeState.get(client) || 0\n        const len = endClock - startClock\n        if (len > 0) {\n          addToDeleteSet(insertions, client, startClock, len)\n        }\n      })\n      const now = time.getUnixTime()\n      if (now - this.lastChange < captureTimeout && stack.length > 0 && !undoing && !redoing) {\n        // append change to last stack op\n        const lastOp = stack[stack.length - 1]\n        lastOp.deletions = mergeDeleteSets([lastOp.deletions, transaction.deleteSet])\n        lastOp.insertions = mergeDeleteSets([lastOp.insertions, insertions])\n      } else {\n        // create a new stack op\n        stack.push(new StackItem(transaction.deleteSet, insertions))\n      }\n      if (!undoing && !redoing) {\n        this.lastChange = now\n      }\n      // make sure that deleted structs are not gc'd\n      iterateDeletedStructs(transaction, transaction.deleteSet, /** @param {Item|GC} item */ item => {\n        if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n          keepItem(item, true)\n        }\n      })\n      this.emit('stack-item-added', [{ stackItem: stack[stack.length - 1], origin: transaction.origin, type: undoing ? 'redo' : 'undo', changedParentTypes: transaction.changedParentTypes }, this])\n    })\n  }\n\n  clear () {\n    this.doc.transact(transaction => {\n      /**\n       * @param {StackItem} stackItem\n       */\n      const clearItem = stackItem => {\n        iterateDeletedStructs(transaction, stackItem.deletions, item => {\n          if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n            keepItem(item, false)\n          }\n        })\n      }\n      this.undoStack.forEach(clearItem)\n      this.redoStack.forEach(clearItem)\n    })\n    this.undoStack = []\n    this.redoStack = []\n  }\n\n  /**\n   * UndoManager merges Undo-StackItem if they are created within time-gap\n   * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n   * StackItem won't be merged.\n   *\n   *\n   * @example\n   *     // without stopCapturing\n   *     ytext.insert(0, 'a')\n   *     ytext.insert(1, 'b')\n   *     um.undo()\n   *     ytext.toString() // => '' (note that 'ab' was removed)\n   *     // with stopCapturing\n   *     ytext.insert(0, 'a')\n   *     um.stopCapturing()\n   *     ytext.insert(0, 'b')\n   *     um.undo()\n   *     ytext.toString() // => 'a' (note that only 'b' was removed)\n   *\n   */\n  stopCapturing () {\n    this.lastChange = 0\n  }\n\n  /**\n   * Undo last changes on type.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  undo () {\n    this.undoing = true\n    let res\n    try {\n      res = popStackItem(this, this.undoStack, 'undo')\n    } finally {\n      this.undoing = false\n    }\n    return res\n  }\n\n  /**\n   * Redo last undo operation.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  redo () {\n    this.redoing = true\n    let res\n    try {\n      res = popStackItem(this, this.redoStack, 'redo')\n    } finally {\n      this.redoing = false\n    }\n    return res\n  }\n}\n","\nimport * as binary from 'lib0/binary.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as logging from 'lib0/logging.js'\nimport * as math from 'lib0/math.js'\nimport {\n  createID,\n  readItemContent,\n  readDeleteSet,\n  writeDeleteSet,\n  Skip,\n  mergeDeleteSets,\n  DSEncoderV1,\n  DSEncoderV2,\n  decodeStateVector,\n  Item, GC, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2 // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n */\nfunction * lazyStructReaderGenerator (decoder) {\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder)\n    const client = decoder.readClient()\n    let clock = decoding.readVarUint(decoder.restDecoder)\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo()\n      // @todo use switch instead of ifs\n      if (info === 10) {\n        const len = decoding.readVarUint(decoder.restDecoder)\n        yield new Skip(createID(client, clock), len)\n        clock += len\n      } else if ((binary.BITS5 & info) !== 0) {\n        const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n        // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n        // and we read the next string as parentYKey.\n        // It indicates how we store/retrieve parent from `y.share`\n        // @type {string|null}\n        const struct = new Item(\n          createID(client, clock),\n          null, // left\n          (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n          null, // right\n          (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n          // @ts-ignore Force writing a string here.\n          cantCopyParentInfo ? (decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID()) : null, // parent\n          cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n          readItemContent(decoder, info) // item content\n        )\n        yield struct\n        clock += struct.length\n      } else {\n        const len = decoder.readLen()\n        yield new GC(createID(client, clock), len)\n        clock += len\n      }\n    }\n  }\n}\n\nexport class LazyStructReader {\n  /**\n   * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n   * @param {boolean} filterSkips\n   */\n  constructor (decoder, filterSkips) {\n    this.gen = lazyStructReaderGenerator(decoder)\n    /**\n     * @type {null | Item | Skip | GC}\n     */\n    this.curr = null\n    this.done = false\n    this.filterSkips = filterSkips\n    this.next()\n  }\n\n  /**\n   * @return {Item | GC | Skip |null}\n   */\n  next () {\n    // ignore \"Skip\" structs\n    do {\n      this.curr = this.gen.next().value || null\n    } while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip)\n    return this.curr\n  }\n}\n\n/**\n * @param {Uint8Array} update\n *\n */\nexport const logUpdate = update => logUpdateV2(update, UpdateDecoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\nexport const logUpdateV2 = (update, YDecoder = UpdateDecoderV2) => {\n  const structs = []\n  const updateDecoder = new YDecoder(decoding.createDecoder(update))\n  const lazyDecoder = new LazyStructReader(updateDecoder, false)\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr)\n  }\n  logging.print('Structs: ', structs)\n  const ds = readDeleteSet(updateDecoder)\n  logging.print('DeleteSet: ', ds)\n}\n\nexport class LazyStructWriter {\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  constructor (encoder) {\n    this.currClient = 0\n    this.startClock = 0\n    this.written = 0\n    this.encoder = encoder\n    /**\n     * We want to write operations lazily, but also we need to know beforehand how many operations we want to write for each client.\n     *\n     * This kind of meta-information (#clients, #structs-per-client-written) is written to the restEncoder.\n     *\n     * We fragment the restEncoder and store a slice of it per-client until we know how many clients there are.\n     * When we flush (toUint8Array) we write the restEncoder using the fragments and the meta-information.\n     *\n     * @type {Array<{ written: number, restEncoder: Uint8Array }>}\n     */\n    this.clientStructs = []\n  }\n}\n\n/**\n * @param {Array<Uint8Array>} updates\n * @return {Uint8Array}\n */\nexport const mergeUpdates = updates => mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof DSEncoderV1 | typeof DSEncoderV2} YEncoder\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {Uint8Array}\n */\nexport const encodeStateVectorFromUpdateV2 = (update, YEncoder = DSEncoderV2, YDecoder = UpdateDecoderV2) => {\n  const encoder = new YEncoder()\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), true)\n  let curr = updateDecoder.curr\n  if (curr !== null) {\n    let size = 1\n    let currClient = curr.id.client\n    let currClock = curr.id.clock\n    let stopCounting = false\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        size++\n        // We found a new client\n        // write what we have to the encoder\n        encoding.writeVarUint(encoder.restEncoder, currClient)\n        encoding.writeVarUint(encoder.restEncoder, currClock)\n        currClient = curr.id.client\n        stopCounting = false\n      }\n      if (curr.constructor === Skip) {\n        stopCounting = true\n      }\n      if (!stopCounting) {\n        currClock = curr.id.clock + curr.length\n      }\n    }\n    // write what we have\n    encoding.writeVarUint(encoder.restEncoder, currClient)\n    encoding.writeVarUint(encoder.restEncoder, currClock)\n    // prepend the size of the state vector\n    const enc = encoding.createEncoder()\n    encoding.writeVarUint(enc, size)\n    encoding.writeBinaryEncoder(enc, encoder.restEncoder)\n    encoder.restEncoder = enc\n    return encoder.toUint8Array()\n  } else {\n    encoding.writeVarUint(encoder.restEncoder, 0)\n    return encoder.toUint8Array()\n  }\n}\n\n/**\n * @param {Uint8Array} update\n * @return {Uint8Array}\n */\nexport const encodeStateVectorFromUpdate = update => encodeStateVectorFromUpdateV2(update, DSEncoderV1, UpdateDecoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nexport const parseUpdateMetaV2 = (update, YDecoder = UpdateDecoderV2) => {\n  /**\n   * @type {Map<number, number>}\n   */\n  const from = new Map()\n  /**\n   * @type {Map<number, number>}\n   */\n  const to = new Map()\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false)\n  let curr = updateDecoder.curr\n  if (curr !== null) {\n    let currClient = curr.id.client\n    let currClock = curr.id.clock\n    // write the beginning to `from`\n    from.set(currClient, currClock)\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        // We found a new client\n        // write the end to `to`\n        to.set(currClient, currClock)\n        // write the beginning to `from`\n        from.set(curr.id.client, curr.id.clock)\n        // update currClient\n        currClient = curr.id.client\n      }\n      currClock = curr.id.clock + curr.length\n    }\n    // write the end to `to`\n    to.set(currClient, currClock)\n  }\n  return { from, to }\n}\n\n/**\n * @param {Uint8Array} update\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nexport const parseUpdateMeta = update => parseUpdateMetaV2(update, UpdateDecoderV1)\n\n/**\n * This method is intended to slice any kind of struct and retrieve the right part.\n * It does not handle side-effects, so it should only be used by the lazy-encoder.\n *\n * @param {Item | GC | Skip} left\n * @param {number} diff\n * @return {Item | GC}\n */\nconst sliceStruct = (left, diff) => {\n  if (left.constructor === GC) {\n    const { client, clock } = left.id\n    return new GC(createID(client, clock + diff), left.length - diff)\n  } else if (left.constructor === Skip) {\n    const { client, clock } = left.id\n    return new Skip(createID(client, clock + diff), left.length - diff)\n  } else {\n    const leftItem = /** @type {Item} */ (left)\n    const { client, clock } = leftItem.id\n    return new Item(\n      createID(client, clock + diff),\n      null,\n      createID(client, clock + diff - 1),\n      null,\n      leftItem.rightOrigin,\n      leftItem.parent,\n      leftItem.parentSub,\n      leftItem.content.splice(diff)\n    )\n  }\n}\n\n/**\n *\n * This function works similarly to `readUpdateV2`.\n *\n * @param {Array<Uint8Array>} updates\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n * @return {Uint8Array}\n */\nexport const mergeUpdatesV2 = (updates, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  const updateDecoders = updates.map(update => new YDecoder(decoding.createDecoder(update)))\n  let lazyStructDecoders = updateDecoders.map(decoder => new LazyStructReader(decoder, true))\n\n  /**\n   * @todo we don't need offset because we always slice before\n   * @type {null | { struct: Item | GC | Skip, offset: number }}\n   */\n  let currWrite = null\n\n  const updateEncoder = new YEncoder()\n  // write structs lazily\n  const lazyStructEncoder = new LazyStructWriter(updateEncoder)\n\n  // Note: We need to ensure that all lazyStructDecoders are fully consumed\n  // Note: Should merge document updates whenever possible - even from different updates\n  // Note: Should handle that some operations cannot be applied yet ()\n\n  while (true) {\n    // Write higher clients first ⇒ sort by clientID & clock and remove decoders without content\n    lazyStructDecoders = lazyStructDecoders.filter(dec => dec.curr !== null)\n    lazyStructDecoders.sort(\n      /** @type {function(any,any):number} */ (dec1, dec2) => {\n        if (dec1.curr.id.client === dec2.curr.id.client) {\n          const clockDiff = dec1.curr.id.clock - dec2.curr.id.clock\n          if (clockDiff === 0) {\n            return dec1.curr.constructor === dec2.curr.constructor ? 0 : (\n              dec1.curr.constructor === Skip ? 1 : -1\n            )\n          } else {\n            return clockDiff\n          }\n        } else {\n          return dec2.curr.id.client - dec1.curr.id.client\n        }\n      }\n    )\n    if (lazyStructDecoders.length === 0) {\n      break\n    }\n    const currDecoder = lazyStructDecoders[0]\n    // write from currDecoder until the next operation is from another client or if filler-struct\n    // then we need to reorder the decoders and find the next operation to write\n    const firstClient = /** @type {Item | GC} */ (currDecoder.curr).id.client\n\n    if (currWrite !== null) {\n      let curr = /** @type {Item | GC | null} */ (currDecoder.curr)\n\n      // iterate until we find something that we haven't written already\n      // remember: first the high client-ids are written\n      while (curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client) {\n        curr = currDecoder.next()\n      }\n      if (curr === null || curr.id.client !== firstClient) {\n        continue\n      }\n\n      if (firstClient !== currWrite.struct.id.client) {\n        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n        currWrite = { struct: curr, offset: 0 }\n        currDecoder.next()\n      } else {\n        if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {\n          // @todo write currStruct & set currStruct = Skip(clock = currStruct.id.clock + currStruct.length, length = curr.id.clock - self.clock)\n          if (currWrite.struct.constructor === Skip) {\n            // extend existing skip\n            currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock\n          } else {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n            const diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length\n            /**\n             * @type {Skip}\n             */\n            const struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff)\n            currWrite = { struct, offset: 0 }\n          }\n        } else { // if (currWrite.struct.id.clock + currWrite.struct.length >= curr.id.clock) {\n          const diff = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock\n          if (diff > 0) {\n            if (currWrite.struct.constructor === Skip) {\n              // prefer to slice Skip because the other struct might contain more information\n              currWrite.struct.length -= diff\n            } else {\n              curr = sliceStruct(curr, diff)\n            }\n          }\n          if (!currWrite.struct.mergeWith(/** @type {any} */ (curr))) {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n            currWrite = { struct: curr, offset: 0 }\n            currDecoder.next()\n          }\n        }\n      }\n    } else {\n      currWrite = { struct: /** @type {Item | GC} */ (currDecoder.curr), offset: 0 }\n      currDecoder.next()\n    }\n    for (\n      let next = currDecoder.curr;\n      next !== null && next.id.client === firstClient && next.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next.constructor !== Skip;\n      next = currDecoder.next()\n    ) {\n      writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n      currWrite = { struct: next, offset: 0 }\n    }\n  }\n  if (currWrite !== null) {\n    writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n    currWrite = null\n  }\n  finishLazyStructWriting(lazyStructEncoder)\n\n  const dss = updateDecoders.map(decoder => readDeleteSet(decoder))\n  const ds = mergeDeleteSets(dss)\n  writeDeleteSet(updateEncoder, ds)\n  return updateEncoder.toUint8Array()\n}\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n */\nexport const diffUpdateV2 = (update, sv, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  const state = decodeStateVector(sv)\n  const encoder = new YEncoder()\n  const lazyStructWriter = new LazyStructWriter(encoder)\n  const decoder = new YDecoder(decoding.createDecoder(update))\n  const reader = new LazyStructReader(decoder, false)\n  while (reader.curr) {\n    const curr = reader.curr\n    const currClient = curr.id.client\n    const svClock = state.get(currClient) || 0\n    if (reader.curr.constructor === Skip) {\n      // the first written struct shouldn't be a skip\n      reader.next()\n      continue\n    }\n    if (curr.id.clock + curr.length > svClock) {\n      writeStructToLazyStructWriter(lazyStructWriter, curr, math.max(svClock - curr.id.clock, 0))\n      reader.next()\n      while (reader.curr && reader.curr.id.client === currClient) {\n        writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0)\n        reader.next()\n      }\n    } else {\n      // read until something new comes up\n      while (reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock) {\n        reader.next()\n      }\n    }\n  }\n  finishLazyStructWriting(lazyStructWriter)\n  // write ds\n  const ds = readDeleteSet(decoder)\n  writeDeleteSet(encoder, ds)\n  return encoder.toUint8Array()\n}\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n */\nexport const diffUpdate = (update, sv) => diffUpdateV2(update, sv, UpdateDecoderV1, UpdateEncoderV1)\n\n/**\n * @param {LazyStructWriter} lazyWriter\n */\nconst flushLazyStructWriter = lazyWriter => {\n  if (lazyWriter.written > 0) {\n    lazyWriter.clientStructs.push({ written: lazyWriter.written, restEncoder: encoding.toUint8Array(lazyWriter.encoder.restEncoder) })\n    lazyWriter.encoder.restEncoder = encoding.createEncoder()\n    lazyWriter.written = 0\n  }\n}\n\n/**\n * @param {LazyStructWriter} lazyWriter\n * @param {Item | GC} struct\n * @param {number} offset\n */\nconst writeStructToLazyStructWriter = (lazyWriter, struct, offset) => {\n  // flush curr if we start another client\n  if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) {\n    flushLazyStructWriter(lazyWriter)\n  }\n  if (lazyWriter.written === 0) {\n    lazyWriter.currClient = struct.id.client\n    // write next client\n    lazyWriter.encoder.writeClient(struct.id.client)\n    // write startClock\n    encoding.writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset)\n  }\n  struct.write(lazyWriter.encoder, offset)\n  lazyWriter.written++\n}\n/**\n * Call this function when we collected all parts and want to\n * put all the parts together. After calling this method,\n * you can continue using the UpdateEncoder.\n *\n * @param {LazyStructWriter} lazyWriter\n */\nconst finishLazyStructWriting = (lazyWriter) => {\n  flushLazyStructWriter(lazyWriter)\n\n  // this is a fresh encoder because we called flushCurr\n  const restEncoder = lazyWriter.encoder.restEncoder\n\n  /**\n   * Now we put all the fragments together.\n   * This works similarly to `writeClientsStructs`\n   */\n\n  // write # states that were updated - i.e. the clients\n  encoding.writeVarUint(restEncoder, lazyWriter.clientStructs.length)\n\n  for (let i = 0; i < lazyWriter.clientStructs.length; i++) {\n    const partStructs = lazyWriter.clientStructs[i]\n    /**\n     * Works similarly to `writeStructs`\n     */\n    // write # encoded structs\n    encoding.writeVarUint(restEncoder, partStructs.written)\n    // write the rest of the fragment\n    encoding.writeUint8Array(restEncoder, partStructs.restEncoder)\n  }\n}\n","\nimport {\n  isDeleted,\n  Item, AbstractType, Transaction, AbstractStruct // eslint-disable-line\n} from '../internals.js'\n\nimport * as set from 'lib0/set.js'\nimport * as array from 'lib0/array.js'\n\n/**\n * YEvent describes the changes on a YType.\n */\nexport class YEvent {\n  /**\n   * @param {AbstractType<any>} target The changed type.\n   * @param {Transaction} transaction\n   */\n  constructor (target, transaction) {\n    /**\n     * The type on which this event was created on.\n     * @type {AbstractType<any>}\n     */\n    this.target = target\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n    this.currentTarget = target\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n    this.transaction = transaction\n    /**\n     * @type {Object|null}\n     */\n    this._changes = null\n  }\n\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n  get path () {\n    // @ts-ignore _item is defined because target is integrated\n    return getPathTo(this.currentTarget, this.target)\n  }\n\n  /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  deletes (struct) {\n    return isDeleted(this.transaction.deleteSet, struct.id)\n  }\n\n  /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  adds (struct) {\n    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0)\n  }\n\n  /**\n   * @return {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert:Array<any>}|{delete:number}|{retain:number}>}}\n   */\n  get changes () {\n    let changes = this._changes\n    if (changes === null) {\n      const target = this.target\n      const added = set.create()\n      const deleted = set.create()\n      /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */\n      const delta = []\n      /**\n       * @type {Map<string,{ action: 'add' | 'update' | 'delete', oldValue: any}>}\n       */\n      const keys = new Map()\n      changes = {\n        added, deleted, delta, keys\n      }\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target))\n      if (changed.has(null)) {\n        /**\n         * @type {any}\n         */\n        let lastOp = null\n        const packOp = () => {\n          if (lastOp) {\n            delta.push(lastOp)\n          }\n        }\n        for (let item = target._start; item !== null; item = item.right) {\n          if (item.deleted) {\n            if (this.deletes(item) && !this.adds(item)) {\n              if (lastOp === null || lastOp.delete === undefined) {\n                packOp()\n                lastOp = { delete: 0 }\n              }\n              lastOp.delete += item.length\n              deleted.add(item)\n            } // else nop\n          } else {\n            if (this.adds(item)) {\n              if (lastOp === null || lastOp.insert === undefined) {\n                packOp()\n                lastOp = { insert: [] }\n              }\n              lastOp.insert = lastOp.insert.concat(item.content.getContent())\n              added.add(item)\n            } else {\n              if (lastOp === null || lastOp.retain === undefined) {\n                packOp()\n                lastOp = { retain: 0 }\n              }\n              lastOp.retain += item.length\n            }\n          }\n        }\n        if (lastOp !== null && lastOp.retain === undefined) {\n          packOp()\n        }\n      }\n      changed.forEach(key => {\n        if (key !== null) {\n          const item = /** @type {Item} */ (target._map.get(key))\n          /**\n           * @type {'delete' | 'add' | 'update'}\n           */\n          let action\n          let oldValue\n          if (this.adds(item)) {\n            let prev = item.left\n            while (prev !== null && this.adds(prev)) {\n              prev = prev.left\n            }\n            if (this.deletes(item)) {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'delete'\n                oldValue = array.last(prev.content.getContent())\n              } else {\n                return\n              }\n            } else {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'update'\n                oldValue = array.last(prev.content.getContent())\n              } else {\n                action = 'add'\n                oldValue = undefined\n              }\n            }\n          } else {\n            if (this.deletes(item)) {\n              action = 'delete'\n              oldValue = array.last(/** @type {Item} */ item.content.getContent())\n            } else {\n              return // nop\n            }\n          }\n          keys.set(key, { action, oldValue })\n        }\n      })\n      this._changes = changes\n    }\n    return /** @type {any} */ (changes)\n  }\n}\n\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\nconst getPathTo = (parent, child) => {\n  const path = []\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub)\n    } else {\n      // parent is array-ish\n      let i = 0\n      let c = /** @type {AbstractType<any>} */ (child._item.parent)._start\n      while (c !== child._item && c !== null) {\n        if (!c.deleted) {\n          i++\n        }\n        c = c.right\n      }\n      path.unshift(i)\n    }\n    child = /** @type {AbstractType<any>} */ (child._item.parent)\n  }\n  return path\n}\n","\nimport {\n  removeEventHandlerListener,\n  callEventHandlerListeners,\n  addEventHandlerListener,\n  createEventHandler,\n  getState,\n  isVisible,\n  ContentType,\n  createID,\n  ContentAny,\n  ContentBinary,\n  getItemCleanStart,\n  ContentDoc, YText, YArray, UpdateEncoderV1, UpdateEncoderV2, Doc, Snapshot, Transaction, EventHandler, YEvent, Item, // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map.js'\nimport * as iterator from 'lib0/iterator.js'\nimport * as error from 'lib0/error.js'\nimport * as math from 'lib0/math.js'\n\nconst maxSearchMarker = 80\n\n/**\n * A unique timestamp that identifies each marker.\n *\n * Time is relative,.. this is more like an ever-increasing clock.\n *\n * @type {number}\n */\nlet globalSearchMarkerTimestamp = 0\n\nexport class ArraySearchMarker {\n  /**\n   * @param {Item} p\n   * @param {number} index\n   */\n  constructor (p, index) {\n    p.marker = true\n    this.p = p\n    this.index = index\n    this.timestamp = globalSearchMarkerTimestamp++\n  }\n}\n\n/**\n * @param {ArraySearchMarker} marker\n */\nconst refreshMarkerTimestamp = marker => { marker.timestamp = globalSearchMarkerTimestamp++ }\n\n/**\n * This is rather complex so this function is the only thing that should overwrite a marker\n *\n * @param {ArraySearchMarker} marker\n * @param {Item} p\n * @param {number} index\n */\nconst overwriteMarker = (marker, p, index) => {\n  marker.p.marker = false\n  marker.p = p\n  p.marker = true\n  marker.index = index\n  marker.timestamp = globalSearchMarkerTimestamp++\n}\n\n/**\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {Item} p\n * @param {number} index\n */\nconst markPosition = (searchMarker, p, index) => {\n  if (searchMarker.length >= maxSearchMarker) {\n    // override oldest marker (we don't want to create more objects)\n    const marker = searchMarker.reduce((a, b) => a.timestamp < b.timestamp ? a : b)\n    overwriteMarker(marker, p, index)\n    return marker\n  } else {\n    // create new marker\n    const pm = new ArraySearchMarker(p, index)\n    searchMarker.push(pm)\n    return pm\n  }\n}\n\n/**\n * Search marker help us to find positions in the associative array faster.\n *\n * They speed up the process of finding a position without much bookkeeping.\n *\n * A maximum of `maxSearchMarker` objects are created.\n *\n * This function always returns a refreshed marker (updated timestamp)\n *\n * @param {AbstractType<any>} yarray\n * @param {number} index\n */\nexport const findMarker = (yarray, index) => {\n  if (yarray._start === null || index === 0 || yarray._searchMarker === null) {\n    return null\n  }\n  const marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a, b) => math.abs(index - a.index) < math.abs(index - b.index) ? a : b)\n  let p = yarray._start\n  let pindex = 0\n  if (marker !== null) {\n    p = marker.p\n    pindex = marker.index\n    refreshMarkerTimestamp(marker) // we used it, we might need to use it again\n  }\n  // iterate to right if possible\n  while (p.right !== null && pindex < index) {\n    if (!p.deleted && p.countable) {\n      if (index < pindex + p.length) {\n        break\n      }\n      pindex += p.length\n    }\n    p = p.right\n  }\n  // iterate to left if necessary (might be that pindex > index)\n  while (p.left !== null && pindex > index) {\n    p = p.left\n    if (!p.deleted && p.countable) {\n      pindex -= p.length\n    }\n  }\n  // we want to make sure that p can't be merged with left, because that would screw up everything\n  // in that cas just return what we have (it is most likely the best marker anyway)\n  // iterate to left until p can't be merged with left\n  while (p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock) {\n    p = p.left\n    if (!p.deleted && p.countable) {\n      pindex -= p.length\n    }\n  }\n\n  // @todo remove!\n  // assure position\n  // {\n  //   let start = yarray._start\n  //   let pos = 0\n  //   while (start !== p) {\n  //     if (!start.deleted && start.countable) {\n  //       pos += start.length\n  //     }\n  //     start = /** @type {Item} */ (start.right)\n  //   }\n  //   if (pos !== pindex) {\n  //     debugger\n  //     throw new Error('Gotcha position fail!')\n  //   }\n  // }\n  // if (marker) {\n  //   if (window.lengthes == null) {\n  //     window.lengthes = []\n  //     window.getLengthes = () => window.lengthes.sort((a, b) => a - b)\n  //   }\n  //   window.lengthes.push(marker.index - pindex)\n  //   console.log('distance', marker.index - pindex, 'len', p && p.parent.length)\n  // }\n  if (marker !== null && math.abs(marker.index - pindex) < /** @type {YText|YArray<any>} */ (p.parent).length / maxSearchMarker) {\n    // adjust existing marker\n    overwriteMarker(marker, p, pindex)\n    return marker\n  } else {\n    // create new marker\n    return markPosition(yarray._searchMarker, p, pindex)\n  }\n}\n\n/**\n * Update markers when a change happened.\n *\n * This should be called before doing a deletion!\n *\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {number} index\n * @param {number} len If insertion, len is positive. If deletion, len is negative.\n */\nexport const updateMarkerChanges = (searchMarker, index, len) => {\n  for (let i = searchMarker.length - 1; i >= 0; i--) {\n    const m = searchMarker[i]\n    if (len > 0) {\n      /**\n       * @type {Item|null}\n       */\n      let p = m.p\n      p.marker = false\n      // Ideally we just want to do a simple position comparison, but this will only work if\n      // search markers don't point to deleted items for formats.\n      // Iterate marker to prev undeleted countable position so we know what to do when updating a position\n      while (p && (p.deleted || !p.countable)) {\n        p = p.left\n        if (p && !p.deleted && p.countable) {\n          // adjust position. the loop should break now\n          m.index -= p.length\n        }\n      }\n      if (p === null || p.marker === true) {\n        // remove search marker if updated position is null or if position is already marked\n        searchMarker.splice(i, 1)\n        continue\n      }\n      m.p = p\n      p.marker = true\n    }\n    if (index < m.index || (len > 0 && index === m.index)) { // a simple index <= m.index check would actually suffice\n      m.index = math.max(index, m.index + len)\n    }\n  }\n}\n\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */\nexport const getTypeChildren = t => {\n  let s = t._start\n  const arr = []\n  while (s) {\n    arr.push(s)\n    s = s.right\n  }\n  return arr\n}\n\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\nexport const callTypeObservers = (type, transaction, event) => {\n  const changedType = type\n  const changedParentTypes = transaction.changedParentTypes\n  while (true) {\n    // @ts-ignore\n    map.setIfUndefined(changedParentTypes, type, () => []).push(event)\n    if (type._item === null) {\n      break\n    }\n    type = /** @type {AbstractType<any>} */ (type._item.parent)\n  }\n  callEventHandlerListeners(changedType._eH, event, transaction)\n}\n\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\nexport class AbstractType {\n  constructor () {\n    /**\n     * @type {Item|null}\n     */\n    this._item = null\n    /**\n     * @type {Map<string,Item>}\n     */\n    this._map = new Map()\n    /**\n     * @type {Item|null}\n     */\n    this._start = null\n    /**\n     * @type {Doc|null}\n     */\n    this.doc = null\n    this._length = 0\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n    this._eH = createEventHandler()\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent>,Transaction>}\n     */\n    this._dEH = createEventHandler()\n    /**\n     * @type {null | Array<ArraySearchMarker>}\n     */\n    this._searchMarker = null\n  }\n\n  /**\n   * @return {AbstractType<any>|null}\n   */\n  get parent () {\n    return this._item ? /** @type {AbstractType<any>} */ (this._item.parent) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */\n  _integrate (y, item) {\n    this.doc = y\n    this._item = item\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  _copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  clone () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) { }\n\n  /**\n   * The first non-deleted item\n   */\n  get _first () {\n    let n = this._start\n    while (n !== null && n.deleted) {\n      n = n.right\n    }\n    return n\n  }\n\n  /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    if (!transaction.local && this._searchMarker) {\n      this._searchMarker.length = 0\n    }\n  }\n\n  /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */\n  observe (f) {\n    addEventHandlerListener(this._eH, f)\n  }\n\n  /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n  observeDeep (f) {\n    addEventHandlerListener(this._dEH, f)\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */\n  unobserve (f) {\n    removeEventHandlerListener(this._eH, f)\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n  unobserveDeep (f) {\n    removeEventHandlerListener(this._dEH, f)\n  }\n\n  /**\n   * @abstract\n   * @return {any}\n   */\n  toJSON () {}\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} start\n * @param {number} end\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListSlice = (type, start, end) => {\n  if (start < 0) {\n    start = type._length + start\n  }\n  if (end < 0) {\n    end = type._length + end\n  }\n  let len = end - start\n  const cs = []\n  let n = type._start\n  while (n !== null && len > 0) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      if (c.length <= start) {\n        start -= c.length\n      } else {\n        for (let i = start; i < c.length && len > 0; i++) {\n          cs.push(c[i])\n          len--\n        }\n        start = 0\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListToArray = type => {\n  const cs = []\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i])\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListToArraySnapshot = (type, snapshot) => {\n  const cs = []\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i])\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * Executes a provided function on once on overy element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\nexport const typeListForEach = (type, f) => {\n  let index = 0\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type)\n      }\n    }\n    n = n.right\n  }\n}\n\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\nexport const typeListMap = (type, f) => {\n  /**\n   * @type {Array<any>}\n   */\n  const result = []\n  typeListForEach(type, (c, i) => {\n    result.push(f(c, i, type))\n  })\n  return result\n}\n\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\nexport const typeListCreateIterator = type => {\n  let n = type._start\n  /**\n   * @type {Array<any>|null}\n   */\n  let currentContent = null\n  let currentContentIndex = 0\n  return {\n    [Symbol.iterator] () {\n      return this\n    },\n    next: () => {\n      // find some content\n      if (currentContent === null) {\n        while (n !== null && n.deleted) {\n          n = n.right\n        }\n        // check if we reached the end, no need to check currentContent, because it does not exist\n        if (n === null) {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n        // we found n, so we can set currentContent\n        currentContent = n.content.getContent()\n        currentContentIndex = 0\n        n = n.right // we used the content of n, now iterate to next\n      }\n      const value = currentContent[currentContentIndex++]\n      // check if we need to empty currentContent\n      if (currentContent.length <= currentContentIndex) {\n        currentContent = null\n      }\n      return {\n        done: false,\n        value\n      }\n    }\n  }\n}\n\n/**\n * Executes a provided function on once on overy element of this YArray.\n * Operates on a snapshotted state of the document.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,AbstractType<any>):void} f A function to execute on every element of this YArray.\n * @param {Snapshot} snapshot\n *\n * @private\n * @function\n */\nexport const typeListForEachSnapshot = (type, f, snapshot) => {\n  let index = 0\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type)\n      }\n    }\n    n = n.right\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\nexport const typeListGet = (type, index) => {\n  const marker = findMarker(type, index)\n  let n = type._start\n  if (marker !== null) {\n    n = marker.p\n    index -= marker.index\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index]\n      }\n      index -= n.length\n    }\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nexport const typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {\n  let left = referenceItem\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  const store = doc.store\n  const right = referenceItem === null ? parent._start : referenceItem.right\n  /**\n   * @type {Array<Object|Array<any>|number>}\n   */\n  let jsonContent = []\n  const packJsonContent = () => {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent))\n      left.integrate(transaction, 0)\n      jsonContent = []\n    }\n  }\n  content.forEach(c => {\n    switch (c.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        jsonContent.push(c)\n        break\n      default:\n        packJsonContent()\n        switch (c.constructor) {\n          case Uint8Array:\n          case ArrayBuffer:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(/** @type {Uint8Array} */ (c))))\n            left.integrate(transaction, 0)\n            break\n          case Doc:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(/** @type {Doc} */ (c)))\n            left.integrate(transaction, 0)\n            break\n          default:\n            if (c instanceof AbstractType) {\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c))\n              left.integrate(transaction, 0)\n            } else {\n              throw new Error('Unexpected content type in insert operation')\n            }\n        }\n    }\n  })\n  packJsonContent()\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nexport const typeListInsertGenerics = (transaction, parent, index, content) => {\n  if (index === 0) {\n    if (parent._searchMarker) {\n      updateMarkerChanges(parent._searchMarker, index, content.length)\n    }\n    return typeListInsertGenericsAfter(transaction, parent, null, content)\n  }\n  const startIndex = index\n  const marker = findMarker(parent, index)\n  let n = parent._start\n  if (marker !== null) {\n    n = marker.p\n    index -= marker.index\n    // we need to iterate one to the left so that the algorithm works\n    if (index === 0) {\n      // @todo refactor this as it actually doesn't consider formats\n      n = n.prev // important! get the left undeleted item so that we can actually decrease index\n      index += (n && n.countable && !n.deleted) ? n.length : 0\n    }\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index))\n        }\n        break\n      }\n      index -= n.length\n    }\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, content.length)\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\nexport const typeListDelete = (transaction, parent, index, length) => {\n  if (length === 0) { return }\n  const startIndex = index\n  const startLength = length\n  const marker = findMarker(parent, index)\n  let n = parent._start\n  if (marker !== null) {\n    n = marker.p\n    index -= marker.index\n  }\n  // compute the first item to be deleted\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index))\n      }\n      index -= n.length\n    }\n  }\n  // delete all items until done\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length))\n      }\n      n.delete(transaction)\n      length -= n.length\n    }\n    n = n.right\n  }\n  if (length > 0) {\n    throw error.create('array length exceeded')\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, -startLength + length /* in case we remove the above exception */)\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\nexport const typeMapDelete = (transaction, parent, key) => {\n  const c = parent._map.get(key)\n  if (c !== undefined) {\n    c.delete(transaction)\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\nexport const typeMapSet = (transaction, parent, key, value) => {\n  const left = parent._map.get(key) || null\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  let content\n  if (value == null) {\n    content = new ContentAny([value])\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        content = new ContentAny([value])\n        break\n      case Uint8Array:\n        content = new ContentBinary(/** @type {Uint8Array} */ (value))\n        break\n      case Doc:\n        content = new ContentDoc(/** @type {Doc} */ (value))\n        break\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value)\n        } else {\n          throw new Error('Unexpected content type')\n        }\n    }\n  }\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0)\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nexport const typeMapGet = (parent, key) => {\n  const val = parent._map.get(key)\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nexport const typeMapGetAll = (parent) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {}\n  parent._map.forEach((value, key) => {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1]\n    }\n  })\n  return res\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\nexport const typeMapHas = (parent, key) => {\n  const val = parent._map.get(key)\n  return val !== undefined && !val.deleted\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nexport const typeMapGetSnapshot = (parent, key, snapshot) => {\n  let v = parent._map.get(key) || null\n  while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n    v = v.left\n  }\n  return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined\n}\n\n/**\n * @param {Map<string,Item>} map\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\nexport const createMapIterator = map => iterator.iteratorFilter(map.entries(), /** @param {any} entry */ entry => !entry[1].deleted)\n","/**\n * @module YArray\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  typeListGet,\n  typeListToArray,\n  typeListForEach,\n  typeListCreateIterator,\n  typeListInsertGenerics,\n  typeListDelete,\n  typeListMap,\n  YArrayRefID,\n  callTypeObservers,\n  transact,\n  ArraySearchMarker, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, Transaction, Item // eslint-disable-line\n} from '../internals.js'\nimport { typeListSlice } from './AbstractType.js'\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n */\nexport class YArrayEvent extends YEvent {\n  /**\n   * @param {YArray<T>} yarray The changed type\n   * @param {Transaction} transaction The transaction object\n   */\n  constructor (yarray, transaction) {\n    super(yarray, transaction)\n    this._transaction = transaction\n  }\n}\n\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\nexport class YArray extends AbstractType {\n  constructor () {\n    super()\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n    this._prelimContent = []\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = []\n  }\n\n  /**\n   * Construct a new YArray containing the specified items.\n   * @template T\n   * @param {Array<T>} items\n   * @return {YArray<T>}\n   */\n  static from (items) {\n    const a = new YArray()\n    a.push(items)\n    return a\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YArray()\n  }\n\n  /**\n   * @return {YArray<T>}\n   */\n  clone () {\n    const arr = new YArray()\n    arr.insert(0, this.toArray().map(el =>\n      el instanceof AbstractType ? el.clone() : el\n    ))\n    return arr\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs)\n    callTypeObservers(this, transaction, new YArrayEvent(this, transaction))\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content)\n      })\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content)\n  }\n\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to preppend.\n   */\n  unshift (content) {\n    this.insert(0, content)\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length)\n      })\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, length)\n    }\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<T>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */\n  toJSON () {\n    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)\n  }\n\n  /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template T,M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */\n  map (f) {\n    return typeListMap(this, /** @type {any} */ (f))\n  }\n\n  /**\n   * Executes a provided function on once on overy element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f)\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return typeListCreateIterator(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YArrayRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n *\n * @private\n * @function\n */\nexport const readYArray = decoder => new YArray()\n","\n/**\n * @module YMap\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapHas,\n  createMapIterator,\n  YMapRefID,\n  callTypeObservers,\n  transact,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, Transaction, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as iterator from 'lib0/iterator.js'\n\n/**\n * @template T\n * Event that describes the changes on a YMap.\n */\nexport class YMapEvent extends YEvent {\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  constructor (ymap, transaction, subs) {\n    super(ymap, transaction)\n    this.keysChanged = subs\n  }\n}\n\n/**\n * @template T number|string|Object|Array|Uint8Array\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<T>>\n * @implements {Iterable<T>}\n */\nexport class YMap extends AbstractType {\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  constructor (entries) {\n    super()\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n    this._prelimContent = null\n\n    if (entries === undefined) {\n      this._prelimContent = new Map()\n    } else {\n      this._prelimContent = new Map(entries)\n    }\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;/** @type {Map<string, any>} */ (this._prelimContent).forEach((value, key) => {\n      this.set(key, value)\n    })\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YMap()\n  }\n\n  /**\n   * @return {YMap<T>}\n   */\n  clone () {\n    const map = new YMap()\n    this.forEach((value, key) => {\n      map.set(key, value instanceof AbstractType ? value.clone() : value)\n    })\n    return map\n  }\n\n  /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs))\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,T>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {}\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        const v = item.content.getContent()[item.length - 1]\n        map[key] = v instanceof AbstractType ? v.toJSON() : v\n      }\n    })\n    return map\n  }\n\n  /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */\n  get size () {\n    return [...createMapIterator(this._map)].length\n  }\n\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n  keys () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[0])\n  }\n\n  /**\n   * Returns the values for each element in the YMap Type.\n   *\n   * @return {IterableIterator<any>}\n   */\n  values () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[1].content.getContent()[v[1].length - 1])\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<any>}\n   */\n  entries () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => [v[0], v[1].content.getContent()[v[1].length - 1]])\n  }\n\n  /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(T,string,YMap<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {}\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        f(item.content.getContent()[item.length - 1], key, this)\n      }\n    })\n    return map\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */\n  delete (key) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, key)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).delete(key)\n    }\n  }\n\n  /**\n   * Adds or updates an element with a specified key and value.\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {T} value The value of the element to add\n   */\n  set (key, value) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, key, value)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).set(key, value)\n    }\n    return value\n  }\n\n  /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {T|undefined}\n   */\n  get (key) {\n    return /** @type {any} */ (typeMapGet(this, key))\n  }\n\n  /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */\n  has (key) {\n    return typeMapHas(this, key)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YMapRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n *\n * @private\n * @function\n */\nexport const readYMap = decoder => new YMap()\n","\n/**\n * @module YText\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  getItemCleanStart,\n  getState,\n  isVisible,\n  createID,\n  YTextRefID,\n  callTypeObservers,\n  transact,\n  ContentEmbed,\n  GC,\n  ContentFormat,\n  ContentString,\n  splitSnapshotAffectedStructs,\n  iterateDeletedStructs,\n  iterateStructs,\n  findMarker,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapGetAll,\n  updateMarkerChanges,\n  ArraySearchMarker, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, ID, Doc, Item, Snapshot, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as object from 'lib0/object.js'\nimport * as map from 'lib0/map.js'\nimport * as error from 'lib0/error.js'\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nconst equalAttrs = (a, b) => a === b || (typeof a === 'object' && typeof b === 'object' && a && b && object.equalFlat(a, b))\n\nexport class ItemTextListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {number} index\n   * @param {Map<string,any>} currentAttributes\n   */\n  constructor (left, right, index, currentAttributes) {\n    this.left = left\n    this.right = right\n    this.index = index\n    this.currentAttributes = currentAttributes\n  }\n\n  /**\n   * Only call this if you know that this.right is defined\n   */\n  forward () {\n    if (this.right === null) {\n      error.unexpectedCase()\n    }\n    switch (this.right.content.constructor) {\n      case ContentEmbed:\n      case ContentString:\n        if (!this.right.deleted) {\n          this.index += this.right.length\n        }\n        break\n      case ContentFormat:\n        if (!this.right.deleted) {\n          updateCurrentAttributes(this.currentAttributes, /** @type {ContentFormat} */ (this.right.content))\n        }\n        break\n    }\n    this.left = this.right\n    this.right = this.right.right\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} pos\n * @param {number} count steps to move forward\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findNextPosition = (transaction, pos, count) => {\n  while (pos.right !== null && count > 0) {\n    switch (pos.right.content.constructor) {\n      case ContentEmbed:\n      case ContentString:\n        if (!pos.right.deleted) {\n          if (count < pos.right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count))\n          }\n          pos.index += pos.right.length\n          count -= pos.right.length\n        }\n        break\n      case ContentFormat:\n        if (!pos.right.deleted) {\n          updateCurrentAttributes(pos.currentAttributes, /** @type {ContentFormat} */ (pos.right.content))\n        }\n        break\n    }\n    pos.left = pos.right\n    pos.right = pos.right.right\n    // pos.forward() - we don't forward because that would halve the performance because we already do the checks above\n  }\n  return pos\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findPosition = (transaction, parent, index) => {\n  const currentAttributes = new Map()\n  const marker = findMarker(parent, index)\n  if (marker) {\n    const pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes)\n    return findNextPosition(transaction, pos, index - marker.index)\n  } else {\n    const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes)\n    return findNextPosition(transaction, pos, index)\n  }\n}\n\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\nconst insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {\n  // check if we really need to remove attributes\n  while (\n    currPos.right !== null && (\n      currPos.right.deleted === true || (\n        currPos.right.content.constructor === ContentFormat &&\n        equalAttrs(negatedAttributes.get(/** @type {ContentFormat} */ (currPos.right.content).key), /** @type {ContentFormat} */ (currPos.right.content).value)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      negatedAttributes.delete(/** @type {ContentFormat} */ (currPos.right.content).key)\n    }\n    currPos.forward()\n  }\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  let nextFormat = currPos.left\n  const right = currPos.right\n  negatedAttributes.forEach((val, key) => {\n    nextFormat = new Item(createID(ownClientId, getState(doc.store, ownClientId)), nextFormat, nextFormat && nextFormat.lastId, right, right && right.id, parent, null, new ContentFormat(key, val))\n    nextFormat.integrate(transaction, 0)\n    currPos.right = nextFormat\n  })\n}\n\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\nconst updateCurrentAttributes = (currentAttributes, format) => {\n  const { key, value } = format\n  if (value === null) {\n    currentAttributes.delete(key)\n  } else {\n    currentAttributes.set(key, value)\n  }\n}\n\n/**\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst minimizeAttributeChanges = (currPos, attributes) => {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  while (true) {\n    if (currPos.right === null) {\n      break\n    } else if (currPos.right.deleted || (currPos.right.content.constructor === ContentFormat && equalAttrs(attributes[(/** @type {ContentFormat} */ (currPos.right.content)).key] || null, /** @type {ContentFormat} */ (currPos.right.content).value))) {\n      //\n    } else {\n      break\n    }\n    currPos.forward()\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\nconst insertAttributes = (transaction, parent, currPos, attributes) => {\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  const negatedAttributes = new Map()\n  // insert format-start items\n  for (const key in attributes) {\n    const val = attributes[key]\n    const currentVal = currPos.currentAttributes.get(key) || null\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal)\n      const { left, right } = currPos\n      currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val))\n      currPos.right.integrate(transaction, 0)\n      currPos.forward()\n    }\n  }\n  return negatedAttributes\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {string|object} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\nconst insertText = (transaction, parent, currPos, text, attributes) => {\n  currPos.currentAttributes.forEach((val, key) => {\n    if (attributes[key] === undefined) {\n      attributes[key] = null\n    }\n  })\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  minimizeAttributeChanges(currPos, attributes)\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes)\n  // insert content\n  const content = text.constructor === String ? new ContentString(/** @type {string} */ (text)) : new ContentEmbed(text)\n  let { left, right, index } = currPos\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength())\n  }\n  right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content)\n  right.integrate(transaction, 0)\n  currPos.right = right\n  currPos.index = index\n  currPos.forward()\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes)\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst formatText = (transaction, parent, currPos, length, attributes) => {\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  minimizeAttributeChanges(currPos, attributes)\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes)\n  // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n  while (length > 0 && currPos.right !== null) {\n    if (!currPos.right.deleted) {\n      switch (currPos.right.content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (currPos.right.content)\n          const attr = attributes[key]\n          if (attr !== undefined) {\n            if (equalAttrs(attr, value)) {\n              negatedAttributes.delete(key)\n            } else {\n              negatedAttributes.set(key, value)\n            }\n            currPos.right.delete(transaction)\n          }\n          break\n        }\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length))\n          }\n          length -= currPos.right.length\n          break\n      }\n    }\n    currPos.forward()\n  }\n  // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n  if (length > 0) {\n    let newlines = ''\n    for (; length > 0; length--) {\n      newlines += '\\n'\n    }\n    currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines))\n    currPos.right.integrate(transaction, 0)\n    currPos.forward()\n  }\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes)\n}\n\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} end exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} endAttributes This attribute is modified!\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\nconst cleanupFormattingGap = (transaction, start, end, startAttributes, endAttributes) => {\n  while (end && end.content.constructor !== ContentString && end.content.constructor !== ContentEmbed) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      updateCurrentAttributes(endAttributes, /** @type {ContentFormat} */ (end.content))\n    }\n    end = end.right\n  }\n  let cleanups = 0\n  while (start !== end) {\n    if (!start.deleted) {\n      const content = start.content\n      switch (content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (content)\n          if ((endAttributes.get(key) || null) !== value || (startAttributes.get(key) || null) === value) {\n            // Either this format is overwritten or it is not necessary because the attribute already existed.\n            start.delete(transaction)\n            cleanups++\n          }\n          break\n        }\n      }\n    }\n    start = /** @type {Item} */ (start.right)\n  }\n  return cleanups\n}\n\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\nconst cleanupContextlessFormattingGap = (transaction, item) => {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || (item.right.content.constructor !== ContentString && item.right.content.constructor !== ContentEmbed))) {\n    item = item.right\n  }\n  const attrs = new Set()\n  // iterate back until a content item is found\n  while (item && (item.deleted || (item.content.constructor !== ContentString && item.content.constructor !== ContentEmbed))) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      const key = /** @type {ContentFormat} */ (item.content).key\n      if (attrs.has(key)) {\n        item.delete(transaction)\n      } else {\n        attrs.add(key)\n      }\n    }\n    item = item.left\n  }\n}\n\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\nexport const cleanupYTextFormatting = type => {\n  let res = 0\n  transact(/** @type {Doc} */ (type.doc), transaction => {\n    let start = /** @type {Item} */ (type._start)\n    let end = type._start\n    let startAttributes = map.create()\n    const currentAttributes = map.copy(startAttributes)\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (end.content))\n            break\n          case ContentEmbed:\n          case ContentString:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes)\n            startAttributes = map.copy(currentAttributes)\n            start = end\n            break\n        }\n      }\n      end = end.right\n    }\n  })\n  return res\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst deleteText = (transaction, currPos, length) => {\n  const startLength = length\n  const startAttrs = map.copy(currPos.currentAttributes)\n  const start = currPos.right\n  while (length > 0 && currPos.right !== null) {\n    if (currPos.right.deleted === false) {\n      switch (currPos.right.content.constructor) {\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length))\n          }\n          length -= currPos.right.length\n          currPos.right.delete(transaction)\n          break\n      }\n    }\n    currPos.forward()\n  }\n  if (start) {\n    cleanupFormattingGap(transaction, start, currPos.right, startAttrs, map.copy(currPos.currentAttributes))\n  }\n  const parent = /** @type {AbstractType<any>} */ (/** @type {Item} */ (currPos.left || currPos.right).parent)\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length)\n  }\n  return currPos\n}\n\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * @typedef {Object} DeltaItem\n * @property {number|undefined} DeltaItem.delete\n * @property {number|undefined} DeltaItem.retain\n * @property {string|undefined} DeltaItem.insert\n * @property {Object<string,any>} DeltaItem.attributes\n */\n\n/**\n * Event that describes the changes on a YText type.\n */\nexport class YTextEvent extends YEvent {\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed\n   */\n  constructor (ytext, transaction, subs) {\n    super(ytext, transaction)\n    /**\n     * @type {Array<DeltaItem>|null}\n     */\n    this._delta = null\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.keysChanged = new Set()\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true\n      } else {\n        this.keysChanged.add(sub)\n      }\n    })\n  }\n\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<DeltaItem>}\n   *\n   * @public\n   */\n  get delta () {\n    if (this._delta === null) {\n      const y = /** @type {Doc} */ (this.target.doc)\n      this._delta = []\n      transact(y, transaction => {\n        const delta = /** @type {Array<DeltaItem>} */ (this._delta)\n        const currentAttributes = new Map() // saves all current attributes for insert\n        const oldAttributes = new Map()\n        let item = this.target._start\n        /**\n         * @type {string?}\n         */\n        let action = null\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {} // counts added or removed new attributes for retain\n        /**\n         * @type {string|object}\n         */\n        let insert = ''\n        let retain = 0\n        let deleteLen = 0\n        const addOp = () => {\n          if (action !== null) {\n            /**\n             * @type {any}\n             */\n            let op\n            switch (action) {\n              case 'delete':\n                op = { delete: deleteLen }\n                deleteLen = 0\n                break\n              case 'insert':\n                op = { insert }\n                if (currentAttributes.size > 0) {\n                  op.attributes = {}\n                  currentAttributes.forEach((value, key) => {\n                    if (value !== null) {\n                      op.attributes[key] = value\n                    }\n                  })\n                }\n                insert = ''\n                break\n              case 'retain':\n                op = { retain }\n                if (Object.keys(attributes).length > 0) {\n                  op.attributes = {}\n                  for (const key in attributes) {\n                    op.attributes[key] = attributes[key]\n                  }\n                }\n                retain = 0\n                break\n            }\n            delta.push(op)\n            action = null\n          }\n        }\n        while (item !== null) {\n          switch (item.content.constructor) {\n            case ContentEmbed:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  addOp()\n                  action = 'insert'\n                  insert = /** @type {ContentEmbed} */ (item.content).embed\n                  addOp()\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp()\n                  action = 'delete'\n                }\n                deleteLen += 1\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp()\n                  action = 'retain'\n                }\n                retain += 1\n              }\n              break\n            case ContentString:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  if (action !== 'insert') {\n                    addOp()\n                    action = 'insert'\n                  }\n                  insert += /** @type {ContentString} */ (item.content).str\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp()\n                  action = 'delete'\n                }\n                deleteLen += item.length\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp()\n                  action = 'retain'\n                }\n                retain += item.length\n              }\n              break\n            case ContentFormat: {\n              const { key, value } = /** @type {ContentFormat} */ (item.content)\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  const curVal = currentAttributes.get(key) || null\n                  if (!equalAttrs(curVal, value)) {\n                    if (action === 'retain') {\n                      addOp()\n                    }\n                    if (equalAttrs(value, (oldAttributes.get(key) || null))) {\n                      delete attributes[key]\n                    } else {\n                      attributes[key] = value\n                    }\n                  } else {\n                    item.delete(transaction)\n                  }\n                }\n              } else if (this.deletes(item)) {\n                oldAttributes.set(key, value)\n                const curVal = currentAttributes.get(key) || null\n                if (!equalAttrs(curVal, value)) {\n                  if (action === 'retain') {\n                    addOp()\n                  }\n                  attributes[key] = curVal\n                }\n              } else if (!item.deleted) {\n                oldAttributes.set(key, value)\n                const attr = attributes[key]\n                if (attr !== undefined) {\n                  if (!equalAttrs(attr, value)) {\n                    if (action === 'retain') {\n                      addOp()\n                    }\n                    if (value === null) {\n                      attributes[key] = value\n                    } else {\n                      delete attributes[key]\n                    }\n                  } else {\n                    item.delete(transaction)\n                  }\n                }\n              }\n              if (!item.deleted) {\n                if (action === 'insert') {\n                  addOp()\n                }\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (item.content))\n              }\n              break\n            }\n          }\n          item = item.right\n        }\n        addOp()\n        while (delta.length > 0) {\n          const lastOp = delta[delta.length - 1]\n          if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n            // retain delta's if they don't assign attributes\n            delta.pop()\n          } else {\n            break\n          }\n        }\n      })\n    }\n    return this._delta\n  }\n}\n\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\nexport class YText extends AbstractType {\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  constructor (string) {\n    super()\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n    this._pending = string !== undefined ? [() => this.insert(0, string)] : []\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = []\n  }\n\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n  get length () {\n    return this._length\n  }\n\n  /**\n   * @param {Doc} y\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    try {\n      /** @type {Array<function>} */ (this._pending).forEach(f => f())\n    } catch (e) {\n      console.error(e)\n    }\n    this._pending = null\n  }\n\n  _copy () {\n    return new YText()\n  }\n\n  /**\n   * @return {YText}\n   */\n  clone () {\n    const text = new YText()\n    text.applyDelta(this.toDelta())\n    return text\n  }\n\n  /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs)\n    const event = new YTextEvent(this, transaction, parentSubs)\n    const doc = transaction.doc\n    // If a remote change happened, we try to cleanup potential formatting duplicates.\n    if (!transaction.local) {\n      // check if another formatting item was inserted\n      let foundFormattingItem = false\n      for (const [client, afterClock] of transaction.afterState.entries()) {\n        const clock = transaction.beforeState.get(client) || 0\n        if (afterClock === clock) {\n          continue\n        }\n        iterateStructs(transaction, /** @type {Array<Item|GC>} */ (doc.store.clients.get(client)), clock, afterClock, item => {\n          if (!item.deleted && /** @type {Item} */ (item).content.constructor === ContentFormat) {\n            foundFormattingItem = true\n          }\n        })\n        if (foundFormattingItem) {\n          break\n        }\n      }\n      if (!foundFormattingItem) {\n        iterateDeletedStructs(transaction, transaction.deleteSet, item => {\n          if (item instanceof GC || foundFormattingItem) {\n            return\n          }\n          if (item.parent === this && item.content.constructor === ContentFormat) {\n            foundFormattingItem = true\n          }\n        })\n      }\n      transact(doc, (t) => {\n        if (foundFormattingItem) {\n          // If a formatting item was inserted, we simply clean the whole type.\n          // We need to compute currentAttributes for the current position anyway.\n          cleanupYTextFormatting(this)\n        } else {\n          // If no formatting attribute was inserted, we can make due with contextless\n          // formatting cleanups.\n          // Contextless: it is not necessary to compute currentAttributes for the affected position.\n          iterateDeletedStructs(t, t.deleteSet, item => {\n            if (item instanceof GC) {\n              return\n            }\n            if (item.parent === this) {\n              cleanupContextlessFormattingGap(t, item)\n            }\n          })\n        }\n      })\n    }\n    callTypeObservers(this, transaction, event)\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */\n  toString () {\n    let str = ''\n    /**\n     * @type {Item|null}\n     */\n    let n = this._start\n    while (n !== null) {\n      if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n        str += /** @type {ContentString} */ (n.content).str\n      }\n      n = n.right\n    }\n    return str\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {any} delta The changes to apply on this element.\n   * @param {object}  [opts]\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */\n  applyDelta (delta, { sanitize = true } = {}) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const currPos = new ItemTextListPosition(null, this._start, 0, new Map())\n        for (let i = 0; i < delta.length; i++) {\n          const op = delta[i]\n          if (op.insert !== undefined) {\n            // Quill assumes that the content starts with an empty paragraph.\n            // Yjs/Y.Text assumes that it starts empty. We always hide that\n            // there is a newline at the end of the content.\n            // If we omit this step, clients will see a different number of\n            // paragraphs, but nothing bad will happen.\n            const ins = (!sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n') ? op.insert.slice(0, -1) : op.insert\n            if (typeof ins !== 'string' || ins.length > 0) {\n              insertText(transaction, this, currPos, ins, op.attributes || {})\n            }\n          } else if (op.retain !== undefined) {\n            formatText(transaction, this, currPos, op.retain, op.attributes || {})\n          } else if (op.delete !== undefined) {\n            deleteText(transaction, currPos, op.delete)\n          }\n        }\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.applyDelta(delta))\n    }\n  }\n\n  /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */\n  toDelta (snapshot, prevSnapshot, computeYChange) {\n    /**\n     * @type{Array<any>}\n     */\n    const ops = []\n    const currentAttributes = new Map()\n    const doc = /** @type {Doc} */ (this.doc)\n    let str = ''\n    let n = this._start\n    function packStr () {\n      if (str.length > 0) {\n        // pack str with attributes to ops\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {}\n        let addAttributes = false\n        currentAttributes.forEach((value, key) => {\n          addAttributes = true\n          attributes[key] = value\n        })\n        /**\n         * @type {Object<string,any>}\n         */\n        const op = { insert: str }\n        if (addAttributes) {\n          op.attributes = attributes\n        }\n        ops.push(op)\n        str = ''\n      }\n    }\n    // snapshots are merged again after the transaction, so we need to keep the\n    // transalive until we are done\n    transact(doc, transaction => {\n      if (snapshot) {\n        splitSnapshotAffectedStructs(transaction, snapshot)\n      }\n      if (prevSnapshot) {\n        splitSnapshotAffectedStructs(transaction, prevSnapshot)\n      }\n      while (n !== null) {\n        if (isVisible(n, snapshot) || (prevSnapshot !== undefined && isVisible(n, prevSnapshot))) {\n          switch (n.content.constructor) {\n            case ContentString: {\n              const cur = currentAttributes.get('ychange')\n              if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.state !== 'removed') {\n                  packStr()\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : { type: 'removed' })\n                }\n              } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.state !== 'added') {\n                  packStr()\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : { type: 'added' })\n                }\n              } else if (cur !== undefined) {\n                packStr()\n                currentAttributes.delete('ychange')\n              }\n              str += /** @type {ContentString} */ (n.content).str\n              break\n            }\n            case ContentEmbed: {\n              packStr()\n              /**\n               * @type {Object<string,any>}\n               */\n              const op = {\n                insert: /** @type {ContentEmbed} */ (n.content).embed\n              }\n              if (currentAttributes.size > 0) {\n                const attrs = /** @type {Object<string,any>} */ ({})\n                op.attributes = attrs\n                currentAttributes.forEach((value, key) => {\n                  attrs[key] = value\n                })\n              }\n              ops.push(op)\n              break\n            }\n            case ContentFormat:\n              if (isVisible(n, snapshot)) {\n                packStr()\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (n.content))\n              }\n              break\n          }\n        }\n        n = n.right\n      }\n      packStr()\n    }, splitSnapshotAffectedStructs)\n    return ops\n  }\n\n  /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */\n  insert (index, text, attributes) {\n    if (text.length <= 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index)\n        if (!attributes) {\n          attributes = {}\n          // @ts-ignore\n          pos.currentAttributes.forEach((v, k) => { attributes[k] = v })\n        }\n        insertText(transaction, this, pos, text, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insert(index, text, attributes))\n    }\n  }\n\n  /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object} embed The Object that represents the embed.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */\n  insertEmbed (index, embed, attributes = {}) {\n    if (embed.constructor !== Object) {\n      throw new Error('Embed must be an Object')\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index)\n        insertText(transaction, this, pos, embed, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insertEmbed(index, embed, attributes))\n    }\n  }\n\n  /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */\n  delete (index, length) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        deleteText(transaction, findPosition(transaction, this, index), length)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.delete(index, length))\n    }\n  }\n\n  /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */\n  format (index, length, attributes) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index)\n        if (pos.right === null) {\n          return\n        }\n        formatText(transaction, this, pos, length, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.format(index, length, attributes))\n    }\n  }\n\n  /**\n   * Removes an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.removeAttribute(attributeName))\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {any} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.setAttribute(attributeName, attributeValue))\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {any} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YTextRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YText}\n *\n * @private\n * @function\n */\nexport const readYText = decoder => new YText()\n","/**\n * @module YXml\n */\n\nimport {\n  YXmlEvent,\n  YXmlElement,\n  AbstractType,\n  typeListMap,\n  typeListForEach,\n  typeListInsertGenerics,\n  typeListInsertGenericsAfter,\n  typeListDelete,\n  typeListToArray,\n  YXmlFragmentRefID,\n  callTypeObservers,\n  transact,\n  typeListGet,\n  typeListSlice,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, ContentType, Transaction, Item, YXmlText, YXmlHook, Snapshot // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\nexport class YXmlTreeWalker {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  constructor (root, f = () => true) {\n    this._filter = f\n    this._root = root\n    /**\n     * @type {Item}\n     */\n    this._currentNode = /** @type {Item} */ (root._start)\n    this._firstCall = true\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n\n  /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */\n  next () {\n    /**\n     * @type {Item|null}\n     */\n    let n = this._currentNode\n    let type = /** @type {any} */ (n.content).type\n    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) { // if first call, we check if we can use the first item\n      do {\n        type = /** @type {any} */ (n.content).type\n        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n          // walk down in the tree\n          n = type._start\n        } else {\n          // walk right or up in the tree\n          while (n !== null) {\n            if (n.right !== null) {\n              n = n.right\n              break\n            } else if (n.parent === this._root) {\n              n = null\n            } else {\n              n = /** @type {AbstractType<any>} */ (n.parent)._item\n            }\n          }\n        }\n      } while (n !== null && (n.deleted || !this._filter(/** @type {ContentType} */ (n.content).type)))\n    }\n    this._firstCall = false\n    if (n === null) {\n      // @ts-ignore\n      return { value: undefined, done: true }\n    }\n    this._currentNode = n\n    return { value: /** @type {any} */ (n.content).type, done: false }\n  }\n}\n\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\nexport class YXmlFragment extends AbstractType {\n  constructor () {\n    super()\n    /**\n     * @type {Array<any>|null}\n     */\n    this._prelimContent = []\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get firstChild () {\n    const first = this._first\n    return first ? first.content.getContent()[0] : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YXmlFragment()\n  }\n\n  /**\n   * @return {YXmlFragment}\n   */\n  clone () {\n    const el = new YXmlFragment()\n    // @ts-ignore\n    el.insert(0, el.toArray().map(item => item instanceof AbstractType ? item.clone() : item))\n    return el\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */\n  createTreeWalker (filter) {\n    return new YXmlTreeWalker(this, filter)\n  }\n\n  /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */\n  querySelector (query) {\n    query = query.toUpperCase()\n    // @ts-ignore\n    const iterator = new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query)\n    const next = iterator.next()\n    if (next.done) {\n      return null\n    } else {\n      return next.value\n    }\n  }\n\n  /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */\n  querySelectorAll (query) {\n    query = query.toUpperCase()\n    // @ts-ignore\n    return Array.from(new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query))\n  }\n\n  /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction))\n  }\n\n  /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */\n  toString () {\n    return typeListMap(this, xml => xml.toString()).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const fragment = _document.createDocumentFragment()\n    if (binding !== undefined) {\n      binding._createAssociation(fragment, this)\n    }\n    typeListForEach(this, xmlType => {\n      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null)\n    })\n    return fragment\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content)\n      })\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insertAfter (ref, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const refItem = (ref && ref instanceof AbstractType) ? ref._item : ref\n        typeListInsertGenericsAfter(transaction, this, refItem, content)\n      })\n    } else {\n      const pc = /** @type {Array<any>} */ (this._prelimContent)\n      const index = ref === null ? 0 : pc.findIndex(el => el === ref) + 1\n      if (index === 0 && ref !== null) {\n        throw error.create('Reference item not found')\n      }\n      pc.splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length)\n      })\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, length)\n    }\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content)\n  }\n\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to preppend.\n   */\n  unshift (content) {\n    this.insert(0, content)\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {YXmlElement|YXmlText}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<YXmlElement|YXmlText>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlFragmentRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */\nexport const readYXmlFragment = decoder => new YXmlFragment()\n","\nimport {\n  YXmlFragment,\n  transact,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapGetAll,\n  typeListForEach,\n  YXmlElementRefID,\n  YXmlText, ContentType, AbstractType, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Snapshot, Doc, Item // eslint-disable-line\n} from '../internals.js'\n\n/**\n * An YXmlElement imitates the behavior of a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n */\nexport class YXmlElement extends YXmlFragment {\n  constructor (nodeName = 'UNDEFINED') {\n    super()\n    this.nodeName = nodeName\n    /**\n     * @type {Map<string, any>|null}\n     */\n    this._prelimAttrs = new Map()\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;(/** @type {Map<string, any>} */ (this._prelimAttrs)).forEach((value, key) => {\n      this.setAttribute(key, value)\n    })\n    this._prelimAttrs = null\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */\n  _copy () {\n    return new YXmlElement(this.nodeName)\n  }\n\n  /**\n   * @return {YXmlElement}\n   */\n  clone () {\n    const el = new YXmlElement(this.nodeName)\n    const attrs = this.getAttributes()\n    for (const key in attrs) {\n      el.setAttribute(key, attrs[key])\n    }\n    // @ts-ignore\n    el.insert(0, el.toArray().map(item => item instanceof AbstractType ? item.clone() : item))\n    return el\n  }\n\n  /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */\n  toString () {\n    const attrs = this.getAttributes()\n    const stringBuilder = []\n    const keys = []\n    for (const key in attrs) {\n      keys.push(key)\n    }\n    keys.sort()\n    const keysLen = keys.length\n    for (let i = 0; i < keysLen; i++) {\n      const key = keys[i]\n      stringBuilder.push(key + '=\"' + attrs[key] + '\"')\n    }\n    const nodeName = this.nodeName.toLocaleLowerCase()\n    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : ''\n    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`\n  }\n\n  /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName)\n      })\n    } else {\n      /** @type {Map<string,any>} */ (this._prelimAttrs).delete(attributeName)\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {String} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimAttrs).set(attributeName, attributeValue)\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {String} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const dom = _document.createElement(this.nodeName)\n    const attrs = this.getAttributes()\n    for (const key in attrs) {\n      dom.setAttribute(key, attrs[key])\n    }\n    typeListForEach(this, yxml => {\n      dom.appendChild(yxml.toDOM(_document, hooks, binding))\n    })\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlElementRefID)\n    encoder.writeKey(this.nodeName)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlElement}\n *\n * @function\n */\nexport const readYXmlElement = decoder => new YXmlElement(decoder.readKey())\n","\nimport {\n  YEvent,\n  YXmlText, YXmlElement, YXmlFragment, Transaction // eslint-disable-line\n} from '../internals.js'\n\n/**\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\nexport class YXmlEvent extends YEvent {\n  /**\n   * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with wich the\n   *                                  change was created.\n   */\n  constructor (target, subs, transaction) {\n    super(target, transaction)\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.attributesChanged = new Set()\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true\n      } else {\n        this.attributesChanged.add(sub)\n      }\n    })\n  }\n}\n","\nimport {\n  YMap,\n  YXmlHookRefID,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2 // eslint-disable-line\n} from '../internals.js'\n\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\nexport class YXmlHook extends YMap {\n  /**\n   * @param {string} hookName nodeName of the Dom Node.\n   */\n  constructor (hookName) {\n    super()\n    /**\n     * @type {string}\n     */\n    this.hookName = hookName\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */\n  _copy () {\n    return new YXmlHook(this.hookName)\n  }\n\n  /**\n   * @return {YXmlHook}\n   */\n  clone () {\n    const el = new YXmlHook(this.hookName)\n    this.forEach((value, key) => {\n      el.set(key, value)\n    })\n    return el\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type\n   * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const hook = hooks[this.hookName]\n    let dom\n    if (hook !== undefined) {\n      dom = hook.createDom(this)\n    } else {\n      dom = document.createElement(this.hookName)\n    }\n    dom.setAttribute('data-yjs-hook', this.hookName)\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlHookRefID)\n    encoder.writeKey(this.hookName)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */\nexport const readYXmlHook = decoder =>\n  new YXmlHook(decoder.readKey())\n","\nimport {\n  YText,\n  YXmlTextRefID,\n  ContentType, YXmlElement, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, // eslint-disable-line\n} from '../internals.js'\n\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\nexport class YXmlText extends YText {\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  _copy () {\n    return new YXmlText()\n  }\n\n  /**\n   * @return {YXmlText}\n   */\n  clone () {\n    const text = new YXmlText()\n    text.applyDelta(this.toDelta())\n    return text\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlText.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks, binding) {\n    const dom = _document.createTextNode(this.toString())\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  toString () {\n    // @ts-ignore\n    return this.toDelta().map(delta => {\n      const nestedNodes = []\n      for (const nodeName in delta.attributes) {\n        const attrs = []\n        for (const key in delta.attributes[nodeName]) {\n          attrs.push({ key, value: delta.attributes[nodeName][key] })\n        }\n        // sort attributes to get a unique order\n        attrs.sort((a, b) => a.key < b.key ? -1 : 1)\n        nestedNodes.push({ nodeName, attrs })\n      }\n      // sort node order to get a unique order\n      nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1)\n      // now convert to dom string\n      let str = ''\n      for (let i = 0; i < nestedNodes.length; i++) {\n        const node = nestedNodes[i]\n        str += `<${node.nodeName}`\n        for (let j = 0; j < node.attrs.length; j++) {\n          const attr = node.attrs[j]\n          str += ` ${attr.key}=\"${attr.value}\"`\n        }\n        str += '>'\n      }\n      str += delta.insert\n      for (let i = nestedNodes.length - 1; i >= 0; i--) {\n        str += `</${nestedNodes[i].nodeName}>`\n      }\n      return str\n    }).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlTextRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */\nexport const readYXmlText = decoder => new YXmlText()\n","\nimport {\n  UpdateEncoderV1, UpdateEncoderV2, ID, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\nexport class AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor (id, length) {\n    this.id = id\n    this.length = length\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get deleted () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} wether this merged with right\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */\n  write (encoder, offset, encodingRef) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    throw error.methodUnimplemented()\n  }\n}\n","\nimport {\n  AbstractStruct,\n  addStruct,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\n\nexport const structGCRefNumber = 0\n\n/**\n * @private\n */\nexport class GC extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {GC} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset\n      this.length -= offset\n    }\n    addStruct(transaction.doc.store, this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structGCRefNumber)\n    encoder.writeLen(this.length - offset)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\nexport class ContentBinary {\n  /**\n   * @param {Uint8Array} content\n   */\n  constructor (content) {\n    this.content = content\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.content]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentBinary}\n   */\n  copy () {\n    return new ContentBinary(this.content)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeBuf(this.content)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 3\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentBinary}\n */\nexport const readContentBinary = decoder => new ContentBinary(decoder.readBuf())\n","\nimport {\n  addToDeleteSet,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nexport class ContentDeleted {\n  /**\n   * @param {number} len\n   */\n  constructor (len) {\n    this.len = len\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.len\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentDeleted}\n   */\n  copy () {\n    return new ContentDeleted(this.len)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */\n  splice (offset) {\n    const right = new ContentDeleted(this.len - offset)\n    this.len = offset\n    return right\n  }\n\n  /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.len += right.len\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len)\n    item.markDeleted()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeLen(this.len - offset)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 1\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentDeleted}\n */\nexport const readContentDeleted = decoder => new ContentDeleted(decoder.readLen())\n","\nimport {\n  Doc, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * @private\n */\nexport class ContentDoc {\n  /**\n   * @param {Doc} doc\n   */\n  constructor (doc) {\n    if (doc._item) {\n      console.error('This document was already integrated as a sub-document. You should create a second instance instead with the same guid.')\n    }\n    /**\n     * @type {Doc}\n     */\n    this.doc = doc\n    /**\n     * @type {any}\n     */\n    const opts = {}\n    this.opts = opts\n    if (!doc.gc) {\n      opts.gc = false\n    }\n    if (doc.autoLoad) {\n      opts.autoLoad = true\n    }\n    if (doc.meta !== null) {\n      opts.meta = doc.meta\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.doc]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentDoc}\n   */\n  copy () {\n    return new ContentDoc(this.doc)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDoc}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentDoc} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // this needs to be reflected in doc.destroy as well\n    this.doc._item = item\n    transaction.subdocsAdded.add(this.doc)\n    if (this.doc.shouldLoad) {\n      transaction.subdocsLoaded.add(this.doc)\n    }\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (transaction.subdocsAdded.has(this.doc)) {\n      transaction.subdocsAdded.delete(this.doc)\n    } else {\n      transaction.subdocsRemoved.add(this.doc)\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) { }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(this.doc.guid)\n    encoder.writeAny(this.opts)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 9\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentDoc}\n */\nexport const readContentDoc = decoder => new ContentDoc(new Doc({ guid: decoder.readString(), ...decoder.readAny() }))\n","\nimport {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * @private\n */\nexport class ContentEmbed {\n  /**\n   * @param {Object} embed\n   */\n  constructor (embed) {\n    this.embed = embed\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.embed]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentEmbed}\n   */\n  copy () {\n    return new ContentEmbed(this.embed)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeJSON(this.embed)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 5\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentEmbed}\n */\nexport const readContentEmbed = decoder => new ContentEmbed(decoder.readJSON())\n","\nimport {\n  AbstractType, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Item, StructStore, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * @private\n */\nexport class ContentFormat {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  constructor (key, value) {\n    this.key = key\n    this.value = value\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentFormat}\n   */\n  copy () {\n    return new ContentFormat(this.key, this.value)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentFormat}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentFormat} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // @todo searchmarker are currently unsupported for rich text documents\n    /** @type {AbstractType<any>} */ (item.parent)._searchMarker = null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeKey(this.key)\n    encoder.writeJSON(this.value)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 6\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentFormat}\n */\nexport const readContentFormat = decoder => new ContentFormat(decoder.readString(), decoder.readJSON())\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @private\n */\nexport class ContentJSON {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentJSON}\n   */\n  copy () {\n    return new ContentJSON(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentJSON}\n   */\n  splice (offset) {\n    const right = new ContentJSON(this.arr.slice(offset))\n    this.arr = this.arr.slice(0, offset)\n    return right\n  }\n\n  /**\n   * @param {ContentJSON} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr)\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length\n    encoder.writeLen(len - offset)\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i]\n      encoder.writeString(c === undefined ? 'undefined' : JSON.stringify(c))\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 2\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentJSON}\n */\nexport const readContentJSON = decoder => {\n  const len = decoder.readLen()\n  const cs = []\n  for (let i = 0; i < len; i++) {\n    const c = decoder.readString()\n    if (c === 'undefined') {\n      cs.push(undefined)\n    } else {\n      cs.push(JSON.parse(c))\n    }\n  }\n  return new ContentJSON(cs)\n}\n","import {\n  UpdateEncoderV1, UpdateEncoderV2, UpdateDecoderV1, UpdateDecoderV2, Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\nexport class ContentAny {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentAny}\n   */\n  copy () {\n    return new ContentAny(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */\n  splice (offset) {\n    const right = new ContentAny(this.arr.slice(offset))\n    this.arr = this.arr.slice(0, offset)\n    return right\n  }\n\n  /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr)\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length\n    encoder.writeLen(len - offset)\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i]\n      encoder.writeAny(c)\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 8\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentAny}\n */\nexport const readContentAny = decoder => {\n  const len = decoder.readLen()\n  const cs = []\n  for (let i = 0; i < len; i++) {\n    cs.push(decoder.readAny())\n  }\n  return new ContentAny(cs)\n}\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @private\n */\nexport class ContentString {\n  /**\n   * @param {string} str\n   */\n  constructor (str) {\n    /**\n     * @type {string}\n     */\n    this.str = str\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.str.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.str.split('')\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentString}\n   */\n  copy () {\n    return new ContentString(this.str)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentString}\n   */\n  splice (offset) {\n    const right = new ContentString(this.str.slice(offset))\n    this.str = this.str.slice(0, offset)\n\n    // Prevent encoding invalid documents because of splitting of surrogate pairs: https://github.com/yjs/yjs/issues/248\n    const firstCharCode = this.str.charCodeAt(offset - 1)\n    if (firstCharCode >= 0xD800 && firstCharCode <= 0xDBFF) {\n      // Last character of the left split is the start of a surrogate utf16/ucs2 pair.\n      // We don't support splitting of surrogate pairs because this may lead to invalid documents.\n      // Replace the invalid character with a unicode replacement character (� / U+FFFD)\n      this.str = this.str.slice(0, offset - 1) + '�'\n      // replace right as well\n      right.str = '�' + right.str.slice(1)\n    }\n    return right\n  }\n\n  /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.str += right.str\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(offset === 0 ? this.str : this.str.slice(offset))\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 4\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentString}\n */\nexport const readContentString = decoder => new ContentString(decoder.readString())\n","\nimport {\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, Item, YEvent, AbstractType // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractType<any>>}\n * @private\n */\nexport const typeRefs = [\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText\n]\n\nexport const YArrayRefID = 0\nexport const YMapRefID = 1\nexport const YTextRefID = 2\nexport const YXmlElementRefID = 3\nexport const YXmlFragmentRefID = 4\nexport const YXmlHookRefID = 5\nexport const YXmlTextRefID = 6\n\n/**\n * @private\n */\nexport class ContentType {\n  /**\n   * @param {AbstractType<YEvent>} type\n   */\n  constructor (type) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.type]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentType}\n   */\n  copy () {\n    return new ContentType(this.type._copy())\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentType}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    this.type._integrate(transaction.doc, item)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    let item = this.type._start\n    while (item !== null) {\n      if (!item.deleted) {\n        item.delete(transaction)\n      } else {\n        // Whis will be gc'd later and we want to merge it if possible\n        // We try to merge all deleted items after each transaction,\n        // but we have no knowledge about that this needs to be merged\n        // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n        transaction._mergeStructs.push(item)\n      }\n      item = item.right\n    }\n    this.type._map.forEach(item => {\n      if (!item.deleted) {\n        item.delete(transaction)\n      } else {\n        // same as above\n        transaction._mergeStructs.push(item)\n      }\n    })\n    transaction.changed.delete(this.type)\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    let item = this.type._start\n    while (item !== null) {\n      item.gc(store, true)\n      item = item.right\n    }\n    this.type._start = null\n    this.type._map.forEach(/** @param {Item | null} item */ (item) => {\n      while (item !== null) {\n        item.gc(store, true)\n        item = item.left\n      }\n    })\n    this.type._map = new Map()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    this.type._write(encoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 7\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentType}\n */\nexport const readContentType = decoder => new ContentType(typeRefs[decoder.readTypeRef()](decoder))\n","\nimport {\n  GC,\n  getState,\n  AbstractStruct,\n  replaceStruct,\n  addStruct,\n  addToDeleteSet,\n  findRootTypeKey,\n  compareIDs,\n  getItem,\n  getItemCleanEnd,\n  getItemCleanStart,\n  readContentDeleted,\n  readContentBinary,\n  readContentJSON,\n  readContentAny,\n  readContentString,\n  readContentEmbed,\n  readContentDoc,\n  createID,\n  readContentFormat,\n  readContentType,\n  addChangedTypeToTransaction,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, ContentType, ContentDeleted, StructStore, ID, AbstractType, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\nimport * as binary from 'lib0/binary.js'\n\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */\nexport const followRedone = (store, id) => {\n  /**\n   * @type {ID|null}\n   */\n  let nextID = id\n  let diff = 0\n  let item\n  do {\n    if (diff > 0) {\n      nextID = createID(nextID.client, nextID.clock + diff)\n    }\n    item = getItem(store, nextID)\n    diff = nextID.clock - item.id.clock\n    nextID = item.redone\n  } while (nextID !== null && item instanceof Item)\n  return {\n    item, diff\n  }\n}\n\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */\nexport const keepItem = (item, keep) => {\n  while (item !== null && item.keep !== keep) {\n    item.keep = keep\n    item = /** @type {AbstractType<any>} */ (item.parent)._item\n  }\n}\n\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\nexport const splitItem = (transaction, leftItem, diff) => {\n  // create rightItem\n  const { client, clock } = leftItem.id\n  const rightItem = new Item(\n    createID(client, clock + diff),\n    leftItem,\n    createID(client, clock + diff - 1),\n    leftItem.right,\n    leftItem.rightOrigin,\n    leftItem.parent,\n    leftItem.parentSub,\n    leftItem.content.splice(diff)\n  )\n  if (leftItem.deleted) {\n    rightItem.markDeleted()\n  }\n  if (leftItem.keep) {\n    rightItem.keep = true\n  }\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff)\n  }\n  // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n  leftItem.right = rightItem\n  // update right\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem\n  }\n  // right is more specific.\n  transaction._mergeStructs.push(rightItem)\n  // update parent._map\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */ (rightItem.parent)._map.set(rightItem.parentSub, rightItem)\n  }\n  leftItem.length = diff\n  return rightItem\n}\n\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n *\n * @return {Item|null}\n *\n * @private\n */\nexport const redoItem = (transaction, item, redoitems) => {\n  const doc = transaction.doc\n  const store = doc.store\n  const ownClientID = doc.clientID\n  const redone = item.redone\n  if (redone !== null) {\n    return getItemCleanStart(transaction, redone)\n  }\n  let parentItem = /** @type {AbstractType<any>} */ (item.parent)._item\n  /**\n   * @type {Item|null}\n   */\n  let left\n  /**\n   * @type {Item|null}\n   */\n  let right\n  if (item.parentSub === null) {\n    // Is an array item. Insert at the old position\n    left = item.left\n    right = item\n  } else {\n    // Is a map item. Insert as current value\n    left = item\n    while (left.right !== null) {\n      left = left.right\n      if (left.id.client !== ownClientID) {\n        // It is not possible to redo this item because it conflicts with a\n        // change from another client\n        return null\n      }\n    }\n    if (left.right !== null) {\n      left = /** @type {Item} */ (/** @type {AbstractType<any>} */ (item.parent)._map.get(item.parentSub))\n    }\n    right = null\n  }\n  // make sure that parent is redone\n  if (parentItem !== null && parentItem.deleted === true && parentItem.redone === null) {\n    // try to undo parent if it will be undone anyway\n    if (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems) === null) {\n      return null\n    }\n  }\n  if (parentItem !== null && parentItem.redone !== null) {\n    while (parentItem.redone !== null) {\n      parentItem = getItemCleanStart(transaction, parentItem.redone)\n    }\n    // find next cloned_redo items\n    while (left !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let leftTrace = left\n      // trace redone until parent matches\n      while (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item !== parentItem) {\n        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone)\n      }\n      if (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item === parentItem) {\n        left = leftTrace\n        break\n      }\n      left = left.left\n    }\n    while (right !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let rightTrace = right\n      // trace redone until parent matches\n      while (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item !== parentItem) {\n        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone)\n      }\n      if (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item === parentItem) {\n        right = rightTrace\n        break\n      }\n      right = right.right\n    }\n  }\n  const nextClock = getState(store, ownClientID)\n  const nextId = createID(ownClientID, nextClock)\n  const redoneItem = new Item(\n    nextId,\n    left, left && left.lastId,\n    right, right && right.id,\n    parentItem === null ? item.parent : /** @type {ContentType} */ (parentItem.content).type,\n    item.parentSub,\n    item.content.copy()\n  )\n  item.redone = nextId\n  keepItem(redoneItem, true)\n  redoneItem.integrate(transaction, 0)\n  return redoneItem\n}\n\n/**\n * Abstract class that represents any content.\n */\nexport class Item extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  constructor (id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    super(id, content.getLength())\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n    this.origin = origin\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n    this.left = left\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n    this.right = right\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n    this.rightOrigin = rightOrigin\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n    this.parent = parent\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n    this.parentSub = parentSub\n    /**\n     * If this type's effect is reundone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n    this.redone = null\n    /**\n     * @type {AbstractContent}\n     */\n    this.content = content\n    /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */\n    this.info = this.content.isCountable() ? binary.BIT2 : 0\n  }\n\n  /**\n   * This is used to mark the item as an indexed fast-search marker\n   *\n   * @type {boolean}\n   */\n  set marker (isMarked) {\n    if (((this.info & binary.BIT4) > 0) !== isMarked) {\n      this.info ^= binary.BIT4\n    }\n  }\n\n  get marker () {\n    return (this.info & binary.BIT4) > 0\n  }\n\n  /**\n   * If true, do not garbage collect this Item.\n   */\n  get keep () {\n    return (this.info & binary.BIT1) > 0\n  }\n\n  set keep (doKeep) {\n    if (this.keep !== doKeep) {\n      this.info ^= binary.BIT1\n    }\n  }\n\n  get countable () {\n    return (this.info & binary.BIT2) > 0\n  }\n\n  /**\n   * Whether this item was deleted or not.\n   * @type {Boolean}\n   */\n  get deleted () {\n    return (this.info & binary.BIT3) > 0\n  }\n\n  set deleted (doDelete) {\n    if (this.deleted !== doDelete) {\n      this.info ^= binary.BIT3\n    }\n  }\n\n  markDeleted () {\n    this.info |= binary.BIT3\n  }\n\n  /**\n   * Return the creator clientID of the missing op or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {\n      return this.origin.client\n    }\n    if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {\n      return this.rightOrigin.client\n    }\n    if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {\n      return this.parent.client\n    }\n\n    // We have all missing ids, now find the items\n\n    if (this.origin) {\n      this.left = getItemCleanEnd(transaction, store, this.origin)\n      this.origin = this.left.lastId\n    }\n    if (this.rightOrigin) {\n      this.right = getItemCleanStart(transaction, this.rightOrigin)\n      this.rightOrigin = this.right.id\n    }\n    if ((this.left && this.left.constructor === GC) || (this.right && this.right.constructor === GC)) {\n      this.parent = null\n    }\n    // only set parent if this shouldn't be garbage collected\n    if (!this.parent) {\n      if (this.left && this.left.constructor === Item) {\n        this.parent = this.left.parent\n        this.parentSub = this.left.parentSub\n      }\n      if (this.right && this.right.constructor === Item) {\n        this.parent = this.right.parent\n        this.parentSub = this.right.parentSub\n      }\n    } else if (this.parent.constructor === ID) {\n      const parentItem = getItem(store, this.parent)\n      if (parentItem.constructor === GC) {\n        this.parent = null\n      } else {\n        this.parent = /** @type {ContentType} */ (parentItem.content).type\n      }\n    }\n    return null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset\n      this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1))\n      this.origin = this.left.lastId\n      this.content = this.content.splice(offset)\n      this.length -= offset\n    }\n\n    if (this.parent) {\n      if ((!this.left && (!this.right || this.right.left !== null)) || (this.left && this.left.right !== this.right)) {\n        /**\n         * @type {Item|null}\n         */\n        let left = this.left\n\n        /**\n         * @type {Item|null}\n         */\n        let o\n        // set o to the first conflicting item\n        if (left !== null) {\n          o = left.right\n        } else if (this.parentSub !== null) {\n          o = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null\n          while (o !== null && o.left !== null) {\n            o = o.left\n          }\n        } else {\n          o = /** @type {AbstractType<any>} */ (this.parent)._start\n        }\n        // TODO: use something like DeleteSet here (a tree implementation would be best)\n        // @todo use global set definitions\n        /**\n         * @type {Set<Item>}\n         */\n        const conflictingItems = new Set()\n        /**\n         * @type {Set<Item>}\n         */\n        const itemsBeforeOrigin = new Set()\n        // Let c in conflictingItems, b in itemsBeforeOrigin\n        // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n        // Note that conflictingItems is a subset of itemsBeforeOrigin\n        while (o !== null && o !== this.right) {\n          itemsBeforeOrigin.add(o)\n          conflictingItems.add(o)\n          if (compareIDs(this.origin, o.origin)) {\n            // case 1\n            if (o.id.client < this.id.client) {\n              left = o\n              conflictingItems.clear()\n            } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {\n              // this and o are conflicting and point to the same integration points. The id decides which item comes first.\n              // Since this is to the left of o, we can break here\n              break\n            } // else, o might be integrated before an item that this conflicts with. If so, we will find it in the next iterations\n          } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) { // use getItem instead of getItemCleanEnd because we don't want / need to split items.\n            // case 2\n            if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {\n              left = o\n              conflictingItems.clear()\n            }\n          } else {\n            break\n          }\n          o = o.right\n        }\n        this.left = left\n      }\n      // reconnect left/right + update parent map/start if necessary\n      if (this.left !== null) {\n        const right = this.left.right\n        this.right = right\n        this.left.right = this\n      } else {\n        let r\n        if (this.parentSub !== null) {\n          r = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null\n          while (r !== null && r.left !== null) {\n            r = r.left\n          }\n        } else {\n          r = /** @type {AbstractType<any>} */ (this.parent)._start\n          ;/** @type {AbstractType<any>} */ (this.parent)._start = this\n        }\n        this.right = r\n      }\n      if (this.right !== null) {\n        this.right.left = this\n      } else if (this.parentSub !== null) {\n        // set as current parent value if right === null and this is parentSub\n        /** @type {AbstractType<any>} */ (this.parent)._map.set(this.parentSub, this)\n        if (this.left !== null) {\n          // this is the current attribute value of parent. delete right\n          this.left.delete(transaction)\n        }\n      }\n      // adjust length of parent\n      if (this.parentSub === null && this.countable && !this.deleted) {\n        /** @type {AbstractType<any>} */ (this.parent)._length += this.length\n      }\n      addStruct(transaction.doc.store, this)\n      this.content.integrate(transaction, this)\n      // add parent to transaction.changed\n      addChangedTypeToTransaction(transaction, /** @type {AbstractType<any>} */ (this.parent), this.parentSub)\n      if ((/** @type {AbstractType<any>} */ (this.parent)._item !== null && /** @type {AbstractType<any>} */ (this.parent)._item.deleted) || (this.parentSub !== null && this.right !== null)) {\n        // delete if parent is deleted or if this is not the current attribute value of parent\n        this.delete(transaction)\n      }\n    } else {\n      // parent is not defined. Integrate GC struct instead\n      new GC(this.id, this.length).integrate(transaction, 0)\n    }\n  }\n\n  /**\n   * Returns the next non-deleted item\n   */\n  get next () {\n    let n = this.right\n    while (n !== null && n.deleted) {\n      n = n.right\n    }\n    return n\n  }\n\n  /**\n   * Returns the previous non-deleted item\n   */\n  get prev () {\n    let n = this.left\n    while (n !== null && n.deleted) {\n      n = n.left\n    }\n    return n\n  }\n\n  /**\n   * Computes the last content address of this Item.\n   */\n  get lastId () {\n    // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1)\n  }\n\n  /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (\n      this.constructor === right.constructor &&\n      compareIDs(right.origin, this.lastId) &&\n      this.right === right &&\n      compareIDs(this.rightOrigin, right.rightOrigin) &&\n      this.id.client === right.id.client &&\n      this.id.clock + this.length === right.id.clock &&\n      this.deleted === right.deleted &&\n      this.redone === null &&\n      right.redone === null &&\n      this.content.constructor === right.content.constructor &&\n      this.content.mergeWith(right.content)\n    ) {\n      if (right.keep) {\n        this.keep = true\n      }\n      this.right = right.right\n      if (this.right !== null) {\n        this.right.left = this\n      }\n      this.length += right.length\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (!this.deleted) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent)\n      // adjust the length of parent\n      if (this.countable && this.parentSub === null) {\n        parent._length -= this.length\n      }\n      this.markDeleted()\n      addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length)\n      addChangedTypeToTransaction(transaction, parent, this.parentSub)\n      this.content.delete(transaction)\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */\n  gc (store, parentGCd) {\n    if (!this.deleted) {\n      throw error.unexpectedCase()\n    }\n    this.content.gc(store)\n    if (parentGCd) {\n      replaceStruct(store, this, new GC(this.id, this.length))\n    } else {\n      this.content = new ContentDeleted(this.length)\n    }\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin\n    const rightOrigin = this.rightOrigin\n    const parentSub = this.parentSub\n    const info = (this.content.getRef() & binary.BITS5) |\n      (origin === null ? 0 : binary.BIT8) | // origin is defined\n      (rightOrigin === null ? 0 : binary.BIT7) | // right origin is defined\n      (parentSub === null ? 0 : binary.BIT6) // parentSub is non-null\n    encoder.writeInfo(info)\n    if (origin !== null) {\n      encoder.writeLeftID(origin)\n    }\n    if (rightOrigin !== null) {\n      encoder.writeRightID(rightOrigin)\n    }\n    if (origin === null && rightOrigin === null) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent)\n      if (parent._item !== undefined) {\n        const parentItem = parent._item\n        if (parentItem === null) {\n          // parent type on y._map\n          // find the correct key\n          const ykey = findRootTypeKey(parent)\n          encoder.writeParentInfo(true) // write parentYKey\n          encoder.writeString(ykey)\n        } else {\n          encoder.writeParentInfo(false) // write parent id\n          encoder.writeLeftID(parentItem.id)\n        }\n      } else if (parent.constructor === String) { // this edge case was added by differential updates\n        encoder.writeParentInfo(true) // write parentYKey\n        encoder.writeString(parent)\n      } else if (parent.constructor === ID) {\n        encoder.writeParentInfo(false) // write parent id\n        encoder.writeLeftID(parent)\n      } else {\n        error.unexpectedCase()\n      }\n      if (parentSub !== null) {\n        encoder.writeString(parentSub)\n      }\n    }\n    this.content.write(encoder, offset)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @param {number} info\n */\nexport const readItemContent = (decoder, info) => contentRefs[info & binary.BITS5](decoder)\n\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractContent>}\n */\nexport const contentRefs = [\n  () => { error.unexpectedCase() }, // GC is not ItemContent\n  readContentDeleted, // 1\n  readContentJSON, // 2\n  readContentBinary, // 3\n  readContentString, // 4\n  readContentEmbed, // 5\n  readContentFormat, // 6\n  readContentType, // 7\n  readContentAny, // 8\n  readContentDoc, // 9\n  () => { error.unexpectedCase() } // 10 - Skip is not ItemContent\n]\n\n/**\n * Do not implement this class!\n */\nexport class AbstractContent {\n  /**\n   * @return {number}\n   */\n  getLength () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Should return false if this Item is some kind of meta information\n   * (e.g. format information).\n   *\n   * * Whether this Item should be addressable via `yarray.get(i)`\n   * * Whether this Item should be counted when computing yarray.length\n   *\n   * @return {boolean}\n   */\n  isCountable () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {AbstractContent}\n   */\n  copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {number} offset\n   * @return {AbstractContent}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {AbstractContent} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    throw error.methodUnimplemented()\n  }\n}\n","\nimport {\n  AbstractStruct,\n  UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\nimport * as error from 'lib0/error.js'\nimport * as encoding from 'lib0/encoding.js'\n\nexport const structSkipRefNumber = 10\n\n/**\n * @private\n */\nexport class Skip extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {Skip} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    // skip structs cannot be integrated\n    error.unexpectedCase()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structSkipRefNumber)\n    // write as VarUint because Skips can't make use of predictable length-encoding\n    encoding.writeVarUint(encoder.restEncoder, this.length - offset)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}