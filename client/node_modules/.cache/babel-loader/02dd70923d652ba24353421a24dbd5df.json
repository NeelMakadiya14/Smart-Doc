{"ast":null,"code":"/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {Array<L>} arr\n * @return {L}\n */\nexport var last = function last(arr) {\n  return arr[arr.length - 1];\n};\n/**\n * @template C\n * @return {Array<C>}\n */\n\nexport var create = function create() {\n  return (\n    /** @type {Array<C>} */\n    []\n  );\n};\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\n\nexport var copy = function copy(a) {\n  return (\n    /** @type {Array<D>} */\n    a.slice()\n  );\n};\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\n\nexport var appendTo = function appendTo(dest, src) {\n  for (var i = 0; i < src.length; i++) {\n    dest.push(src[i]);\n  }\n};\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\n\nexport var from = Array.from;\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n *\n * @param {Array<ITEM>} arr\n * @param {function(ITEM, number, Array<ITEM>):boolean} f\n * @return {boolean}\n */\n\nexport var every = function every(arr, f) {\n  return arr.every(f);\n};\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @param {Array<S>} arr\n * @param {function(S, number, Array<S>):boolean} f\n * @return {boolean}\n */\n\nexport var some = function some(arr, f) {\n  return arr.some(f);\n};\n/**\n * @template ELEM\n *\n * @param {Array<ELEM>} a\n * @param {Array<ELEM>} b\n * @return {boolean}\n */\n\nexport var equalFlat = function equalFlat(a, b) {\n  return a.length === b.length && every(a, function (item, index) {\n    return item === b[index];\n  });\n};\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\n\nexport var flatten = function flatten(arr) {\n  return arr.reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n};","map":{"version":3,"sources":["/media/neel/DATA/WebD/Smart Doc/client/node_modules/lib0/array.js"],"names":["last","arr","length","create","copy","a","slice","appendTo","dest","src","i","push","from","Array","every","f","some","equalFlat","b","item","index","flatten","reduce","acc","val","concat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAAAC,GAAG;AAAA,SAAIA,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAa,CAAd,CAAP;AAAA,CAAhB;AAEP;AACA;AACA;AACA;;AACA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA;AAAM;AAAyB;AAA/B;AAAA,CAAf;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,CAAC;AAAA;AAAI;AAAyBA,IAAAA,CAAC,CAACC,KAAF;AAA7B;AAAA,CAAd;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOC,GAAP,EAAe;AACrC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACP,MAAxB,EAAgCQ,CAAC,EAAjC,EAAqC;AACnCF,IAAAA,IAAI,CAACG,IAAL,CAAUF,GAAG,CAACC,CAAD,CAAb;AACD;AACF,CAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAME,IAAI,GAAGC,KAAK,CAACD,IAAnB;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAME,KAAK,GAAG,SAARA,KAAQ,CAACb,GAAD,EAAMc,CAAN;AAAA,SAAYd,GAAG,CAACa,KAAJ,CAAUC,CAAV,CAAZ;AAAA,CAAd;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACf,GAAD,EAAMc,CAAN;AAAA,SAAYd,GAAG,CAACe,IAAJ,CAASD,CAAT,CAAZ;AAAA,CAAb;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACZ,CAAD,EAAIa,CAAJ;AAAA,SAAUb,CAAC,CAACH,MAAF,KAAagB,CAAC,CAAChB,MAAf,IAAyBY,KAAK,CAACT,CAAD,EAAI,UAACc,IAAD,EAAOC,KAAP;AAAA,WAAiBD,IAAI,KAAKD,CAAC,CAACE,KAAD,CAA3B;AAAA,GAAJ,CAAxC;AAAA,CAAlB;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAApB,GAAG;AAAA,SAAIA,GAAG,CAACqB,MAAJ,CAAW,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcD,GAAG,CAACE,MAAJ,CAAWD,GAAX,CAAd;AAAA,GAAX,EAA0C,EAA1C,CAAJ;AAAA,CAAnB","sourcesContent":["/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {Array<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n *\n * @param {Array<ITEM>} arr\n * @param {function(ITEM, number, Array<ITEM>):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => arr.every(f)\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @param {Array<S>} arr\n * @param {function(S, number, Array<S>):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => arr.some(f)\n\n/**\n * @template ELEM\n *\n * @param {Array<ELEM>} a\n * @param {Array<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => arr.reduce((acc, val) => acc.concat(val), [])\n"]},"metadata":{},"sourceType":"module"}