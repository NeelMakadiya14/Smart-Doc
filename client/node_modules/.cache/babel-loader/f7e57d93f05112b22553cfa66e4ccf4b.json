{"ast":null,"code":"/**\n * Common Math expressions.\n *\n * @module math\n */\nexport var floor = Math.floor;\nexport var ceil = Math.ceil;\nexport var abs = Math.abs;\nexport var imul = Math.imul;\nexport var round = Math.round;\nexport var log10 = Math.log10;\nexport var log2 = Math.log2;\nexport var log = Math.log;\nexport var sqrt = Math.sqrt;\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\n\nexport var add = function add(a, b) {\n  return a + b;\n};\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\n\nexport var min = function min(a, b) {\n  return a < b ? a : b;\n};\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\n\nexport var max = function max(a, b) {\n  return a > b ? a : b;\n};\nexport var isNaN = Number.isNaN;\nexport var pow = Math.pow;\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\n\nexport var exp10 = function exp10(exp) {\n  return Math.pow(10, exp);\n};\nexport var sign = Math.sign;\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\n\nexport var isNegativeZero = function isNegativeZero(n) {\n  return n !== 0 ? n < 0 : 1 / n < 0;\n};","map":{"version":3,"sources":["/media/neel/DATA/WebD/Smart Doc/client/node_modules/lib0/math.js"],"names":["floor","Math","ceil","abs","imul","round","log10","log2","log","sqrt","add","a","b","min","max","isNaN","Number","pow","exp10","exp","sign","isNegativeZero","n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAO,IAAMA,KAAK,GAAGC,IAAI,CAACD,KAAnB;AACP,OAAO,IAAME,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACP,OAAO,IAAMC,GAAG,GAAGF,IAAI,CAACE,GAAjB;AACP,OAAO,IAAMC,IAAI,GAAGH,IAAI,CAACG,IAAlB;AACP,OAAO,IAAMC,KAAK,GAAGJ,IAAI,CAACI,KAAnB;AACP,OAAO,IAAMC,KAAK,GAAGL,IAAI,CAACK,KAAnB;AACP,OAAO,IAAMC,IAAI,GAAGN,IAAI,CAACM,IAAlB;AACP,OAAO,IAAMC,GAAG,GAAGP,IAAI,CAACO,GAAjB;AACP,OAAO,IAAMC,IAAI,GAAGR,IAAI,CAACQ,IAAlB;AAEP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUD,CAAC,GAAGC,CAAd;AAAA,CAAZ;AAEP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACF,CAAD,EAAIC,CAAJ;AAAA,SAAUD,CAAC,GAAGC,CAAJ,GAAQD,CAAR,GAAYC,CAAtB;AAAA,CAAZ;AAEP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAME,GAAG,GAAG,SAANA,GAAM,CAACH,CAAD,EAAIC,CAAJ;AAAA,SAAUD,CAAC,GAAGC,CAAJ,GAAQD,CAAR,GAAYC,CAAtB;AAAA,CAAZ;AAEP,OAAO,IAAMG,KAAK,GAAGC,MAAM,CAACD,KAArB;AAEP,OAAO,IAAME,GAAG,GAAGhB,IAAI,CAACgB,GAAjB;AACP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,GAAG;AAAA,SAAIlB,IAAI,CAACgB,GAAL,CAAS,EAAT,EAAaE,GAAb,CAAJ;AAAA,CAAjB;AAEP,OAAO,IAAMC,IAAI,GAAGnB,IAAI,CAACmB,IAAlB;AAEP;AACA;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,CAAC;AAAA,SAAIA,CAAC,KAAK,CAAN,GAAUA,CAAC,GAAG,CAAd,GAAkB,IAAIA,CAAJ,GAAQ,CAA9B;AAAA,CAAxB","sourcesContent":["/**\n * Common Math expressions.\n *\n * @module math\n */\n\nexport const floor = Math.floor\nexport const ceil = Math.ceil\nexport const abs = Math.abs\nexport const imul = Math.imul\nexport const round = Math.round\nexport const log10 = Math.log10\nexport const log2 = Math.log2\nexport const log = Math.log\nexport const sqrt = Math.sqrt\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\nexport const add = (a, b) => a + b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nexport const min = (a, b) => a < b ? a : b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nexport const max = (a, b) => a > b ? a : b\n\nexport const isNaN = Number.isNaN\n\nexport const pow = Math.pow\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\nexport const exp10 = exp => Math.pow(10, exp)\n\nexport const sign = Math.sign\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nexport const isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0\n"]},"metadata":{},"sourceType":"module"}